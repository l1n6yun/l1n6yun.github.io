<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>毫秒镜像：提升Docker体验的加速神器</title>
    <url>/2024/05/25/22/</url>
    <content><![CDATA[<p>在使用Docker的过程中，镜像下载速度一直是许多开发者面临的痛点。尤其是在网络环境不佳的情况下，等待镜像下载完成可能会耗费大量的时间和耐心。不过，今天我要为大家介绍一个能够显著提升Docker镜像下载速度的工具——毫秒镜像。</p>
<h2 id="什么是毫秒镜像？"><a href="#什么是毫秒镜像？" class="headerlink" title="什么是毫秒镜像？"></a>什么是毫秒镜像？</h2><p>毫秒镜像（<span class="exturl" data-url="aHR0cHM6Ly9kb2NrZXIuMW1zLnJ1bi8=">https://docker.1ms.run<i class="fa fa-external-link-alt"></i></span>）是由合肥木雷坞信息技术有限公司提供的Docker镜像加速服务。它通过在国内部署高速的镜像代理服务器，帮助用户快速获取Docker Hub上的镜像资源，从而大大缩短了镜像下载时间。</p>
<h2 id="如何使用毫秒镜像？"><a href="#如何使用毫秒镜像？" class="headerlink" title="如何使用毫秒镜像？"></a>如何使用毫秒镜像？</h2><p>使用毫秒镜像非常简单，主要有两种方式：全局配置和临时配置。</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>全局配置可以让毫秒镜像永久生效，适用于大多数用户。以下是具体的配置步骤：</p>
<ol>
<li><strong>编辑Docker配置文件</strong><br>  打开终端，运行以下命令，将毫秒镜像的地址添加到Docker的配置文件中：</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&#123;&quot;registry-mirrors&quot;: [&quot;https://docker.1ms.run&quot;]&#125;&#x27; | sudo tee /etc/docker/daemon.json &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>  这一步会将镜像加速地址写入&#x2F;etc&#x2F;docker&#x2F;daemon.json文件中。</p>
<ol start="2">
<li><strong>重启Docker服务</strong><br>  配置完成后，需要重启Docker服务以使配置生效：</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>完成以上步骤后，毫秒镜像就会自动为你的Docker镜像下载提供加速服务。</p>
<h3 id="临时配置"><a href="#临时配置" class="headerlink" title="临时配置"></a>临时配置</h3><p>如果你不想修改全局配置，也可以在拉取镜像时临时使用毫秒镜像。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.1ms.run/library/nginx</span><br></pre></td></tr></table></figure>

<p>这种方式会在本次拉取操作中使用毫秒镜像加速，而不会影响其他镜像的拉取。</p>
<h2 id="登录毫秒镜像"><a href="#登录毫秒镜像" class="headerlink" title="登录毫秒镜像"></a>登录毫秒镜像</h2><p>如果需要使用更高级的功能，比如VIP加速通道，可以注册并登录毫秒镜像。登录命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login docker.1ms.run</span><br></pre></td></tr></table></figure>

<p>登录后，你将享受更快速、更稳定的镜像下载体验。</p>
<h2 id="赞助商与合作伙伴"><a href="#赞助商与合作伙伴" class="headerlink" title="赞助商与合作伙伴"></a>赞助商与合作伙伴</h2><p>毫秒镜像背后有强大的赞助商和合作伙伴支持。例如，腾讯CODING团队提供的免费Git托管和CI&#x2F;CD全流程研发能效平台，以及宝塔Linux面板、雷池WAF社区版、耗子面板和林枫云等合作伙伴，都为用户提供了丰富的服务器管理和安全防护解决方案。</p>
<h2 id="使用协议与免责声明"><a href="#使用协议与免责声明" class="headerlink" title="使用协议与免责声明"></a>使用协议与免责声明</h2><p>在使用毫秒镜像时，用户需要遵守相关法律法规，并自行承担使用风险。开发者不对因使用本程序而导致的任何直接或间接损失承担责任。使用本程序即视为同意免责声明的所有条款。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>镜像加速</tag>
        <tag>Docker配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Alpine 系统下 PhpStorm Git Tools 故障修复</title>
    <url>/2025/06/06/Alpine-%E7%B3%BB%E7%BB%9F%E4%B8%8B-PhpStorm-Git-Tools-%E6%95%85%E9%9A%9C%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p>在 Alpine Linux 环境中使用 PhpStorm 的 Git 工具时，部分开发者可能会遇到以下错误提示，导致版本控制功能无法正常使用。本文将详细分析问题成因并提供分步解决方案。</p>
<h2 id="错误呈现"><a href="#错误呈现" class="headerlink" title="错误呈现"></a>错误呈现</h2><p>当尝试在 PhpStorm 中更新代码或执行 Git 操作时，控制台会抛出以下异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error updating changes: setsid: unrecognized option: w</span><br><span class="line">BusyBox v1.36.1 (2024-06-12 11:52:11 UTC) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: setsid [-c] PROG ARGS</span><br><span class="line"></span><br><span class="line">Run PROG in a new session. PROG will have no controlling terminal</span><br><span class="line">and will not be affected by keyboard signals (^C etc).</span><br><span class="line"></span><br><span class="line">-c Set controlling terminal to stdin</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-83.png" alt="upload successful"></p>
<p><strong>关键问题点</strong>：BusyBox 提供的 setsid 命令不支持<code>-w</code>选项，而 PhpStorm 的 Git 工具可能默认调用了该参数，导致命令执行失败。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>Alpine Linux 默认使用 BusyBox 工具集，其内置的<code>setsid</code>命令仅支持<code>-c</code>选项（设置控制终端），但 PhpStorm 等 IDE 的 Git 插件可能依赖 GNU Core Utilities 中的<code>setsid</code>命令（支持更多选项，如<code>-w</code>）。由于 BusyBox 的<code>setsid</code>与 GNU 版本存在兼容性差异，导致 IDE 调用时参数不匹配。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>以下操作需在终端中以管理员权限（<code>sudo</code>）执行，逐步修复命令冲突问题：</p>
<h3 id="1-查看系统当前-setsid-指向"><a href="#1-查看系统当前-setsid-指向" class="headerlink" title="1. 查看系统当前 setsid 指向"></a>1. 查看系统当前 setsid 指向</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/bin/</span><br><span class="line">ls -al | grep setsid</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-84.png" alt="upload successful"></p>
<ul>
<li>可见当前<code>setsid</code>实际指向 BusyBox 的<code>busybox</code>二进制文件（通过软链接<code>setsid2</code>）。</li>
</ul>
<h3 id="2-重命名原有-setsid-软链接"><a href="#2-重命名原有-setsid-软链接" class="headerlink" title="2. 重命名原有 setsid 软链接"></a>2. 重命名原有 setsid 软链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv setsid setsid2</span><br></pre></td></tr></table></figure>

<ul>
<li>此步骤避免原有 BusyBox 版本的<code>setsid</code>与后续安装的 GNU 版本冲突。</li>
</ul>
<h3 id="3-安装-GNU-Core-Utilities-并拷贝-setsid"><a href="#3-安装-GNU-Core-Utilities-并拷贝-setsid" class="headerlink" title="3. 安装 GNU Core Utilities 并拷贝 setsid"></a>3. 安装 GNU Core Utilities 并拷贝 setsid</h3><p>Alpine 默认仓库中的<code>coreutils</code>包提供 GNU 版本的工具集，执行以下命令安装并复制<code>setsid</code>：</p>
<p>下载地址：<a href="/files/setsid">setsid</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp setsid /usr/bin/setsid</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：若<code>coreutils</code>安装后<code>setsid</code>路径不同（如<code>/usr/bin/setsid</code>已存在），请根据实际路径调整拷贝命令。</p>
<h3 id="4-设置执行权限"><a href="#4-设置执行权限" class="headerlink" title="4. 设置执行权限"></a>4. 设置执行权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /usr/bin/setsid</span><br></pre></td></tr></table></figure>

<ul>
<li>赋予文件完整权限，确保 PhpStorm 可正常调用。</li>
</ul>
<p><img src="/images/pasted-85.png" alt="upload successful"></p>
<h2 id="验证修复效果"><a href="#验证修复效果" class="headerlink" title="验证修复效果"></a>验证修复效果</h2><ol>
<li>重启 PhpStorm，再次尝试 Git 操作（如拉取、提交代码）。</li>
<li>若控制台不再出现<code>setsid: unrecognized option: w</code>错误，则说明修复成功。</li>
<li>如需进一步验证，可在终端直接执行<code>setsid -w echo test</code>，若正常输出<code>test</code>且无报错，表明 GNU 版本的<code>setsid</code>已生效。</li>
</ol>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul>
<li><strong>原理总结</strong>：通过替换 BusyBox 的<code>setsid</code>为 GNU 版本，解决 IDE 参数调用不兼容问题。</li>
<li><strong>注意事项</strong>：修改系统二进制文件需谨慎操作，建议提前备份原有文件（如复制<code>setsid2</code>到其他目录）。</li>
<li><strong>扩展场景</strong>：类似问题可能出现在其他依赖 GNU 工具的 IDE 或脚本中，均可通过安装<code>coreutils</code>并替换对应命令解决。</li>
</ul>
<p>通过以上步骤，即可在 Alpine 系统中恢复 PhpStorm 的 Git 工具正常使用，确保开发流程不受环境差异影响。</p>
]]></content>
      <tags>
        <tag>Alpine</tag>
        <tag>PhpStorm</tag>
        <tag>Git Tools</tag>
        <tag>故障修复</tag>
      </tags>
  </entry>
  <entry>
    <title>ARP欺骗工具arpspoof的用法</title>
    <url>/2021/09/11/ARP%E6%AC%BA%E9%AA%97%E5%B7%A5%E5%85%B7arpspoof%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="ARP工具"><a href="#ARP工具" class="headerlink" title="ARP工具"></a>ARP工具</h3><p>arpspoof 是一款进行arp欺骗的工具，攻击者可以通过它来毒化受害者arp缓存，将网关mac替换为攻击者mac，然后攻击者可截获受害者发送和收到的数据包，可获取受害者账户、密码等相关敏感信息。ARP欺骗，是让目标主机的流量经过主机的网卡，再从网关出去，而网关也会把原本流入目标机的流量经过我得电脑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host</span><br></pre></td></tr></table></figure>

<h4 id="ARP断网攻击"><a href="#ARP断网攻击" class="headerlink" title="ARP断网攻击"></a>ARP断网攻击</h4><p>在实验之前我们首先要知道ARP断网攻击是局域网攻击，我们要保证目标主机必须和自己处于一个局域网内，且自己和目标主机网络应该是通的。</p>
<p>首先可以使用 nmap 扫描局域网中存活的地址,探测到的存活地址，就是我们的目标主机,然后使用 arpspoof 实施 ARP 欺骗。</p>
<p><img src="/images/pasted-63.png" alt="upload successful"></p>
<p>在使用arp欺骗前先开启Kali的IP转发</p>
<p><img src="/images/pasted-64.png" alt="upload successful"></p>
<p>链接目标机查看一下网络状态</p>
<p><img src="/images/pasted-65.png" alt="upload successful"></p>
<p>使用 ettercap 对数据进行抓取</p>
<p><img src="/images/pasted-66.png" alt="upload successful"></p>
<p><img src="/images/pasted-67.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>arpspoof</tag>
        <tag>ARP欺骗</tag>
        <tag>network security</tag>
        <tag>nmap</tag>
        <tag>ettercap</tag>
        <tag>kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache优化：修改最大并发连接数</title>
    <url>/2017/12/19/Apache%E4%BC%98%E5%8C%96%EF%BC%9A%E4%BF%AE%E6%94%B9%E6%9C%80%E5%A4%A7%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5%E6%95%B0/</url>
    <content><![CDATA[<p>MPM(多路处理模块)</p>
<p>常见:</p>
<ol>
<li>perfork 预处理进程方式</li>
<li>worker 工作者模式</li>
<li>winnt 在windows使用</li>
</ol>
<p>案例:把apache的最大并发数配置成1000个</p>
<h2 id="首先确认apache的mpm方式"><a href="#首先确认apache的mpm方式" class="headerlink" title="首先确认apache的mpm方式"></a>首先确认apache的mpm方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd&gt;httpd.exe -l #可以看到是什么模式了</span><br></pre></td></tr></table></figure>

<p>这里就看 <code>mpm_xxx.c</code> 这个 <code>xxx</code> 就是那个了</p>
<h2 id="修改httpd-conf文件"><a href="#修改httpd-conf文件" class="headerlink" title="修改httpd.conf文件"></a>修改httpd.conf文件</h2><p>搜索 <code>mpm</code> ,找到 <code>Server-pool management(MPM specific)</code></p>
<p>去掉 <code># Include conf/extra/httpd-mpm.conf</code></p>
<h2 id="修改-conf-extra-httpd-mpm-conf-文件"><a href="#修改-conf-extra-httpd-mpm-conf-文件" class="headerlink" title="修改 conf/extra/httpd-mpm.conf 文件"></a>修改 <code>conf/extra/httpd-mpm.conf</code> 文件</h2><h3 id="prefork模式就修改这里"><a href="#prefork模式就修改这里" class="headerlink" title="prefork模式就修改这里"></a>prefork模式就修改这里</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mpm_prefork_module</span>&gt;</span></span><br><span class="line">	StartServers 5 # 预先开启的进程</span><br><span class="line">	MinSpareServers 5 # 最小预留5个</span><br><span class="line">	MaxSpareServers 10 # 最大留10</span><br><span class="line">	MaxClients 150 # 最多并发多少个 *</span><br><span class="line">	MaxRequestsPerChild 0 # 最多请求多少次 0不限制</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="winnt模式"><a href="#winnt模式" class="headerlink" title="winnt模式"></a>winnt模式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mpm_winnt_module</span>&gt;</span></span><br><span class="line">	ThreadsPerChild 150 # 最大并发数 *</span><br><span class="line">	MaxRequestsPerChild 0 # 最多处理多少次请求 0不限制</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后面有*的那个字段的数值然后重新启动 <code>apache</code></p>
<p>说明:配置到多大,不一定就可能支撑这么大的并发,考虑到本身 <code>apache</code> 所在的机器硬件性能(如:内存,CPU,硬盘IO)</p>
<p>系统是 <code>linux/unix</code> ,配置 <code>perfork</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mpm_prefork_module</span>&gt;</span></span><br><span class="line">	StartServers 5</span><br><span class="line">	MinSpareServers 5</span><br><span class="line">	MaxSpareServers 10</span><br><span class="line">	MaxClients 150 *#并发量</span><br><span class="line">	MaxRequestsPerChild 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给大家一个合理的建议配置,对大部份网站,中型网站配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mpm_prefork_module</span>&gt;</span></span><br><span class="line">	StartServers 5 # 预先启动</span><br><span class="line">	MinSpareServers 5</span><br><span class="line">	MaxSpareServers 10 # 最大空闲进程</span><br><span class="line">	ServerLimit 1500 *# 用于修改apache编程参数</span><br><span class="line">	MaxClients 1000 *# 最大并发数</span><br><span class="line">	MaxRequestsPerChild 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注:apache2.2以后才有的ServerLimit这个参数,其中ServerLimit数值大于MaxClients数值</p>
<p>如果网站的pv值百万</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerLimit 2500 *# 用于修改apache编程参数</span><br><span class="line">MaxClients 2000 *# 最大并发数</span><br></pre></td></tr></table></figure>

<p>注:调到这就是极限了,要是网站访问还是大,哪就要增加apache服务器了</p>
]]></content>
      <tags>
        <tag>Apache MPM</tag>
        <tag>服务器配置优化</tag>
        <tag>最大并发连接数</tag>
        <tag>Apache优化</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3自定义滚动条样式 -webkit-scrollbar</title>
    <url>/2016/12/16/CSS3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F%20-webkit-scrollbar/</url>
    <content><![CDATA[<blockquote>
<p>有没有觉得浏览器自带的原始滚动条很不美观,同时也有看到很多网站的自定义滚动条显得高端,就连 <code>chrome32.0</code> 开发板都抛弃了原始的滚动条,美观多了。那 ** webkit浏览器 ** 是如何自定义滚动条的呢？</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>webkit</code> 支持拥有 <code>overflow</code> 属性的区域,列表框,下拉菜单,<code>textarea</code> 的滚动条自定义样式,所以用处还是挺大的。当然,兼容所有浏览器的滚动条样式目前是不存在的。</p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>来看看这2个滚动条demo： <span class="exturl" data-url="aHR0cDovL3d3dy54dWFuZmVuZ2dlLmNvbS9kZW1vLzIwMTMxMS9zY3JvbGwvaW5kZXguaHRtbA==">demo1(图片版)<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL3d3dy54dWFuZmVuZ2dlLmNvbS9kZW1vLzIwMTMxMS9zY3JvbGwvY3NzMy1zY3JvbGwuaHRtbA==">demo2(纯CSS3版)<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="滚动条组成"><a href="#滚动条组成" class="headerlink" title="滚动条组成"></a>滚动条组成</h2><table>
<thead>
<tr>
<th>样式名</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><code>::-webkit-scrollbar</code></td>
<td>滚动条整体部分</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-thumb</code></td>
<td>滚动条里面的小方块,能向上向下移动(或往左往右移动,取决于是垂直滚动条还是水平滚动条)</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-track</code></td>
<td>滚动条的轨道(里面装有<code>Thumb</code>)</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-button</code></td>
<td>滚动条的轨道的两端按钮,允许通过点击微调小方块的位置。</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-track-piece</code></td>
<td>内层轨道,滚动条中间部分(除去)</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-corner</code></td>
<td>边角,即两个滚动条的交汇处</td>
</tr>
<tr>
<td><code>::-webkit-resizer</code></td>
<td>两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</td>
</tr>
</tbody></table>
<h2 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h2><p>这里就不贴出详细代码了, demo 里面可以通过查看源码寻找具体样式的设置。来看看 demo2 中第二个滚动条的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/</span>  </span><br><span class="line">::-webkit-scrollbar  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;  </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span>  </span><br><span class="line">::-webkit-scrollbar-track  </span><br><span class="line">&#123;  </span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);  </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;  </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span>  </span><br><span class="line">::-webkit-scrollbar-thumb  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;  </span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);  </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h2><p>定义滚动条就是利用伪元素与伪类,那什么是伪元素和伪类呢？</p>
<p>伪类大家应该很熟悉 <code>:link</code> , <code>:focus</code> , <code>:hover</code> ,此外 <span class="exturl" data-url="aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL2NzczM=">CSS3<i class="fa fa-external-link-alt"></i></span> 中又增加了许多伪类选择器,如 <code>:nth-child</code> , <code>:last-child</code> , <code>:nth-last-of-type()</code> 等。</p>
<p><code>CSS</code> 中的伪元素大家以前看过： <code>:first-line</code> , <code>:first-letter</code> , <code>:before</code> , <code>:after</code> 。那么在 <code>CSS3</code> 中,伪元素进行了调整,在以前的基础上增加了一个 <code>:</code> 也就是现在变成了” <code>::first-letter</code> , <code>::first-line</code> , <code>::before</code> , <code>::after</code> “,另外 <code>CSS3</code> 还增加了一个 <code>::selection</code> 。两个 <code>::</code> 和一个 <code>:</code> 在 <code>CSS3</code> 中主要用来区分伪类和伪元素。</p>
<p>webkit的伪类和伪元素的实现很强,可以把滚动条当成一个页面元素来定义,再结合一些高级的 <code>CSS3</code> 属性,比如渐变、圆角、RGBa等等。然后如果有些地方要用图片,可以把图片也可以转换成 <code>Base64</code> ,不然每次都得加载那个多个图片,增加请求数。</p>
<p>任何对象都可以设置：边框、阴影、背景图片等等,创建的滚动条任然会按照<span class="exturl" data-url="aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL29wZXJhdGluZ3N5c3RlbQ==">操作系统<i class="fa fa-external-link-alt"></i></span>本身的设置来完成其交互的行为。下面的伪类可以应用到上面的伪元素中。有点小复杂,具体怎么写可以看第一个 demo ,那里也有注释。</p>
<table>
<thead>
<tr>
<th>样式名</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td><code>:horizontal</code></td>
<td><code>horizontal</code> 伪类适用于任何水平方向上的滚动条</td>
</tr>
<tr>
<td><code>:vertical</code></td>
<td><code>vertical</code> 伪类适用于任何垂直方向的滚动条</td>
</tr>
<tr>
<td><code>:decrement</code></td>
<td><code>decrement</code> 伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片,例如可以使区域向上或者向右移动的区域和按钮</td>
</tr>
<tr>
<td><code>:increment</code></td>
<td><code>increment</code> 伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片,例如可以使区域向下或者向左移动的区域和按钮</td>
</tr>
<tr>
<td><code>:start</code></td>
<td><code>start</code> 伪类适用于按钮和轨道碎片。表示对象(按钮 轨道碎片)是否放在滑块的前面</td>
</tr>
<tr>
<td><code>:end</code></td>
<td><code>end</code> 伪类适用于按钮和轨道碎片。表示对象(按钮 轨道碎片)是否放在滑块的后面</td>
</tr>
<tr>
<td><code>:double-button</code></td>
<td><code>double-button</code> 伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。</td>
</tr>
<tr>
<td><code>:single-button</code></td>
<td><code>single-button</code> 伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。</td>
</tr>
<tr>
<td><code>:no-button</code></td>
<td><code>no-button</code> 伪类表示轨道结束的位置没有按钮。</td>
</tr>
<tr>
<td><code>:corner-present</code></td>
<td><code>corner-present</code> 伪类表示滚动条的角落是否存在。</td>
</tr>
<tr>
<td><code>:window-inactive</code></td>
<td>适用于所有滚动条,表示包含滚动条的区域,焦点不在该窗口的时候。</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-track-piece:start</code></td>
<td>滚动条上半边或左半边</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-thumb:window-inactive</code></td>
<td>当焦点不在当前区域滑块的状态</td>
</tr>
<tr>
<td><code>::-webkit-scrollbar-button:horizontal:decrement:hover</code></td>
<td>当鼠标在水平滚动条下面的按钮上的状态</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>前端开发</tag>
        <tag>界面优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Burp Suite 中文乱码解决</title>
    <url>/2025/03/21/Burp-Suite-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在使用 Burp Suite 进行 HTTP 请求或响应分析时，可能遇到请求参数、响应内容中的中文显示为乱码的情况，例如显示为乱码符号（如方框、问号等），影响数据查看和分析。</p>
<p><img src="/images/pasted-76.png" alt="upload successful"></p>
<p>Burp Suite 默认的字符编码或字体设置与中文不兼容，导致无法正确解析和显示中文字符。常见原因包括：<br>编码格式错误：未设置为 UTF-8（中文通用编码）。<br>字体不支持中文：默认字体无法渲染中文字符。</p>
<p>解决步骤</p>
<ol>
<li><p>进入设置页面</p>
<p> 打开 Burp Suite，点击顶部菜单栏的 Settings（设置），选择 User Interface（用户界面）。</p>
</li>
<li><p>修改消息编辑器的编码和字体</p>
<p> 在左侧导航栏中选择 Message editor（消息编辑器）。</p>
<p> 在右侧的 Character sets（字符编码）下拉菜单中，选择 UTF-8（确保与目标网站的编码一致）。<br> 更换支持中文的字体：</p>
<p> 在 Font（字体）选项中，点击 Change font（选择字体），从列表中选择支持中文的字体（如 Microsoft YaHei、SimSun 或 黑体），调整字体大小至合适显示。</p>
</li>
</ol>
<p><img src="/images/pasted-77.png" alt="upload successful"></p>
<p>修改完成后，就可以正常查看中文字体了</p>
<p><img src="/images/pasted-78.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>Burp Suite</tag>
        <tag>字符编码</tag>
        <tag>中文支持</tag>
      </tags>
  </entry>
  <entry>
    <title>Async-Await</title>
    <url>/2022/02/08/Async-Await/</url>
    <content><![CDATA[<h1 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async-Await"></a>Async-Await</h1><p>异步编程的最高境界，就是根本不用关心它异步。</p>
<p>async 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。</p>
<h1 id="async-await-与-promise-的关系"><a href="#async-await-与-promise-的关系" class="headerlink" title="async-await 与 promise 的关系"></a>async-await 与 promise 的关系</h1><p>不存在谁替代谁，因为 async-await 是寄生于 Promise。Generator 的语法糖。</p>
<p><strong>async</strong> ：声明一个方法是异步的</p>
<p><strong>await</strong> ：可以认为是 async wait 的简写，等待一个异步方法执行完成。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">params</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">demo</span>()</span><br></pre></td></tr></table></figure>

<p>async 函数返回的是一个 Promise 对象</p>
<p>必须了解的 AsyncFunction <code>console.log(async function(){}.constructor)</code></p>
<p>在 Chrome 里申明这样一个函数，可以在控制台看到返回的其实就是一个 Promise 对象。</p>
<p>扩展需要了解的就是 Chrome 现在也支持 AsyncFunction , 可以在 Chrome 控制台测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;.<span class="property">constructor</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AsyncFunction</span>(<span class="params"></span>)</span><br></pre></td></tr></table></figure>

<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><ol>
<li>async 表示这是一个 async 函数，await 只能用在这个函数里面。</li>
<li>await 表示在这里等待 Promise 对象返回结果后，在继续执行。</li>
<li>await 后面跟着的应该是一个 Promise 对象（当然，其他返回值也没关系，只是会立即执行，不过那样就没有意义了）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>();</span><br></pre></td></tr></table></figure>

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>Promise 虽然一方面解决了 <code>callback</code> 的回调地狱，但是相对的把回调“纵向发展”了，形成了一个回调链。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">wait</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">res</span>(wait)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result01</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(result01 + <span class="number">100</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result02</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">sleep</span>(result02 + <span class="number">100</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result03</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result03); <span class="comment">// 300</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成async/await写法就是</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// await 是强制把异步变成了同步，这一句代码执行完，才会执行下一句</span></span><br><span class="line">    <span class="keyword">let</span> result01 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">let</span> result02 = <span class="keyword">await</span> <span class="title function_">sleep</span>(result01 + <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">let</span> result03 = <span class="keyword">await</span> <span class="title function_">sleep</span>(result02 + <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> result03;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">demo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);	<span class="comment">// 300</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>既然 <code>.then(...)</code> 不用写了，那么 <code>.catch(...)</code> 也不用写，可以直接用标准的 <code>try catch</code> 语法捕捉错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">demo</span>();	<span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<p>这是基本的错误处理，但是当内部出现错一些错误时，和上面Promise有点类似，demo() 函数不会报错，函数需要catch回调捕捉吗，这就是内部错误被‘静默’处理了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">demo</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="注意你的并行执行和循环"><a href="#注意你的并行执行和循环" class="headerlink" title="注意你的并行执行和循环"></a>注意你的并行执行和循环</h1><p>如果这你想异步发出AJAX请求，使用 await 代码会同步执行，所以 async&#x2F;await 需要谨慎使用。</p>
<p>await in for 循环：await 的执行上下文必须是 async 函数</p>
<p>现在有一些 <code>.forEach</code> 或者 <code>.map</code> 的循环里，比如在 <code>.forEach</code> 里使用 await , 这时候的上下文就变成了 Array ,而不是 <code>async function</code> ,就会报错。这时候你就要想到是什么错误。</p>
]]></content>
      <tags>
        <tag>Async</tag>
        <tag>Await</tag>
        <tag>JavaScript Promise</tag>
        <tag>错误处理</tag>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS改变png图片颜色</title>
    <url>/2017/05/22/CSS%E6%94%B9%E5%8F%98png%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.icon</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">width</span>:<span class="number">20px</span>;<span class="attribute">overflow</span>: hidden;&#125;</span><br><span class="line"><span class="selector-class">.icon</span> <span class="selector-class">.icon</span>&#123;<span class="attribute">width</span>: <span class="number">20px</span>;<span class="attribute">height</span>: <span class="number">20px</span>;<span class="attribute">display</span>:block;<span class="attribute">position</span>: relative;<span class="attribute">left</span>: -<span class="number">20px</span>;<span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img/icon.png</span>) no-repeat;-webkit-<span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">#000</span> <span class="number">20px</span> <span class="number">0</span>);<span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">#000</span> <span class="number">20px</span> <span class="number">0</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#x27;icon&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;icon&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;color&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;color&#x27;</span>).<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> c = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;icon&#x27;</span>).<span class="property">style</span>.<span class="property">webkitFilter</span> = <span class="string">&#x27;drop-shadow(&#x27;</span>+c+<span class="string">&#x27; 20px 0)&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在谷歌、火狐手机端、都是可以用的，使用的技术是 css 里滤镜里的投影。</p>
<p>我要睡到下一个世界大战</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>CURL证书</title>
    <url>/2018/07/05/CURL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>出现错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl: (60) SSL certificate : unable to get local issuer certificate</span><br></pre></td></tr></table></figure>

<p>错误原因 ：未正确配置 CA 证书</p>
<p><a href="/file/cacert.pem">证书下载</a></p>
<p>下载后将证书位置保存在 <code>php.ini</code></p>
<p><code>curl.cainfo = &quot;d:/wamp/php/cacert.pem&quot;</code></p>
]]></content>
      <tags>
        <tag>curl</tag>
        <tag>ssl certificate</tag>
        <tag>ca证书</tag>
        <tag>php配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Chart.js 中文文档</title>
    <url>/2016/11/22/Chart.js%20%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="此文档包含了用Chart-js创建漂亮图表的所有知识。"><a href="#此文档包含了用Chart-js创建漂亮图表的所有知识。" class="headerlink" title="此文档包含了用Chart.js创建漂亮图表的所有知识。"></a>此文档包含了用Chart.js创建漂亮图表的所有知识。</h2><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h4 id="引入Chart-js文件"><a href="#引入Chart-js文件" class="headerlink" title="引入Chart.js文件"></a>引入Chart.js文件</h4><p>首先我们需要在页面中引入Chart.js文件。此工具库在全局命名空间中定义了Chart变量。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;Chart.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h2><p>为了创建图表，我们要实例化一个Chart对象。为了完成前面的步骤，首先需要需要传入一个绘制图表的2d context。以下是案例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myChart&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Get the context of the canvas element we want to select</span></span><br><span class="line"><span class="keyword">var</span> ctx = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myChart&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> myNewChart = <span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">PolarArea</span>(data);</span><br></pre></td></tr></table></figure>

<p>我们还可以用jQuery获取canvas的context。首先从jQuery集合中获取我们需要的DOM节点，然后在这个DOM节点上调用 getContext(“2d”) 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Get context with jQuery - using jQuery&#x27;s .get() method.</span></span><br><span class="line"><span class="keyword">var</span> ctx = $(<span class="string">&quot;#myChart&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="comment">//This will get the first returned node in the jQuery collection.</span></span><br><span class="line"><span class="keyword">var</span> myNewChart = <span class="keyword">new</span> <span class="title class_">Chart</span>(ctx);</span><br></pre></td></tr></table></figure>

<p>当我们完成了在指定的canvas上实例化Chart对象之后，Chart.js会自动针对retina屏幕做缩放。</p>
<p>Chart对象设置完成后，我们就可以继续创建Chart.js中提供的具体类型的图表了。下面这个案例中，我们将展示如何绘制一幅极地区域图（Polar area chart）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">PolarArea</span>(data,options);</span><br></pre></td></tr></table></figure>

<p>We call a method of the name of the chart we want to create. We pass in the data for that chart type, and the options for that chart as parameters. Chart.js will merge the options you pass in with the default options for that chart type.</p>
<h2 id="曲线图（Line-chart）"><a href="#曲线图（Line-chart）" class="headerlink" title="曲线图（Line chart）"></a>曲线图（Line chart）</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>曲线图就是将数据标于曲线上的一种图表。</p>
<p>一般用于展示趋势数据，和比较两组数据集。</p>
<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">Line</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    labels : [<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>],</span><br><span class="line">	datasets : [</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(220,220,220,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(220,220,220,1)&quot;</span>,</span><br><span class="line">			pointColor : <span class="string">&quot;rgba(220,220,220,1)&quot;</span>,</span><br><span class="line">			pointStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">			data : [<span class="number">65</span>,<span class="number">59</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">56</span>,<span class="number">55</span>,<span class="number">40</span>]</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(151,187,205,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(151,187,205,1)&quot;</span>,</span><br><span class="line">			pointColor : <span class="string">&quot;rgba(151,187,205,1)&quot;</span>,</span><br><span class="line">			pointStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">			data : [<span class="number">28</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">19</span>,<span class="number">96</span>,<span class="number">27</span>,<span class="number">100</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The line chart requires an array of labels for each of the data points. This is show on the X axis.</p>
<p>The data for line charts is broken up into an array of datasets. Each dataset has a colour for the fill, a colour for the line and colours for the points and strokes of the points. These colours are strings just like CSS. You can use RGBA, RGB, HEX or HSL notation.</p>
<h4 id="图表参数"><a href="#图表参数" class="headerlink" title="图表参数"></a>图表参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Line</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">				</span><br><span class="line">	<span class="comment">//Boolean - If we show the scale above the chart data			</span></span><br><span class="line">	scaleOverlay : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - If we want to override with a hard coded scale</span></span><br><span class="line">	scaleOverride : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//** Required if scaleOverride is true **</span></span><br><span class="line">	<span class="comment">//Number - The number of steps in a hard coded scale</span></span><br><span class="line">	scaleSteps : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The value jump in the hard coded scale</span></span><br><span class="line">	scaleStepWidth : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The scale starting value</span></span><br><span class="line">	scaleStartValue : <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//String - Colour of the scale line	</span></span><br><span class="line">	scaleLineColor : <span class="string">&quot;rgba(0,0,0,.1)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of the scale line	</span></span><br><span class="line">	scaleLineWidth : <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether to show labels on the scale	</span></span><br><span class="line">	scaleShowLabels : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Interpolated JS string - can access value</span></span><br><span class="line">	scaleLabel : <span class="string">&quot;&lt;%=value%&gt;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font declaration for the scale label</span></span><br><span class="line">	scaleFontFamily : <span class="string">&quot;&#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Scale label font size in pixels	</span></span><br><span class="line">	scaleFontSize : <span class="number">12</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font weight style	</span></span><br><span class="line">	scaleFontStyle : <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font colour	</span></span><br><span class="line">	scaleFontColor : <span class="string">&quot;#666&quot;</span>,	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">///Boolean - Whether grid lines are shown across the chart</span></span><br><span class="line">	scaleShowGridLines : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Colour of the grid lines</span></span><br><span class="line">	scaleGridLineColor : <span class="string">&quot;rgba(0,0,0,.05)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Width of the grid lines</span></span><br><span class="line">	scaleGridLineWidth : <span class="number">1</span>,	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether the line is curved between points</span></span><br><span class="line">	bezierCurve : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to show a dot for each point</span></span><br><span class="line">	pointDot : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Radius of each point dot in pixels</span></span><br><span class="line">	pointDotRadius : <span class="number">3</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of point dot stroke</span></span><br><span class="line">	pointDotStrokeWidth : <span class="number">1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to show a stroke for datasets</span></span><br><span class="line">	datasetStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of dataset stroke</span></span><br><span class="line">	datasetStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to fill the dataset with a colour</span></span><br><span class="line">	datasetFill : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to animate the chart</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Number - Number of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">60</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutQuart&quot;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Function - Fires when the animation is complete</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="柱状图（Bar-chart）"><a href="#柱状图（Bar-chart）" class="headerlink" title="柱状图（Bar chart）"></a>柱状图（Bar chart）</h2><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>A bar chart is a way of showing data as bars.</p>
<p>It is sometimes used to show trend data, and the comparison of multiple data sets side by side.</p>
<h4 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">Bar</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">	labels : [<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>],</span><br><span class="line">	datasets : [</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(220,220,220,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(220,220,220,1)&quot;</span>,</span><br><span class="line">			data : [<span class="number">65</span>,<span class="number">59</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">56</span>,<span class="number">55</span>,<span class="number">40</span>]</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(151,187,205,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(151,187,205,1)&quot;</span>,</span><br><span class="line">			data : [<span class="number">28</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">19</span>,<span class="number">96</span>,<span class="number">27</span>,<span class="number">100</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The bar chart has the a very similar data structure to the line chart, and has an array of datasets, each with colours and an array of data. Again, colours are in CSS format.</p>
<p>We have an array of labels too for display. In the example, we are showing the same data as the previous line chart example.</p>
<h4 id="图表参数-1"><a href="#图表参数-1" class="headerlink" title="图表参数"></a>图表参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bar</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">				</span><br><span class="line">	<span class="comment">//Boolean - If we show the scale above the chart data			</span></span><br><span class="line">	scaleOverlay : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - If we want to override with a hard coded scale</span></span><br><span class="line">	scaleOverride : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//** Required if scaleOverride is true **</span></span><br><span class="line">	<span class="comment">//Number - The number of steps in a hard coded scale</span></span><br><span class="line">	scaleSteps : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The value jump in the hard coded scale</span></span><br><span class="line">	scaleStepWidth : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The scale starting value</span></span><br><span class="line">	scaleStartValue : <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//String - Colour of the scale line	</span></span><br><span class="line">	scaleLineColor : <span class="string">&quot;rgba(0,0,0,.1)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of the scale line	</span></span><br><span class="line">	scaleLineWidth : <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether to show labels on the scale	</span></span><br><span class="line">	scaleShowLabels : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Interpolated JS string - can access value</span></span><br><span class="line">	scaleLabel : <span class="string">&quot;&lt;%=value%&gt;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font declaration for the scale label</span></span><br><span class="line">	scaleFontFamily : <span class="string">&quot;&#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Scale label font size in pixels	</span></span><br><span class="line">	scaleFontSize : <span class="number">12</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font weight style	</span></span><br><span class="line">	scaleFontStyle : <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font colour	</span></span><br><span class="line">	scaleFontColor : <span class="string">&quot;#666&quot;</span>,	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">///Boolean - Whether grid lines are shown across the chart</span></span><br><span class="line">	scaleShowGridLines : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Colour of the grid lines</span></span><br><span class="line">	scaleGridLineColor : <span class="string">&quot;rgba(0,0,0,.05)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Width of the grid lines</span></span><br><span class="line">	scaleGridLineWidth : <span class="number">1</span>,	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - If there is a stroke on each bar	</span></span><br><span class="line">	barShowStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of the bar stroke	</span></span><br><span class="line">	barStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Spacing between each of the X value sets</span></span><br><span class="line">	barValueSpacing : <span class="number">5</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Spacing between data sets within X values</span></span><br><span class="line">	barDatasetSpacing : <span class="number">1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to animate the chart</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Number - Number of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">60</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutQuart&quot;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Function - Fires when the animation is complete</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="雷达图或蛛网图（Radar-chart）"><a href="#雷达图或蛛网图（Radar-chart）" class="headerlink" title="雷达图或蛛网图（Radar chart）"></a>雷达图或蛛网图（Radar chart）</h2><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>A radar chart is a way of showing multiple data points and the variation between them.</p>
<p>They are often useful for comparing the points of two or more different data sets</p>
<h4 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">Radar</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">	labels : [<span class="string">&quot;Eating&quot;</span>,<span class="string">&quot;Drinking&quot;</span>,<span class="string">&quot;Sleeping&quot;</span>,<span class="string">&quot;Designing&quot;</span>,<span class="string">&quot;Coding&quot;</span>,<span class="string">&quot;Partying&quot;</span>,<span class="string">&quot;Running&quot;</span>],</span><br><span class="line">	datasets : [</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(220,220,220,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(220,220,220,1)&quot;</span>,</span><br><span class="line">			pointColor : <span class="string">&quot;rgba(220,220,220,1)&quot;</span>,</span><br><span class="line">			pointStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">			data : [<span class="number">65</span>,<span class="number">59</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">56</span>,<span class="number">55</span>,<span class="number">40</span>]</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			fillColor : <span class="string">&quot;rgba(151,187,205,0.5)&quot;</span>,</span><br><span class="line">			strokeColor : <span class="string">&quot;rgba(151,187,205,1)&quot;</span>,</span><br><span class="line">			pointColor : <span class="string">&quot;rgba(151,187,205,1)&quot;</span>,</span><br><span class="line">			pointStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">			data : [<span class="number">28</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">19</span>,<span class="number">96</span>,<span class="number">27</span>,<span class="number">100</span>]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For a radar chart, usually you will want to show a label on each point of the chart, so we include an array of strings that we show around each point in the chart. If you do not want this, you can either not include the array of labels, or choose to hide them in the chart options.</p>
<p>For the radar chart data, we have an array of datasets. Each of these is an object, with a fill colour, a stroke colour, a colour for the fill of each point, and a colour for the stroke of each point. We also have an array of data values.</p>
<h4 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Radar</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">				</span><br><span class="line">	<span class="comment">//Boolean - If we show the scale above the chart data			</span></span><br><span class="line">	scaleOverlay : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - If we want to override with a hard coded scale</span></span><br><span class="line">	scaleOverride : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//** Required if scaleOverride is true **</span></span><br><span class="line">	<span class="comment">//Number - The number of steps in a hard coded scale</span></span><br><span class="line">	scaleSteps : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The value jump in the hard coded scale</span></span><br><span class="line">	scaleStepWidth : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The centre starting value</span></span><br><span class="line">	scaleStartValue : <span class="literal">null</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to show lines for each scale point</span></span><br><span class="line">	scaleShowLine : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//String - Colour of the scale line	</span></span><br><span class="line">	scaleLineColor : <span class="string">&quot;rgba(0,0,0,.1)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of the scale line	</span></span><br><span class="line">	scaleLineWidth : <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether to show labels on the scale	</span></span><br><span class="line">	scaleShowLabels : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Interpolated JS string - can access value</span></span><br><span class="line">	scaleLabel : <span class="string">&quot;&lt;%=value%&gt;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font declaration for the scale label</span></span><br><span class="line">	scaleFontFamily : <span class="string">&quot;&#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Scale label font size in pixels	</span></span><br><span class="line">	scaleFontSize : <span class="number">12</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font weight style	</span></span><br><span class="line">	scaleFontStyle : <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font colour	</span></span><br><span class="line">	scaleFontColor : <span class="string">&quot;#666&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Show a backdrop to the scale label</span></span><br><span class="line">	scaleShowLabelBackdrop : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of the label backdrop	</span></span><br><span class="line">	scaleBackdropColor : <span class="string">&quot;rgba(255,255,255,0.75)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The backdrop padding above &amp; below the label in pixels</span></span><br><span class="line">	scaleBackdropPaddingY : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The backdrop padding to the side of the label in pixels	</span></span><br><span class="line">	scaleBackdropPaddingX : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether we show the angle lines out of the radar</span></span><br><span class="line">	angleShowLineOut : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Colour of the angle line</span></span><br><span class="line">	angleLineColor : <span class="string">&quot;rgba(0,0,0,.1)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of the angle line</span></span><br><span class="line">	angleLineWidth : <span class="number">1</span>,			</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Point label font declaration</span></span><br><span class="line">	pointLabelFontFamily : <span class="string">&quot;&#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Point label font weight</span></span><br><span class="line">	pointLabelFontStyle : <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Point label font size in pixels	</span></span><br><span class="line">	pointLabelFontSize : <span class="number">12</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Point label font colour	</span></span><br><span class="line">	pointLabelFontColor : <span class="string">&quot;#666&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to show a dot for each point</span></span><br><span class="line">	pointDot : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Radius of each point dot in pixels</span></span><br><span class="line">	pointDotRadius : <span class="number">3</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of point dot stroke</span></span><br><span class="line">	pointDotStrokeWidth : <span class="number">1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to show a stroke for datasets</span></span><br><span class="line">	datasetStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Pixel width of dataset stroke</span></span><br><span class="line">	datasetStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to fill the dataset with a colour</span></span><br><span class="line">	datasetFill : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to animate the chart</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Number - Number of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">60</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutQuart&quot;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Function - Fires when the animation is complete</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="极地区域图（Polar-area-chart）"><a href="#极地区域图（Polar-area-chart）" class="headerlink" title="极地区域图（Polar area chart）"></a>极地区域图（Polar area chart）</h2><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>Polar area charts are similar to pie charts, but each segment has the same angle - the radius of the segment differs depending on the value.</p>
<p>This type of chart is often useful when we want to show a comparison data similar to a pie chart, but also show a scale of values for context.</p>
<h4 id="使用案例-3"><a href="#使用案例-3" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">PolarArea</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">30</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#D97041&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">90</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#C7604C&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">24</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#21323D&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">58</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#9D9B7F&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">82</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#7D4F6D&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">8</span>,</span><br><span class="line">		<span class="attr">color</span>: <span class="string">&quot;#584A5E&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>As you can see, for the chart data you pass in an array of objects, with a value and a colour. The value attribute should be a number, while the color attribute should be a string. Similar to CSS, for this string you can use HEX notation, RGB, RGBA or HSL.</p>
<h2 id="图表-1"><a href="#图表-1" class="headerlink" title="图表"></a>图表</h2><p>These are the default chart options. By passing in an object with any of these attributes, Chart.js will merge these objects and the graph accordingly. Explanations of each option are commented in the code below.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PolarArea</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">				</span><br><span class="line">	<span class="comment">//Boolean - Whether we show the scale above or below the chart segments</span></span><br><span class="line">	scaleOverlay : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - If we want to override with a hard coded scale</span></span><br><span class="line">	scaleOverride : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//** Required if scaleOverride is true **</span></span><br><span class="line">	<span class="comment">//Number - The number of steps in a hard coded scale</span></span><br><span class="line">	scaleSteps : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The value jump in the hard coded scale</span></span><br><span class="line">	scaleStepWidth : <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">//Number - The centre starting value</span></span><br><span class="line">	scaleStartValue : <span class="literal">null</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Show line for each value in the scale</span></span><br><span class="line">	scaleShowLine : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of the scale line</span></span><br><span class="line">	scaleLineColor : <span class="string">&quot;rgba(0,0,0,.1)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The width of the line - in pixels</span></span><br><span class="line">	scaleLineWidth : <span class="number">1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - whether we should show text labels</span></span><br><span class="line">	scaleShowLabels : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Interpolated JS string - can access value</span></span><br><span class="line">	scaleLabel : <span class="string">&quot;&lt;%=value%&gt;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font declaration for the scale label</span></span><br><span class="line">	scaleFontFamily : <span class="string">&quot;&#x27;Arial&#x27;&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Scale label font size in pixels	</span></span><br><span class="line">	scaleFontSize : <span class="number">12</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font weight style	</span></span><br><span class="line">	scaleFontStyle : <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Scale label font colour	</span></span><br><span class="line">	scaleFontColor : <span class="string">&quot;#666&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Show a backdrop to the scale label</span></span><br><span class="line">	scaleShowLabelBackdrop : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of the label backdrop	</span></span><br><span class="line">	scaleBackdropColor : <span class="string">&quot;rgba(255,255,255,0.75)&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The backdrop padding above &amp; below the label in pixels</span></span><br><span class="line">	scaleBackdropPaddingY : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The backdrop padding to the side of the label in pixels	</span></span><br><span class="line">	scaleBackdropPaddingX : <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Stroke a line around each segment in the chart</span></span><br><span class="line">	segmentShowStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of the stroke on each segement.</span></span><br><span class="line">	segmentStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The width of the stroke value in pixels	</span></span><br><span class="line">	segmentStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to animate the chart or not</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Amount of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">100</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect.</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutBounce&quot;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether to animate the rotation of the chart</span></span><br><span class="line">	animateRotate : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether to animate scaling the chart from the centre</span></span><br><span class="line">	animateScale : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Function - This will fire when the animation of the chart is complete.</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饼图（Pie-chart）"><a href="#饼图（Pie-chart）" class="headerlink" title="饼图（Pie chart）"></a>饼图（Pie chart）</h2><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>Pie charts are probably the most commonly used chart there are. They are divided into segments, the arc of each segment shows a the proportional value of each piece of data.</p>
<p>They are excellent at showing the relational proportions between data.</p>
<h4 id="使用案例-4"><a href="#使用案例-4" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">Pie</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">value</span>: <span class="number">30</span>,</span><br><span class="line">		<span class="attr">color</span>:<span class="string">&quot;#F38630&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">50</span>,</span><br><span class="line">		color : <span class="string">&quot;#E0E4CC&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">100</span>,</span><br><span class="line">		color : <span class="string">&quot;#69D2E7&quot;</span></span><br><span class="line">	&#125;			</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>For a pie chart, you must pass in an array of objects with a value and a color property. The value attribute should be a number, Chart.js will total all of the numbers and calculate the relative proportion of each. The color attribute should be a string. Similar to CSS, for this string you can use HEX notation, RGB, RGBA or HSL.</p>
<h4 id="图表-2"><a href="#图表-2" class="headerlink" title="图表"></a>图表</h4><p>These are the default options for the Pie chart. Pass in an object with any of these attributes to override them.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Pie</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">	<span class="comment">//Boolean - Whether we should show a stroke on each segment</span></span><br><span class="line">	segmentShowStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of each segment stroke</span></span><br><span class="line">	segmentStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The width of each segment stroke</span></span><br><span class="line">	segmentStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether we should animate the chart	</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Amount of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">100</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutBounce&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether we animate the rotation of the Pie</span></span><br><span class="line">	animateRotate : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether we animate scaling the Pie from the centre</span></span><br><span class="line">	animateScale : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Function - Will fire on animation completion.</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="环形图（Doughnut-chart）"><a href="#环形图（Doughnut-chart）" class="headerlink" title="环形图（Doughnut chart）"></a>环形图（Doughnut chart）</h2><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>Doughnut charts are similar to pie charts, however they have the centre cut out, and are therefore shaped more like a doughnut than a pie!</p>
<p>They are aso excellent at showing the relational proportions between data.</p>
<h4 id="使用案例-5"><a href="#使用案例-5" class="headerlink" title="使用案例"></a>使用案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Chart</span>(ctx).<span class="title class_">Doughnut</span>(data,options);</span><br></pre></td></tr></table></figure>

<h4 id="数据结构-5"><a href="#数据结构-5" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">value</span>: <span class="number">30</span>,</span><br><span class="line">		<span class="attr">color</span>:<span class="string">&quot;#F7464A&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">50</span>,</span><br><span class="line">		color : <span class="string">&quot;#E2EAE9&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">100</span>,</span><br><span class="line">		color : <span class="string">&quot;#D4CCC5&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">40</span>,</span><br><span class="line">		color : <span class="string">&quot;#949FB1&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		value : <span class="number">120</span>,</span><br><span class="line">		color : <span class="string">&quot;#4D5360&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>For a doughnut chart, you must pass in an array of objects with a value and a color property. The value attribute should be a number, Chart.js will total all of the numbers and calculate the relative proportion of each. The color attribute should be a string. Similar to CSS, for this string you can use HEX notation, RGB, RGBA or HSL.</p>
<h4 id="图表-3"><a href="#图表-3" class="headerlink" title="图表"></a>图表</h4><p>These are the default options for the doughnut chart. Pass in an object with any of these attributes to override them.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Doughnut</span>.<span class="property">defaults</span> = &#123;</span><br><span class="line">	<span class="comment">//Boolean - Whether we should show a stroke on each segment</span></span><br><span class="line">	segmentShowStroke : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - The colour of each segment stroke</span></span><br><span class="line">	segmentStrokeColor : <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - The width of each segment stroke</span></span><br><span class="line">	segmentStrokeWidth : <span class="number">2</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//The percentage of the chart that we cut out of the middle.</span></span><br><span class="line">	percentageInnerCutout : <span class="number">50</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether we should animate the chart	</span></span><br><span class="line">	animation : <span class="literal">true</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Number - Amount of animation steps</span></span><br><span class="line">	animationSteps : <span class="number">100</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//String - Animation easing effect</span></span><br><span class="line">	animationEasing : <span class="string">&quot;easeOutBounce&quot;</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Boolean - Whether we animate the rotation of the Doughnut</span></span><br><span class="line">	animateRotate : <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Boolean - Whether we animate scaling the Doughnut from the centre</span></span><br><span class="line">	animateScale : <span class="literal">false</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Function - Will fire on animation completion.</span></span><br><span class="line">	onAnimationComplete : <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="General-issues"><a href="#General-issues" class="headerlink" title="General issues"></a>General issues</h2><h4 id="Chart-interactivity"><a href="#Chart-interactivity" class="headerlink" title="Chart interactivity"></a>Chart interactivity</h4><p>If you are looking to add interaction as a layer to charts, Chart.js is not the library for you. A better option would be using SVG, as this will let you attach event listeners to any of the elements in the chart, as these are all DOM nodes.</p>
<p>Chart.js uses the canvas element, which is a single DOM node, similar in characteristics to a static image. This does mean that it has a wider scope for compatibility, and less memory implications than SVG based charting solutions. The canvas element also allows for saving the contents as a base 64 string, allowing saving the chart as an image.</p>
<p>In SVG, all of the lines, data points and everything you see is a DOM node. As a result of this, complex charts with a lot of intricacies, or many charts on the page will often see dips in performance when scrolling or generating the chart, especially when there are multiple on the page. SVG also has relatively poor mobile support, with Android not supporting SVG at all before version 3.0, and iOS before 5.0. (<span class="exturl" data-url="aHR0cDovL2Nhbml1c2UuY29tL3N2Zy1odG1sNQ==">caniuse.com&#x2F;svg-html5<i class="fa fa-external-link-alt"></i></span>).</p>
<h4 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h4><p>所有现代浏览器和大部分手机浏览器都支持canvas(<span class="exturl" data-url="aHR0cDovL2Nhbml1c2UuY29tL2NhbnZhcw==">caniuse.com&#x2F;canvas<i class="fa fa-external-link-alt"></i></span>)。</p>
<p>对于IE8及以下版本的浏览器，建议使用ExplorerCanvas - 见 <span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9leHBsb3JlcmNhbnZhcy8=">https://code.google.com/p/explorercanvas/<i class="fa fa-external-link-alt"></i></span>。对于不支持canvas的IE会自动降级为VML格式。使用方法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="comment"><!--[if lte IE 8]>
		<script src="excanvas.js"></script>
	<![endif]--></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Usually I would recommend feature detection to choose whether or not to load a polyfill, rather than IE conditional comments, however in this case, VML is a Microsoft proprietary format, so it will only work in IE.</p>
<p>Some important points to note in my experience using ExplorerCanvas as a fallback.</p>
<ul>
<li><p>Initialise charts on load rather than DOMContentReady when using the library, as sometimes a race condition will occur, and it will result in an error when trying to get the 2d context of a canvas.</p>
</li>
<li><p>New VML DOM elements are being created for each animation frame and there is no hardware acceleration. As a result animation is usually slow and jerky, with flashing text. It is a good idea to dynamically turn off animation based on canvas support. I recommend using the excellent <span class="exturl" data-url="aHR0cDovL21vZGVybml6ci5jb20v">Modernizr<i class="fa fa-external-link-alt"></i></span> to do this.</p>
</li>
<li><p>When declaring fonts, the library explorercanvas requires the font name to be in single quotes inside the string. For example, instead of your scaleFontFamily property being simply “Arial”, explorercanvas support, use “‘Arial’” instead. Chart.js does this for default values.</p>
</li>
</ul>
<h4 id="Bugs-issues"><a href="#Bugs-issues" class="headerlink" title="Bugs &amp; issues"></a>Bugs &amp; issues</h4><p>Please report these on the Github page - at <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ubmljay9DaGFydC5qcw==">github.com&#x2F;nnnick&#x2F;Chart.js<i class="fa fa-external-link-alt"></i></span>.</p>
<p>New contributions to the library are welcome.</p>
<h4 id="License"><a href="#License" class="headerlink" title="License"></a>License</h4><p>Chart.js is open source and available under the <span class="exturl" data-url="aHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVA==">MIT license<i class="fa fa-external-link-alt"></i></span>.</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>数据可视化</tag>
        <tag>浏览器兼容性</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Guide</title>
    <url>/2019/06/21/Code-Guide/</url>
    <content><![CDATA[<h1 id="黄金定律"><a href="#黄金定律" class="headerlink" title="黄金定律"></a>黄金定律</h1><p>永远遵循同一套编码规范 – 可以是这里列出的，也可以是你自己总结的。如果你发现本规范中有任何错误，敬请指正。通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21kby9jb2RlLWd1aWRlL2lzc3Vlcy9uZXc=">在 GitHub 上提交 issue<i class="fa fa-external-link-alt"></i></span> 为本规范贡献力量。</p>
<blockquote>
<p>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p>
</blockquote>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>标签不要大写，即便是 doctype 标签。</li>
<li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>嵌套元素应当缩进一次（即两个空格）。</li>
<li>对于属性的定义，永远全部使用双引号，绝不要使用单引号。</li>
<li>不要在自闭合（self-closing）元素的尾部添加斜线 — <span class="exturl" data-url="aHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy1hdXRob3Itdmlldy9zeW50YXguaHRtbCNzeW50YXgtc3RhcnQtdGFn">HTML5 规范<i class="fa fa-external-link-alt"></i></span> 中明确说明斜线是可忽略的。</li>
<li>不要省略可选的结束标签（closing tag）（例如，<code>&lt;/li&gt;</code> 或 <code>&lt;/body&gt;</code>）。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Page title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;img src=&quot;images/company-logo.png&quot; alt=&quot;Company&quot;&gt;</span><br><span class="line">    &lt;h1 class=&quot;hello-world&quot;&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HTML5-doctype"><a href="#HTML5-doctype" class="headerlink" title="HTML5 doctype"></a>HTML5 doctype</h2><p>为每个 HTML 页面的第一行添加 standards mode（标准模式） 声明，这样能够确保在每个浏览器中拥有一致的展现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="语言属性"><a href="#语言属性" class="headerlink" title="语言属性"></a>语言属性</h2><p>根据 HTML5 规范：</p>
<blockquote>
<p>强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。</p>
</blockquote>
<p>更多关于 <code>lang</code> 属性的知识可以从 <span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudA==">此规范<i class="fa fa-external-link-alt"></i></span> 中了解。Sitepoint 站点上 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2l0ZXBvaW50LmNvbS9pc28tMi1sZXR0ZXItbGFuZ3VhZ2UtY29kZXMv">给出了一份语言代码表<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  <!-- ... --></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h2><p>IE 支持通过特定的 <code>&lt;meta&gt;</code> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 <em>edge mode</em>，从而通知 IE 采用其所支持的最新的绘制模式。</p>
<p>了解更多信息请 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjc3MTI1OC93aGF0LWRvZXMtbWV0YS1odHRwLWVxdWl2LXgtdWEtY29tcGF0aWJsZS1jb250ZW50LWllLWVkZ2UtZG8=">阅读这篇 Stack Overflow 上的文章<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="引入-CSS-和-JavaScript-文件"><a href="#引入-CSS-和-JavaScript-文件" class="headerlink" title="引入 CSS 和 JavaScript 文件"></a>引入 CSS 和 JavaScript 文件</h2><p>根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 <code>type</code> 属性，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是它们的默认值。</p>
<h3 id="HTML5-spec-links"><a href="#HTML5-spec-links" class="headerlink" title="HTML5 spec links"></a>HTML5 spec links</h3><ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zZW1hbnRpY3MuaHRtbCN0aGUtbGluay1lbGVtZW50">Using link<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zZW1hbnRpY3MuaHRtbCN0aGUtc3R5bGUtZWxlbWVudA==">Using style<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zY3JpcHRpbmctMS5odG1sI3RoZS1zY3JpcHQtZWxlbWVudA==">Using script<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"><!-- External CSS --></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;code-guide.css&quot;&gt;</span><br><span class="line"></span><br><span class="line"><!-- In-document CSS --></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* ... */</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><!-- JavaScript --></span><br><span class="line">&lt;script src=&quot;code-guide.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="实用为王"><a href="#实用为王" class="headerlink" title="实用为王"></a>实用为王</h2><p>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p>
<h2 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h2><p>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。</p>
<ul>
<li><code>class</code></li>
<li><code>id</code>, <code>name</code></li>
<li><code>data-*</code></li>
<li><code>src</code>, <code>for</code>, <code>type</code>, <code>href</code>, <code>value</code></li>
<li><code>title</code>, <code>alt</code></li>
<li><code>role</code>, <code>aria-*</code></li>
</ul>
<p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a class=&quot;...&quot; id=&quot;...&quot; data-toggle=&quot;modal&quot; href=&quot;#&quot;&gt;</span><br><span class="line">  Example link</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;input class=&quot;form-control&quot; type=&quot;text&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="布尔（boolean）型属性"><a href="#布尔（boolean）型属性" class="headerlink" title="布尔（boolean）型属性"></a>布尔（boolean）型属性</h2><p>布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。</p>
<p>更多信息请参考 <span class="exturl" data-url="aHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbW9uLW1pY3Jvc3ludGF4ZXMuaHRtbCNib29sZWFuLWF0dHJpYnV0ZXM=">WhatWG section on boolean attributes<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。</p>
</blockquote>
<p>如果一定要为其赋值的话，请参考 WhatWG 规范：</p>
<blockquote>
<p>如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要在首尾添加空白符。</p>
</blockquote>
<p><em>简单来说，就是不用赋值。</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; disabled&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;checkbox&quot; value=&quot;1&quot; checked&gt;</span><br><span class="line"></span><br><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option value=&quot;1&quot; selected&gt;1&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="减少标签的数量"><a href="#减少标签的数量" class="headerlink" title="减少标签的数量"></a>减少标签的数量</h2><p>编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。请看下面的案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"><!-- Not so great --></span><br><span class="line">&lt;span class=&quot;avatar&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;...&quot;&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><!-- Better --></span><br><span class="line">&lt;img class=&quot;avatar&quot; src=&quot;...&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-生成的标签"><a href="#JavaScript-生成的标签" class="headerlink" title="JavaScript 生成的标签"></a>JavaScript 生成的标签</h2><p>通过 JavaScript 生成的标签让内容变得不易查找、编辑，并且降低性能。能避免时尽量避免。</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><ul>
<li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>为选择器分组时，将单独的选择器单独放在一行。</li>
<li>为了代码的易读性，在每个声明块的左花括号前添加一个空格。</li>
<li>声明块的右花括号应当单独成行。</li>
<li>每条声明语句的 : 后应该插入一个空格。</li>
<li>为了获得更准确的错误报告，每条声明都应该独占一行。</li>
<li>所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。</li>
<li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，<code>box-shadow</code>）。</li>
<li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，<code>.5</code> 代替 <code>0.5</code>；<code>-.5px</code> 代替 <code>-0.5px</code>）。</li>
<li>十六进制值应该全部小写，例如，<code>#fff</code>。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。</li>
<li>尽量使用简写形式的十六进制值，例如，用 <code>#fff</code> 代替 <code>#ffffff</code>。</li>
<li>为选择器中的属性添加双引号，例如，<code>input[type=&quot;text&quot;]</code>。<span class="exturl" data-url="aHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvdW5xdW90ZWQtYXR0cmlidXRlLXZhbHVlcyNjc3M=">只有在某些情况下是可选的<i class="fa fa-external-link-alt"></i></span>，但是，为了代码的一致性，建议都加上双引号。</li>
<li>避免为 0 值指定单位，例如，用 <code>margin: 0;</code> 代替 <code>margin: 0px;</code>。</li>
</ul>
<p>对于这里用到的术语有疑问吗？请参考 Wikipedia 上的 <span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYXNjYWRpbmdfU3R5bGVfU2hlZXRzI1N5bnRheA==">syntax section of the Cascading Style Sheets article<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h2><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p>
<ol>
<li>Positioning</li>
<li>Box model</li>
<li>Typographic</li>
<li>Visual</li>
<li>Misc</li>
</ol>
<p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。</p>
<p>其他属性只是影响组件的 内部 或者是不影响前两组属性，因此排在后面。</p>
<p>完整的属性列表及其排列顺序请参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3YnMvc3R5bGVsaW50LWNvbmZpZy10d2JzLWJvb3RzdHJhcC9ibG9iL21hc3Rlci9jc3MvaW5kZXguanM=">Bootstrap property order for Stylelint<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Misc */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用 @import"></a>不要使用 <code>@import</code></h2><p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p>
<ul>
<li>使用多个 <code>&lt;link&gt;</code> 元素</li>
<li>通过 <code>Sass</code> 或 <code>Less</code> 之类的 CSS 预处理器将多个 CSS 文件编译为一个文件</li>
<li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li>
</ul>
<p>请参考 <span class="exturl" data-url="aHR0cDovL3d3dy5zdGV2ZXNvdWRlcnMuY29tL2Jsb2cvMjAwOS8wNC8wOS9kb250LXVzZS1pbXBvcnQv">Steve Souders 的文章<i class="fa fa-external-link-alt"></i></span>了解更多知识。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"><!-- Use link elements --></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;core.css&quot;&gt;</span><br><span class="line"></span><br><span class="line"><!-- Avoid @imports --></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  @import url(&quot;more.css&quot;);</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="媒体查询（Media-query）的位置"><a href="#媒体查询（Media-query）的位置" class="headerlink" title="媒体查询（Media query）的位置"></a>媒体查询（Media query）的位置</h2><p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。下面给出一个典型的实例。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123; ...&#125;</span><br><span class="line">  <span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="带前缀的属性"><a href="#带前缀的属性" class="headerlink" title="带前缀的属性"></a>带前缀的属性</h2><p>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</p>
<p>在 Textmate 中，使用 <em>Text</em> → <em>Edit Each Line in Selection</em> (⌃⌘A)。在 Sublime Text 2 中，使用 <em>Selection</em> → <em>Add Previous Line</em> (⌃⇧↑) 和 <em>Selection</em> → <em>Add Next Line</em> (⌃⇧↓)。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Prefixed properties */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单行规则声明"><a href="#单行规则声明" class="headerlink" title="单行规则声明"></a>单行规则声明</h2><p>对于<em>只包含一条声明</em>的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p>
<p>这样做的关键因素是为了错误检测 – 例如，CSS 校验器指出在 183 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Single declarations on one line */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple declarations, one per line */</span></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/sprite.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="简写形式的属性声明"><a href="#简写形式的属性声明" class="headerlink" title="简写形式的属性声明"></a>简写形式的属性声明</h2><p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常被滥用的简写属性如下：</p>
<ul>
<li>padding</li>
<li>margin</li>
<li>font</li>
<li>background</li>
<li>border</li>
<li>border-radius</li>
</ul>
<p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的标题元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以了。<code>0</code> 值表示对浏览器默认值或以前指定的值的覆盖。</p>
<p>过多地使用属性的简写形式会导致代码出现不必要的覆盖和意外的副作用。</p>
<p>在 MDN（Mozilla Developer Network）上一篇非常好的关于 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL1Nob3J0aGFuZF9wcm9wZXJ0aWVz">shorthand properties<i class="fa fa-external-link-alt"></i></span> 的文章，对于不太熟悉简写属性声明及其行为的用户很有用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less-和-Sass-中的嵌套"><a href="#Less-和-Sass-中的嵌套" class="headerlink" title="Less 和 Sass 中的嵌套"></a>Less 和 Sass 中的嵌套</h2><p>避免不必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套。</p>
<p>扩展阅读：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21hcmtkb3R0by5jb20vMjAxNS8wNy8yMC9jc3MtbmVzdGluZy8=">Nesting in Sass and Less<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Without nesting</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line">// With nesting</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &#123;</span><br><span class="line">  &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line">  &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Less-和-Sass-中的操作符"><a href="#Less-和-Sass-中的操作符" class="headerlink" title="Less 和 Sass 中的操作符"></a>Less 和 Sass 中的操作符</h2><p>为了提高可读性，在圆括号中的数学计算表达式的数值、变量和操作符之间均添加一个空格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Bad example</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> @variable*<span class="number">2</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Good example</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> (@variable * <span class="number">2</span>) <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。</p>
<p>对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="comment">/* Modal header */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="comment">/* Wrapping element for .modal-title and .modal-close */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="class-命名"><a href="#class-命名" class="headerlink" title="class 命名"></a>class 命名</h2><ul>
<li>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，<code>.btn</code> 和 <code>.btn-danger</code>）。</li>
<li>避免过度任意的简写。<code>.btn</code> 代表 button，但是 <code>.s</code> 不能表达任何意思。</li>
<li>class 名称应当尽可能短，并且意义明确。</li>
<li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<p>在为 Sass 和 Less 变量命名时也可以参考上面列出的各项规范。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.t</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.tweet</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.important</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul>
<li>对于通用元素使用 class ，这样利于渲染性能的优化。</li>
<li>对于经常出现的组件，避免使用属性选择器（例如，<code>[class^=&quot;...&quot;]</code>）。浏览器的性能会受到这些因素的影响。</li>
<li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 。</li>
<li><em>只有</em>在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）（例如，不使用带前缀的 class 时 – 前缀类似于命名空间）。</li>
</ul>
<p>扩展阅读：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21hcmtkb3R0by5jb20vMjAxMi8wMi8xNi9zY29wZS1jc3MtY2xhc3Nlcy13aXRoLXByZWZpeGVzLw==">Scope CSS classes with prefixes<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL21hcmtkb3R0by5jb20vMjAxMi8wMy8wMi9zdG9wLXRoZS1jYXNjYWRlLw==">Stop the cascade<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-tag">span</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.page-container</span> <span class="selector-id">#stream</span> <span class="selector-class">.stream-item</span> <span class="selector-class">.tweet</span> <span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet</span> <span class="selector-class">.avatar</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><ul>
<li>以组件为单位组织代码段。</li>
<li>制定一致的注释规范。</li>
<li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。</li>
<li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Component section heading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Component section heading</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Sometimes you need to include optional context for the entire component. Do that up here if it&#x27;s important enough.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Contextual sub-component or modifer */</span></span><br><span class="line"><span class="selector-class">.element-heading</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h2><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p>
<ul>
<li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li>
<li>保存文件时，删除尾部的空白符。</li>
<li>设置文件编码为 UTF-8。</li>
<li>在文件结尾添加一个空白行。</li>
</ul>
<p>参照文档并将这些配置信息添加到项目的 <code>.editorconfig</code> 文件中。例如：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyLy5lZGl0b3Jjb25maWc=">Bootstrap 中的 .editorconfig 实例<i class="fa fa-external-link-alt"></i></span>。更多信息请参考 <span class="exturl" data-url="aHR0cDovL2VkaXRvcmNvbmZpZy5vcmcv">about EditorConfig<i class="fa fa-external-link-alt"></i></span>。</p>
<p>Made with all the love in the world by <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9tZG8=">@mdo<i class="fa fa-external-link-alt"></i></span>.</p>
<p>Open sourced under MIT. Copyright 2019 <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9tZG8=">@mdo<i class="fa fa-external-link-alt"></i></span>.</p>
<p>最后更新时间：2019-06-04</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9tZG8=">Follow @mdo<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9zaGFyZQ==">Tweet<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>前端</tag>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 国内镜像源配置指南</title>
    <url>/2024/11/30/Docker-%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>随着 Docker 的广泛应用，越来越多的开发者和企业开始使用 Docker 来构建和部署应用。然而，由于网络原因，直接从 Docker Hub 拉取镜像可能会遇到速度慢或者不稳定的问题。为了解决这一问题，本文将介绍如何配置国内镜像源，以加速 Docker 镜像的拉取速度。</p>
</blockquote>
<h2 id="为什么需要配置国内镜像源？"><a href="#为什么需要配置国内镜像源？" class="headerlink" title="为什么需要配置国内镜像源？"></a>为什么需要配置国内镜像源？</h2><p>直接从 Docker Hub 拉取镜像可能会受到网络限制的影响，导致速度慢或者失败。配置国内镜像源可以有效地解决这一问题，提高镜像拉取的速度和稳定性。</p>
<h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><p>以下是配置国内 Docker 镜像源的具体步骤：</p>
<h3 id="1-创建或修改-Docker-配置文件"><a href="#1-创建或修改-Docker-配置文件" class="headerlink" title="1. 创建或修改 Docker 配置文件"></a>1. 创建或修改 Docker 配置文件</h3><p>在 Linux 系统中，你需要修改或创建 <code>/etc/docker/daemon.json</code> 文件。如果文件不存在，你可以使用以下命令创建它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://docker.1ms.run&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://doublezonline.cloud&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://dislabaiot.xyz&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.fxxk.dedyn.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://dockerpull.org&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.unsee.tech&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://hub.rat.dev&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.1panel.live&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.nastool.de&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.zhai.cm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.5z5f.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://a.ussh.net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.udayun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://hub.geekery.cn&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="2-重启-Docker-服务"><a href="#2-重启-Docker-服务" class="headerlink" title="2. 重启 Docker 服务"></a>2. 重启 Docker 服务</h3><p>修改配置文件后，需要重启 Docker 服务以使配置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="3-验证配置是否成功"><a href="#3-验证配置是否成功" class="headerlink" title="3. 验证配置是否成功"></a>3. 验证配置是否成功</h4><p>使用以下命令检查 Docker 信息，确认镜像源是否已经更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p>以上步骤可以帮助你配置国内镜像源，以加速 Docker 镜像的拉取速度。请根据实际情况选择可用的镜像源进行配置。这些镜像源均来自最新的搜索结果，确保了时效性。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>镜像加速</tag>
        <tag>国内镜像源</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Dark Reader</title>
    <url>/2022/02/08/Dark-Reader/</url>
    <content><![CDATA[<h2 id="顶部选项"><a href="#顶部选项" class="headerlink" title="顶部选项"></a>顶部选项</h2><p><img src="/images/pasted-0.png" alt="Top section"></p>
<ul>
<li>“<strong>切换网站</strong>”可将目前网站加入忽略列表（或从忽略列表中移除）。</li>
<li>“<strong>开启／关闭</strong>”可启用或停用扩展。</li>
<li>点选按键下方的链接以<strong>修改快捷键</strong>。</li>
<li>若切换按键为灰色，则表示浏览器限制脚本注入当前网页。</li>
</ul>
<h2 id="滤镜设置"><a href="#滤镜设置" class="headerlink" title="滤镜设置"></a>滤镜设置</h2><p><img src="/images/pasted-1.png" alt="Filter settings"></p>
<p>可调整各项滤镜数值，以适应您的屏幕参数和室内环境亮度。</p>
<h2 id="个别网站设置"><a href="#个别网站设置" class="headerlink" title="个别网站设置"></a>个别网站设置</h2><p><img src="/images/pasted-2.png" alt="Custom settings"></p>
<p>点击“<strong>仅适用于</strong>”按键将设置值设为仅应用于当前网站。</p>
<p>要使用该功能，请先单击按钮（该按钮将突出显示），然后根据当前网站的需要调整设置。 再次单击按钮以取消。</p>
<h2 id="网站列表"><a href="#网站列表" class="headerlink" title="网站列表"></a>网站列表</h2><p><img src="/images/pasted-3.png" alt="Site list"></p>
<ul>
<li>使用“<strong>反色列表</strong>”让 Dark Reader 仅对列表中的网站生效。</li>
<li>使用“<strong>不反色列表</strong>”避免扩展应用于列表中的网站。</li>
<li>可填入 <code>google.com</code>、<code>mail.google.com</code>、<code>google.*</code>、<code>google.com/maps</code> 等等。</li>
<li>点击“<strong>切换</strong>”按键将网站加入相应列表。</li>
</ul>
<h2 id="更多选项"><a href="#更多选项" class="headerlink" title="更多选项"></a>更多选项</h2><p><img src="/images/pasted-4.png" alt="More tab"></p>
<ul>
<li>从列表<strong>选择字体</strong>（或在 Firefox 输入字体名称），勾选方框。</li>
<li>调整<strong>文字描边</strong>。</li>
<li>选择<strong>主题生成模式</strong>。</li>
</ul>
<h2 id="主题生成模式"><a href="#主题生成模式" class="headerlink" title="主题生成模式"></a>主题生成模式</h2><p><img src="/images/pasted-5.png" alt="Filter+ vs. Static vs. Dynamic mode"></p>
<p>过滤+、静态、动态模式比较</p>
<ul>
<li>“<strong>过滤</strong>”是 Dark Reader 最一开始的模式，基于 CSS 滤镜。 网页色彩会<strong>全部反转</strong>，再<strong>回复部分</strong>的颜色。 必须用到 GPU 的资源。 虽然渲染<strong>快速</strong>且有效，但有几个问题： 停用文字的子像素渲染（sub-pixel rendering）、 将已经是暗色的部分转成亮色、 大型页面会发生延迟、 Firefox 会无法渲染某些网页。</li>
<li>“<strong>过滤+</strong>”效果和“过滤”一样，但是基于 SVG 滤镜，</li>
</ul>
<p><strong>色彩处理得更好</strong>，让图片不那么呆板。 在 Firefox 上效果不佳。</p>
<ul>
<li>“<strong>静态</strong>”会迅速生成基本样式表。</li>
<li>“<strong>动态</strong>”会深入分析网站的样式表、背景图片、向量图形。 在网页载入时会占用一些资源， 但能产生<strong>最好</strong>的视觉效果。 虽然动态模式还在开发中， 但已能顺利应用于许多现代化的网站。</li>
</ul>
<h2 id="底部选项"><a href="#底部选项" class="headerlink" title="底部选项"></a>底部选项</h2><p><img src="/images/pasted-6.png" alt="Bottom section"></p>
<ul>
<li>阅读我们的<strong>隐私政策</strong>，关注我们的 <strong>Twitter</strong>。</li>
<li>“<strong>捐赠</strong>”──若您喜欢这个扩展，请考虑支持活跃的 Dark Reader 开发团队。 群众募资由 Open Collective 主导，目前以 Stripe 处理帐款。</li>
<li>“<strong>新闻</strong>”──版本资讯和重要活动的通知。</li>
<li>“<strong>开发者工具</strong>”──对当前主题开启设置编辑器。</li>
</ul>
<h2 id="使用开发者工具"><a href="#使用开发者工具" class="headerlink" title="使用开发者工具"></a>使用开发者工具</h2><p>若您熟悉 CSS 选择器，欢迎对某些网站提供修正建议。 请阅读开发者工具的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhcmtyZWFkZXIvZGFya3JlYWRlciNob3ctdG8tY29udHJpYnV0ZQ==">使用说明<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="为何扩展要求读取网站数据的权限"><a href="#为何扩展要求读取网站数据的权限" class="headerlink" title="为何扩展要求读取网站数据的权限"></a>为何扩展要求读取网站数据的权限</h4><p>扩展需要这些权限才能分析和修改网站的外观， 并判断是否要根据您的设置来停用或应用特殊规则。 我们不会插入广告，也不会搜集任何数据，或将数据送到任何地方。 该扩展是完全开源的，没有混淆的代码。 我们的获利是透明的——来自用户捐助。</p>
<h4 id="网上应用店和设置的页面怎么还是白的"><a href="#网上应用店和设置的页面怎么还是白的" class="headerlink" title="网上应用店和设置的页面怎么还是白的"></a>网上应用店和设置的页面怎么还是白的</h4><p>本扩展对这些页面没有权限。</p>
<h4 id="新标签页和浏览器主题怎么还是白的"><a href="#新标签页和浏览器主题怎么还是白的" class="headerlink" title="新标签页和浏览器主题怎么还是白的"></a>新标签页和浏览器主题怎么还是白的</h4><p>本扩展无法改变新标签页或浏览器外观（但 Firefox 60 以后可以）。 请从网上应用店下载其他暗色主题或新标签页扩展。</p>
<h4 id="开启新标签页或浏览网站时屏幕会闪白光"><a href="#开启新标签页或浏览网站时屏幕会闪白光" class="headerlink" title="开启新标签页或浏览网站时屏幕会闪白光"></a>开启新标签页或浏览网站时屏幕会闪白光</h4><p>当载入网页时，Chrome 预设会呈现浏览器主题的背景色， 所以您应该从网上应用店安装暗色主题。</p>
<h4 id="扩展完全无效"><a href="#扩展完全无效" class="headerlink" title="扩展完全无效"></a>扩展完全无效</h4><p>如果您有安装其他类似的扩展，请先停用它们，再重新载入标签页。 点击 Dark Reader 图标，检查右上角按键是否已<strong>开启</strong>。 打开“<strong>网站列表</strong>”，确认已选取“<strong>不反色列表</strong>”。 若依然无效，则存在问题，请发 Email 给我们。</p>
<h4 id="网站呈现错误或运行缓慢"><a href="#网站呈现错误或运行缓慢" class="headerlink" title="网站呈现错误或运行缓慢"></a>网站呈现错误或运行缓慢</h4><p>请发 Email 告诉我们该网站网址、网页截图、您的操作系统和浏览器版本。 起码对知名网站，我们会试着调查原因。 也请试试看更改“<strong>主题生成模式</strong>”或使用“<strong>明亮模式</strong>”。 检查该网站是否不在“<strong>网站列表</strong>”选项下。</p>
<h4 id="扩展在无痕模式下无效"><a href="#扩展在无痕模式下无效" class="headerlink" title="扩展在无痕模式下无效"></a>扩展在无痕模式下无效</h4><p>开启“<strong>chrome:&#x2F;&#x2F;extensions</strong>”页面，找到“<strong>Dark Reader</strong>”，点击“<strong>在无痕模式下启用</strong>”。</p>
<h4 id="扩展对本地文件无效"><a href="#扩展对本地文件无效" class="headerlink" title="扩展对本地文件无效"></a>扩展对本地文件无效</h4><p>开启“<strong>chrome:&#x2F;&#x2F;extensions</strong>”页面，找到“<strong>Dark Reader</strong>”，点击“<strong>允许访问文件网址</strong>”。</p>
<h4 id="在“过滤”模式下整个网站没有画面"><a href="#在“过滤”模式下整个网站没有画面" class="headerlink" title="在“过滤”模式下整个网站没有画面"></a>在“过滤”模式下整个网站没有画面</h4><p>若您是在 Mac OS 上使用 Chrome，请将 Mac OS 更新至 10.13，此举应该会更新显示驱动程序。 若您使用 Firefox，则很有可能是浏览器漏洞，请改用其他模式。</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>浏览器插件或扩展开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5滚屏特效</title>
    <url>/2017/05/22/HTML5%E6%BB%9A%E5%B1%8F%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;<span class="attribute">margin</span>: <span class="number">0px</span>; <span class="attribute">padding</span>: <span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-wrap</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">overflow</span>: visible;<span class="attribute">transition</span>:transform <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.86</span>,<span class="number">0</span>,<span class="number">0.03</span>,<span class="number">1</span>);-webkit-<span class="attribute">transition</span>:-webkit-transform <span class="number">1s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.86</span>,<span class="number">0</span>,<span class="number">0.03</span>,<span class="number">1</span>);&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-wrap</span> <span class="selector-class">.section</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-1</span>&#123;<span class="attribute">background</span>: <span class="number">#0f0</span>&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-2</span>&#123;<span class="attribute">background</span>: <span class="number">#FF0</span>&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.put-section-1</span>&#123; <span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">0</span>);&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.put-section-2</span>&#123; <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">100%</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">100%</span>);&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-btn</span>&#123; <span class="attribute">width</span>:<span class="number">14px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">4%</span>;<span class="attribute">top</span>:<span class="number">50%</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-btn</span> <span class="selector-tag">li</span>&#123; <span class="attribute">width</span>:<span class="number">14px</span>;<span class="attribute">height</span>:<span class="number">14px</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">text-indent</span>:-<span class="number">9999px</span>;<span class="attribute">border-radius</span>:<span class="number">50%</span>;-webkit-<span class="attribute">border-radius</span>:<span class="number">50%</span>;<span class="attribute">margin-bottom</span>:<span class="number">12px</span>; <span class="attribute">background</span>:<span class="number">#BD362F</span>;<span class="attribute">text-align</span>:center; <span class="attribute">color</span>:<span class="number">#fff</span>; onsor:pointer;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.section-btn</span> <span class="selector-tag">li</span><span class="selector-class">.on</span>&#123; <span class="attribute">background</span>:<span class="number">#fff</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&#x27;section-wrap put-section-1&#x27;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section section-1&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section section-2&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;tit&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;section-btn&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;jiaoben3135/js/jquery.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> i=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> $btn = $(<span class="string">&#x27;.section-btn li&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">		$wrap = $(<span class="string">&#x27;.section-wrap&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">		$arrow = $(<span class="string">&#x27;.arrow&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">/*当前页面赋值*/</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">up</span>(<span class="params"></span>)&#123;i++;<span class="keyword">if</span>(i&gt;$btn.<span class="property">length</span>)&#123;i=<span class="number">1</span>&#125;;&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">down</span>(<span class="params"></span>)&#123;i--;<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;i=$btn.<span class="property">length</span>&#125;;&#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// /*页面滑动*/</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		$btn.<span class="title function_">eq</span>(i-<span class="number">1</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;on&#x27;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;on&#x27;</span>);	</span></span><br><span class="line"><span class="language-javascript">		$wrap.<span class="title function_">attr</span>(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;section-wrap&quot;</span>).<span class="title function_">addClass</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;put-section-&quot;</span>+i; &#125;).<span class="title function_">find</span>(<span class="string">&#x27;.section&#x27;</span>).<span class="title function_">eq</span>(i).<span class="title function_">find</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// /*右侧按钮点击*/</span></span></span><br><span class="line"><span class="language-javascript">	$btn.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">		$(<span class="variable language_">this</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			i=index+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">run</span>();</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// /*翻页按钮点击*/</span></span></span><br><span class="line"><span class="language-javascript">	$arrow.<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>,go);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">go</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">up</span>();<span class="title function_">run</span>();	</span></span><br><span class="line"><span class="language-javascript">		<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;$arrow.<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>,go)&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// /*响应鼠标*/</span></span></span><br><span class="line"><span class="language-javascript">	$wrap.<span class="title function_">one</span>(<span class="string">&#x27;mousewheel&#x27;</span>,mouse_);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">mouse_</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span>(event.<span class="property">deltaY</span>&lt;<span class="number">0</span>) &#123;<span class="title function_">up</span>()&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">else</span>&#123;<span class="title function_">down</span>()&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="title function_">run</span>();</span></span><br><span class="line"><span class="language-javascript">		<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;$wrap.<span class="title function_">one</span>(<span class="string">&#x27;mousewheel&#x27;</span>,mouse_)&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">	&#125;;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// /*响应键盘上下键*/</span></span></span><br><span class="line"><span class="language-javascript">	$(<span class="variable language_">document</span>).<span class="title function_">one</span>(<span class="string">&#x27;keydown&#x27;</span>,k);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">function</span> <span class="title function_">k</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> e=event||<span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> key=e.<span class="property">keyCode</span>||e.<span class="property">which</span>||e.<span class="property">charCode</span>;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">switch</span>(key)	&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">case</span> <span class="number">38</span>: <span class="title function_">down</span>();<span class="title function_">run</span>();	</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">case</span> <span class="number">40</span>: <span class="title function_">up</span>();<span class="title function_">run</span>();	</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">		&#125;;</span></span><br><span class="line"><span class="language-javascript">		<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;$(<span class="variable language_">document</span>).<span class="title function_">one</span>(<span class="string">&#x27;keydown&#x27;</span>,k)&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>JavaScript</tag>
        <tag>HTML5</tag>
        <tag>用户体验设计</tag>
        <tag>网页滚动特效</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo增加搜索功能</title>
    <url>/2023/02/05/Hexo%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>随着时间的推移，个人站点的博客文章会越来越多，那怎么样才能快速找到你印象中的文章呢？增加一个站点内的搜索功能是非常有必要和方便的。<br>具体操作</p>
<ol>
<li>安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>全局配置文件_config.yml，新增如下内容：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>hexo主题配置文件（\themes\next_config.yml），修改local_search的enable为true：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>搜索功能</tag>
        <tag>网站优化</tag>
        <tag>本地搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 5 Desktop Notification</title>
    <url>/2019/11/11/HTML-5-Desktop-Notification/</url>
    <content><![CDATA[<h1 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h1><ul>
<li>IE 9+</li>
<li>Edge</li>
<li>Firefox 22+</li>
<li>Google Chrome 32+</li>
</ul>
<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul>
<li><p>[IE 9][IE 10] Does not support Promise. Polyfill required.</p>
</li>
<li><p>[MS Edge] Notifications supported for the latest version of Edge that comes with Windows 10 Anniversary Update</p>
</li>
<li><p>[Safari] Icon is not displayed - it uses the application icon instance of provided one</p>
</li>
<li><p>Have to type of icons - one image format that will be displayed for Chrome&#x2F;Safari&#x2F;Firefox and one in .ico format, 16x16 for IE<br>  The library automatically will parse the icon name and will add .ico extension if it is not .ico</p>
<p>  The icon resource file must contain a 16x16 icon at 96 dots per inch (dpi). If an icon overlay is already applied, the existing overlay is replaced.<br>  Note  To view the icon overlay, the taskbar buttons must be in their default large icon mode. Small taskbar icons do not support icon overlays.</p>
</li>
<li><p>The Notification constructor(window.Notification) is replaced with custom one in order to polyill the missing properties&#x2F;methods. Each instance created with <code>new Notification(&#39;title&#39;)</code> returns the original Notification object(for Chrome&#x2F;Opera&#x2F;Firefox&#x2F;Safari&#x2F;Edge) and custom Notification object for not supported browsers:</p>
</li>
</ul>
<code>
var n = new Notification('title');
n instanceOf Notification; // false for Chrome/Safari/Opera/Edge/Firefox as created notification is instance of the browsers' native Notification object, but window.Notification is a polyfill class.
</code>

<h1 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h1><p>Notification API defines 3 permission levels for supported environments:</p>
<ul>
<li><strong>default</strong> - This is equivalent to “denied”, but the user has made no explicit choice thus far.</li>
<li><strong>granted</strong> - This means notifications can be displayed.</li>
<li><strong>denied</strong> - This means the user does not want notifications.</li>
</ul>
<p>To support environments that do not implement Notification API,<br>this code implements an additional permission level:</p>
<ul>
<li><strong>notsupported</strong> - Notification API is not supported in any format(WHATWG spec or prefixed). Notification could not be displayed. Any Notification API code execution will pass, but no notification will be displayed.</li>
</ul>
<p>Usage:<br>Use the Standard API for working with this notification library:</p>
<ul>
<li>Notification.permission - to get the permissions for page</li>
<li>Notification.requestPermission() - request permission for displaying Notifications. NOTE: Returns a Promise. For IE9 &amp; IE10 Promise polyfill required - it is not included within this library.</li>
<li>new Notification(‘title’, options) - create new Notification.<br>  More details: <ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub3RpZmljYXRpb25zLnNwZWMud2hhdHdnLm9yZy8=">https://notifications.spec.whatwg.org/<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL25vdGlmaWNhdGlvbg==">https://developer.mozilla.org/en-US/docs/Web/API/notification<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul>
<li><input disabled="" type="checkbox"> Home page - documentation &amp; demo</li>
<li><input checked="" disabled="" type="checkbox"> [IE] Add support for event listeners</li>
<li><input disabled="" type="checkbox"> [IE] Implement actions as a thumbBar buttons</li>
<li><input disabled="" type="checkbox"> Add Support for Service Workers</li>
</ul>
]]></content>
      <tags>
        <tag>HTML5</tag>
        <tag>Browser Compatibility</tag>
        <tag>Notification API</tag>
        <tag>Progressive Enhancement</tag>
        <tag>Modern Web Development</tag>
      </tags>
  </entry>
  <entry>
    <title>Highlight.js</title>
    <url>/2017/05/27/Highlight.js/</url>
    <content><![CDATA[<h1 id="Highlight-js"><a href="#Highlight-js" class="headerlink" title="Highlight.js"></a>Highlight.js</h1><p><a href="https://travis-ci.org/isagalaev/highlight.js"><img src="https://travis-ci.org/isagalaev/highlight.js.svg?branch=master" alt="Build Status"></a></p>
<p>Highlight.js is a syntax highlighter written in JavaScript. It works in<br>the browser as well as on the server. It works with pretty much any<br>markup, doesn’t depend on any framework and has automatic language<br>detection.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>The bare minimum for using highlight.js on a web page is linking to the<br>library along with one of the styles and calling<br><a href="http://highlightjs.readthedocs.io/en/latest/api.html#inithighlightingonload"><code>initHighlightingOnLoad</code></a>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/styles/default.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/path/to/highlight.pack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>hljs.initHighlightingOnLoad();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This will find and highlight code inside of <code>&lt;pre&gt;&lt;code&gt;</code> tags; it tries<br>to detect the language automatically. If automatic detection doesn’t<br>work for you, you can specify the language in the <code>class</code> attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;html&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The list of supported language classes is available in the <a href="http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html">class<br>reference</a>.  Classes can also be prefixed with either <code>language-</code> or<br><code>lang-</code>.</p>
<p>To disable highlighting altogether use the <code>nohighlight</code> class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;nohighlight&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Custom-Initialization"><a href="#Custom-Initialization" class="headerlink" title="Custom Initialization"></a>Custom Initialization</h2><p>When you need a bit more control over the initialization of<br>highlight.js, you can use the <a href="http://highlightjs.readthedocs.io/en/latest/api.html#highlightblock-block"><code>highlightBlock</code></a> and <a href="http://highlightjs.readthedocs.io/en/latest/api.html#configure-options"><code>configure</code></a><br>functions. This allows you to control <em>what</em> to highlight and <em>when</em>.</p>
<p>Here’s an equivalent way to calling <a href="http://highlightjs.readthedocs.io/en/latest/api.html#inithighlightingonload"><code>initHighlightingOnLoad</code></a> using<br>jQuery:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;pre code&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, block</span>) &#123;</span><br><span class="line">    hljs.<span class="title function_">highlightBlock</span>(block);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>You can use any tags instead of <code>&lt;pre&gt;&lt;code&gt;</code> to mark up your code. If<br>you don’t use a container that preserve line breaks you will need to<br>configure highlight.js to use the <code>&lt;br&gt;</code> tag:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hljs.<span class="title function_">configure</span>(&#123;<span class="attr">useBR</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;div.code&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, block</span>) &#123;</span><br><span class="line">  hljs.<span class="title function_">highlightBlock</span>(block);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>For other options refer to the documentation for <a href="http://highlightjs.readthedocs.io/en/latest/api.html#configure-options"><code>configure</code></a>.</p>
<h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>You can run highlighting inside a web worker to avoid freezing the browser<br>window while dealing with very big chunks of code.</p>
<p>In your main script:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#code&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line">  worker.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; code.<span class="property">innerHTML</span> = event.<span class="property">data</span>; &#125;</span><br><span class="line">  worker.<span class="title function_">postMessage</span>(code.<span class="property">textContent</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>In worker.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onmessage = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="title function_">importScripts</span>(<span class="string">&#x27;&lt;path&gt;/highlight.pack.js&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = self.<span class="property">hljs</span>.<span class="title function_">highlightAuto</span>(event.<span class="property">data</span>);</span><br><span class="line">  <span class="title function_">postMessage</span>(result.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Getting-the-Library"><a href="#Getting-the-Library" class="headerlink" title="Getting the Library"></a>Getting the Library</h2><p>You can get highlight.js as a hosted, or custom-build, browser script or<br>as a server module. Right out of the box the browser script supports<br>both AMD and CommonJS, so if you wish you can use RequireJS or<br>Browserify without having to build from source. The server module also<br>works perfectly fine with Browserify, but there is the option to use a<br>build specific to browsers rather than something meant for a server.<br>Head over to the <span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvZG93bmxvYWQv">download page<i class="fa fa-external-link-alt"></i></span> for all the options.</p>
<p><strong>Don’t link to GitHub directly.</strong> The library is not supposed to work straight<br>from the source, it requires building. If none of the pre-packaged options<br>work for you refer to the <span class="exturl" data-url="aHR0cDovL2hpZ2hsaWdodGpzLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9idWlsZGluZy10ZXN0aW5nLmh0bWw=">building documentation<i class="fa fa-external-link-alt"></i></span>.</p>
<p><strong>The CDN-hosted package doesn’t have all the languages.</strong> Otherwise it’d be<br>too big. If you don’t see the language you need in the <span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvZG93bmxvYWQv">“Common” section<i class="fa fa-external-link-alt"></i></span>,<br>it can be added manually:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>On Almond.</strong> You need to use the optimizer to give the module a name. For<br>example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js</span><br></pre></td></tr></table></figure>


<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Highlight.js is released under the BSD License. See <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzYWdhbGFldi9oaWdobGlnaHQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRQ==">LICENSE<i class="fa fa-external-link-alt"></i></span> file<br>for details.</p>
<h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>The official site for the library is at <span class="exturl" data-url="aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcv">https://highlightjs.org/<i class="fa fa-external-link-alt"></i></span>.</p>
<p>Further in-depth documentation for the API and other topics is at<br><span class="exturl" data-url="aHR0cDovL2hpZ2hsaWdodGpzLnJlYWR0aGVkb2NzLmlvLw==">http://highlightjs.readthedocs.io/<i class="fa fa-external-link-alt"></i></span>.</p>
<p>Authors and contributors are listed in the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzYWdhbGFldi9oaWdobGlnaHQuanMvYmxvYi9tYXN0ZXIvQVVUSE9SUy5lbi50eHQ=">AUTHORS.en.txt<i class="fa fa-external-link-alt"></i></span> file.</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>Highlight.js</tag>
        <tag>代码高亮</tag>
      </tags>
  </entry>
  <entry>
    <title>Hotkeys - 捕获键盘输入和输入的组合键</title>
    <url>/2019/12/03/Hotkeys-%E6%8D%95%E8%8E%B7%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%85%A5%E7%9A%84%E7%BB%84%E5%90%88%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>这是一个强健的 Javascript 库用于捕获键盘输入和输入的组合键，它没有依赖，压缩只有(~3kb)，gzip:1.9k。<span class="exturl" data-url="aHR0cDovL2pheXdjamxvdmUuZ2l0aHViLmlvL2hvdGtleXMvP2xhbmc9Y24=">官方文档DEMO预览<i class="fa fa-external-link-alt"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pheXdjamxvdmUvaG90a2V5cy9pc3N1ZXM/cT1sYWJlbDpEZW1vKw==">更多实例<i class="fa fa-external-link-alt"></i></span>.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">╭┈┈╮          ╭┈┈╮  ╭┈┈╮</span><br><span class="line">┆  ├┈┈..┈┈┈┈┈.┆  └┈╮┆  ├┈┈..┈┈┈┈┈..┈┈.┈┈..┈┈┈┈┈.</span><br><span class="line">┆     ┆┆  □  ┆┆   ┈┤┆    &lt; ┆  -__┘┆  ┆  ┆┆__ ┈┈┤</span><br><span class="line">╰┈┈┴┈┈╯╰┈┈┈┈┈╯╰┈┈┈┈╯╰┈┈┴┈┈╯╰┈┈┈┈┈╯╰┈┈┈  ┆╰┈┈┈┈┈╯</span><br><span class="line">                                  ╰┈┈┈┈┈╯</span><br></pre></td></tr></table></figure>

<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>您将需要在您的系统上安装的 Node.js。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bower 安装</span></span><br><span class="line">$ bower install hotkeysjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm 安装</span></span><br><span class="line">$ npm install hotkeys-js</span><br><span class="line"></span><br><span class="line">$ npm run build <span class="comment"># 编译</span></span><br><span class="line">$ npm run watch <span class="comment"># 开发模式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hotkeys <span class="keyword">from</span> <span class="string">&#x27;hotkeys-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;f5&#x27;</span>, <span class="keyword">function</span>(<span class="params">event, handler</span>)&#123;</span><br><span class="line">  <span class="comment">// Prevent the default refresh event under WINDOWS system</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>() </span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;you pressed F5!&#x27;</span>) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>或者在您的HTML中手动下载并引入 <strong>hotkeys.js</strong>，你也可以通过 <span class="exturl" data-url="aHR0cHM6Ly91bnBrZy5jb20vaG90a2V5cy1qcy9kaXN0Lw==">UNPKG<i class="fa fa-external-link-alt"></i></span> 进行下载：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/hotkeys-js/dist/hotkeys.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+a,ctrl+b,r,f&#x27;</span>, <span class="keyword">function</span>(<span class="params">event,handler</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">switch</span>(handler.<span class="property">key</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">case</span> <span class="string">&quot;ctrl+a&quot;</span>:<span class="title function_">alert</span>(<span class="string">&#x27;you pressed ctrl+a!&#x27;</span>);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">case</span> <span class="string">&quot;ctrl+b&quot;</span>:<span class="title function_">alert</span>(<span class="string">&#x27;you pressed ctrl+b!&#x27;</span>);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">case</span> <span class="string">&quot;r&quot;</span>:<span class="title function_">alert</span>(<span class="string">&#x27;you pressed r!&#x27;</span>);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">case</span> <span class="string">&quot;f&quot;</span>:<span class="title function_">alert</span>(<span class="string">&#x27;you pressed f!&#x27;</span>);<span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="React中使用"><a href="#React中使用" class="headerlink" title="React中使用"></a>React中使用</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pheXdjamxvdmUvcmVhY3QtaG90a2V5cw==">react-hotkeys<i class="fa fa-external-link-alt"></i></span>，安装如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -S react-hot-keys</span><br></pre></td></tr></table></figure>

<p>详细使用方法请参考文档 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pheXdjamxvdmUvcmVhY3QtaG90a2V5cw==">react-hotkeys<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>传统调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/hotkeys.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>包加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hotkeys <span class="keyword">from</span> <span class="string">&#x27;hotkeys-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;shift+a,alt+d, w&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;干点活儿&#x27;</span>,e);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">shift</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 shift 键！&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">ctrl</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 ctrl 键！&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">alt</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 alt 键！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="支持的键"><a href="#支持的键" class="headerlink" title="支持的键"></a>支持的键</h2><p><code>⇧</code>, <code>shift</code>, <code>option</code>, <code>⌥</code>, <code>alt</code>, <code>ctrl</code>, <code>control</code>, <code>command</code>, <code>⌘</code></p>
<p><code>⌘</code> Command()<br><code>⌃</code> Control<br><code>⌥</code> Option(alt)<br><code>⇧</code> Shift<br><code>⇪</code> Caps Lock(大写)<br><del><code>fn</code> 功能键就是fn(不支持)</del><br><code>↩︎</code> return&#x2F;enter<br><code>space</code> 空格键  </p>
<h2 id="修饰键判断"><a href="#修饰键判断" class="headerlink" title="修饰键判断"></a>修饰键判断</h2><p>可以对下面的修饰键判断 <code>shift</code> <code>alt</code> <code>option</code> <code>ctrl</code> <code>control</code> <code>command</code>，特别注意<code>+</code>和<code>=</code>键值相同，组合键设置<code>⌘+=</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;shift+a,alt+d, w&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;干点活儿&#x27;</span>,e);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">shift</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 shift 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">ctrl</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 ctrl 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">alt</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 alt 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">option</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 option 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">control</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 control 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">cmd</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 cmd 键!&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">command</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您摁下了 command 键!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="定义快捷键"><a href="#定义快捷键" class="headerlink" title="定义快捷键"></a>定义快捷键</h2><blockquote>
<p><code>hotkeys([keys:&lt;String&gt;], [option:[string|object|function]], [callback:&lt;function&gt;])</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 F5 快捷键</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;f5&#x27;</span>, <span class="keyword">function</span>(<span class="params">event,handler</span>)&#123;</span><br><span class="line">  <span class="comment">//event.srcElement: input </span></span><br><span class="line">  <span class="comment">//event.target: input</span></span><br><span class="line">  <span class="comment">// 阻止WINDOWS系统下的默认刷新事件</span></span><br><span class="line">  event.<span class="title function_">preventDefault</span>() </span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;你按下了 F5 键!&#x27;</span>) </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回 false 将停止活动，并阻止默认浏览器事件</span></span><br><span class="line"><span class="comment">// Mac OS 系统 定义 `command+r` 为刷新快捷键</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+r, command+r&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;停止刷新!&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义a快捷键</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span>(<span class="params">event,handler</span>)&#123;</span><br><span class="line">  <span class="comment">//event.srcElement: input </span></span><br><span class="line">  <span class="comment">//event.target: input</span></span><br><span class="line">  <span class="keyword">if</span>(event.<span class="property">target</span> === <span class="string">&quot;input&quot;</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你在输入框中按下了 a!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;你按下了 a!&#x27;</span>) </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 ctrl+a、ctrl+b、r、f 四组快捷键</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+a,ctrl+b,r,f&#x27;</span>, <span class="keyword">function</span>(<span class="params">event,handler</span>)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(handler.<span class="property">key</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ctrl+a&quot;</span>: <span class="title function_">alert</span>(<span class="string">&#x27;你按下了ctrl+a!&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ctrl+b&quot;</span>: <span class="title function_">alert</span>(<span class="string">&#x27;你按下了ctrl+b!&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;r&quot;</span>: <span class="title function_">alert</span>(<span class="string">&#x27;你按下了r!&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;f&quot;</span>: <span class="title function_">alert</span>(<span class="string">&#x27;你按下了f!&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//handler.scope 范围</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个快捷方式做同样的事情</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;⌘+r, ctrl+r&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有摁键执行任务</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;wcj&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;干点活儿&#x27;</span>,e);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key.getScope()::&quot;</span>,hotkeys.<span class="title function_">getScope</span>());</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">shift</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 shift 键！&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">ctrl</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 ctrl 键！&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(hotkeys.<span class="property">alt</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大哥你摁下了 alt 键！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以设置自定义的分割符</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl-y, ctrl-a&#x27;</span>, &#123;<span class="attr">splitKey</span>: <span class="string">&#x27;-&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;you press bind keys&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="option"><a href="#option" class="headerlink" title="option"></a>option</h4><ul>
<li><code>scope&lt;String&gt;</code></li>
<li><code>element&lt;HTMLElement&gt;</code></li>
<li><code>keyup&lt;Boolean&gt;</code></li>
<li><code>keydown&lt;Boolean&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;o, enter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">scope</span>: <span class="string">&#x27;wcj&#x27;</span>,</span><br><span class="line">  <span class="attr">element</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;warpper&#x27;</span>),</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something else&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="切换快捷键"><a href="#切换快捷键" class="headerlink" title="切换快捷键"></a>切换快捷键</h2><p>如果在单页面在不同的区域，相同的快捷键，干不同的事儿，之间来回切换。O(∩_∩)O ！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个快捷键，有可能干的活儿不一样哦</span></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+o, ctrl+alt+enter&#x27;</span>, <span class="string">&#x27;scope1&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好看&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+o, enter&#x27;</span>, <span class="string">&#x27;scope2&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好丑陋啊！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你摁 “ctrl+o”组合键</span></span><br><span class="line"><span class="comment">// 当scope等于 scope1 ，执行 回调事件打印出 “你好看”，</span></span><br><span class="line"><span class="comment">// 当scope等于 scope2 ，执行 回调事件打印出 “你好丑陋啊！”，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过setScope设定范围scope</span></span><br><span class="line">hotkeys.<span class="title function_">setScope</span>(<span class="string">&#x27;scope1&#x27;</span>); <span class="comment">// 默认所有事儿都干哦</span></span><br></pre></td></tr></table></figure>

<h2 id="标记快捷键范围"><a href="#标记快捷键范围" class="headerlink" title="标记快捷键范围"></a>标记快捷键范围</h2><p><strong>删除</strong> 区域范围标记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hotkeys.<span class="title function_">deleteScope</span>(<span class="string">&#x27;scope1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>获取</strong> 区域范围标记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hotkeys.<span class="title function_">getScope</span>();</span><br></pre></td></tr></table></figure>

<p><strong>设置</strong> 区域范围标记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hotkeys.<span class="title function_">setScope</span>(<span class="string">&#x27;scope1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="解除绑定"><a href="#解除绑定" class="headerlink" title="解除绑定"></a>解除绑定</h2><p><code>hotkeys.unbind()</code> 解除绑定的所有快捷键<br><code>hotkeys.unbind(&quot;ctrl+o, ctrl+alt+enter&quot;)</code> 解除绑定两组快捷键<br><code>hotkeys.unbind(&quot;ctrl+o&quot;,&quot;files&quot;)</code> 解除绑定名字叫files钟的一组快捷键  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解除绑定 &#x27;a&#x27; 程序函数</span></span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅针对单个范围解除绑定快捷键</span></span><br><span class="line"><span class="comment">// 如果未指定范围，则默认为当前范围（hotkeys.getScope()）</span></span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(<span class="string">&#x27;o, enter&#x27;</span>, <span class="string">&#x27;issues&#x27;</span>);</span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(<span class="string">&#x27;o, enter&#x27;</span>, <span class="string">&#x27;files&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>通过函数来解除绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;a&#x27;</span>, example);</span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(<span class="string">&#x27;a&#x27;</span>, example);</span><br><span class="line"></span><br><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;issues&#x27;</span>, example);</span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;issues&#x27;</span>, example);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">可以通过传入对象解除绑定的快捷键</span><br><span class="line">hotkeys.<span class="title function_">unbind</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;ctrl-e,ctrl-u&#x27;</span>,</span><br><span class="line">  <span class="attr">scope</span>: <span class="string">&#x27;issues&#x27;</span>,</span><br><span class="line">  <span class="attr">spitKey</span>: <span class="string">&#x27;-&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">传入数组可同时解除多个scope下绑定的快捷键</span><br><span class="line">hotkeys.<span class="title function_">unbind</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;a, ctrl+r&#x27;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&#x27;issues&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;+, ctrl-y&#x27;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">splitKey</span>: <span class="string">&#x27;-&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="键判断"><a href="#键判断" class="headerlink" title="键判断"></a>键判断</h2><p>判断摁下的键是否为某个键</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hotkeys.<span class="title function_">isPressed</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">//=&gt; true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hotkeys.<span class="title function_">isPressed</span>(<span class="string">&quot;A&quot;</span>)); <span class="comment">//=&gt; true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hotkeys.<span class="title function_">isPressed</span>(<span class="number">65</span>)); <span class="comment">//=&gt; true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="获取摁下键值"><a href="#获取摁下键值" class="headerlink" title="获取摁下键值"></a>获取摁下键值</h2><p>获取摁下绑定键的键值 <code>hotkeys.getPressedKeyCodes()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;command+ctrl+shift+a,f&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hotkeys.<span class="title function_">getPressedKeyCodes</span>()); <span class="comment">//=&gt; [17, 65] 或者 [70]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h2><p><strong>key down</strong> 和 <strong>key up</strong> 将都执行回调事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hotkeys</span>(<span class="string">&#x27;ctrl+a,alt+a+s&#x27;</span>, &#123; <span class="attr">keyup</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">evn, handler</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(evn.<span class="property">type</span> === <span class="string">&#x27;keydown&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keydown:&#x27;</span>, evn.<span class="property">type</span>, handler, handler.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(evn.<span class="property">type</span> === <span class="string">&#x27;keyup&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keyup:&#x27;</span>, evn.<span class="property">type</span>, handler, handler.<span class="property">key</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p><code>INPUT</code>  <code>SELECT</code> <code>TEXTAREA</code> 默认不处理。<br><code>hotkeys.filter</code> 返回 <code>true</code> 快捷键设置才会起作用，<code>false</code> 快捷键设置失效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hotkeys.<span class="property">filter</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如何增加过滤可编辑标签 &lt;div contentEditable=&quot;true&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// contentEditable老浏览器不支持滴</span></span><br><span class="line">hotkeys.<span class="property">filter</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tagName = (event.<span class="property">target</span> || event.<span class="property">srcElement</span>).<span class="property">tagName</span>;</span><br><span class="line">  <span class="keyword">return</span> !(tagName.<span class="property">isContentEditable</span> ||</span><br><span class="line">  tagName == <span class="string">&#x27;INPUT&#x27;</span> ||</span><br><span class="line">  tagName == <span class="string">&#x27;SELECT&#x27;</span> ||</span><br><span class="line">  tagName == <span class="string">&#x27;TEXTAREA&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">hotkeys.<span class="property">filter</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> tagName = (event.<span class="property">target</span> || event.<span class="property">srcElement</span>).<span class="property">tagName</span>;</span><br><span class="line">  hotkeys.<span class="title function_">setScope</span>(<span class="regexp">/^(INPUT|TEXTAREA|SELECT)$/</span>.<span class="title function_">test</span>(tagName) ? <span class="string">&#x27;input&#x27;</span> : <span class="string">&#x27;other&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="兼容模式"><a href="#兼容模式" class="headerlink" title="兼容模式"></a>兼容模式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> k = hotkeys.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="title function_">k</span>(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里可以干一些事儿&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">hotkeys</span>()</span><br><span class="line"><span class="comment">// --&gt;Uncaught TypeError: hotkeys is not a function(anonymous function)</span></span><br><span class="line"><span class="comment">// @ VM2170:2InjectedScript._evaluateOn</span></span><br><span class="line"><span class="comment">// @ VM2165:883InjectedScript._evaluateAndWrap</span></span><br><span class="line"><span class="comment">// @ VM2165:816InjectedScript.evaluate @ VM2165:682</span></span><br></pre></td></tr></table></figure>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>安装依赖，运行自重载构建，获取代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git https://github.com/jaywcjlove/hotkeys.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hotkeys     <span class="comment"># 进入目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install    <span class="comment"># 或者使用 yarn install 安装依赖</span></span></span><br></pre></td></tr></table></figure>

<p>运行下面命令自动重载构建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run watch</span></span><br></pre></td></tr></table></figure>

<p>运行稳定环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run doc:dev</span></span><br></pre></td></tr></table></figure>

<p>如果要贡献，请 fork <code>Hotkeys.js</code>, 并添加您的测试代码(在 test 目录中)，并提交一个 PR。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm run <span class="built_in">test</span>:watch <span class="comment"># Development model</span></span></span><br></pre></td></tr></table></figure>


<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="./LICENSE">MIT © Kenny Wong</a></p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>KALI Linux 1.信息搜集 1(指纹识别)</title>
    <url>/2019/12/26/KALI-Linux-1-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86-1-%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h2 id="为什么要做信息搜集"><a href="#为什么要做信息搜集" class="headerlink" title="为什么要做信息搜集"></a>为什么要做信息搜集</h2><blockquote>
<p>在渗透测试中，就好比和人打架，你不知道对方的身高、体型、力气有多大。所以再打架前就要通过一些手段，来收集到对方的信息，搜集到的越多越好。</p>
</blockquote>
<h2 id="使用curl命令"><a href="#使用curl命令" class="headerlink" title="使用curl命令"></a>使用curl命令</h2><p>通过 <code>curl</code> 命令添加 <code>--head</code> 参数来获取相应头，从响应头来判断操作系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Tools/w3af]</span><br><span class="line">└─$ curl --head http://192.168.0.102 </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 1193</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Location: http://192.168.0.102/iisstart.htm</span><br><span class="line">Last-Modified: Fri, 21 Feb 2003 12:15:52 GMT</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">ETag: &quot;0ce1f9a2d9c21:242&quot;</span><br><span class="line">Server: Microsoft-IIS/6.0</span><br><span class="line">MicrosoftOfficeWebServer: 5.0_Pub</span><br><span class="line">X-Powered-By: ASP.NET</span><br><span class="line">Date: Mon, 03 Oct 2022 14:29:35 GMT</span><br></pre></td></tr></table></figure>

<p>IIS 版本和操作系统对应表 </p>
<table>
<thead>
<tr>
<th>IIS Version</th>
<th>Windows Server Version</th>
</tr>
</thead>
<tbody><tr>
<td>IIS 5.0</td>
<td>Windows 2000</td>
</tr>
<tr>
<td>IIS 5.1</td>
<td>Windows XP</td>
</tr>
<tr>
<td>IIS 6.0</td>
<td>Windows 2003</td>
</tr>
<tr>
<td>IIS 7.0</td>
<td>Windows 2008、Windows Vista</td>
</tr>
<tr>
<td>IIS 7.5</td>
<td>Windows 2008 R2、Windows 7</td>
</tr>
</tbody></table>
<h2 id="使用-nmap-命令"><a href="#使用-nmap-命令" class="headerlink" title="使用 nmap 命令"></a>使用 nmap 命令</h2><p><strong>查看服务版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap 192.168.0.102 -p 80 -A                                                                   </span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-03 09:42 EDT</span><br><span class="line">Nmap scan report for 192.168.0.102 (192.168.0.102)</span><br><span class="line">Host is up (0.00056s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">80/tcp open  http    Microsoft IIS httpd 6.0</span><br><span class="line">|_http-title: \xBD\xA8\xC9\xE8\xD6\xD0</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/6.0</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 6.39 seconds</span><br></pre></td></tr></table></figure>

<p><strong>-p &lt;port ranges&gt;</strong>: Only scan specified ports</p>
<p><strong>-A</strong>: Enable OS detection, version detection, script scanning, and traceroute</p>
<p><strong>查看操作版本信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap 192.168.0.102 -O</span><br><span class="line">[sudo] password for kali: </span><br><span class="line">Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-03 09:42 EDT</span><br><span class="line">Nmap scan report for 192.168.0.102 (192.168.0.102)</span><br><span class="line">Host is up (0.00033s latency).</span><br><span class="line">Not shown: 994 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">1025/tcp open  NFS-or-IIS</span><br><span class="line">1046/tcp open  wfremotertm</span><br><span class="line">MAC Address: 00:0C:29:86:F6:23 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Microsoft Windows XP|2003</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_xp::sp2 cpe:/o:microsoft:windows_server_2003::sp1 cpe:/o:microsoft:windows_server_2003::sp2</span><br><span class="line">OS details: Microsoft Windows XP SP2 or Windows Server 2003 SP1 or SP2</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">OS detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 2.46 seconds</span><br></pre></td></tr></table></figure>

<p>OS DETECTION:<br>  -O: Enable OS detection<br>  –osscan-limit: Limit OS detection to promising targets<br>  –osscan-guess: Guess OS more aggressively</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
        <tag>指纹识别</tag>
        <tag>Curl</tag>
        <tag>Nmap</tag>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali 汉化教程</title>
    <url>/2021/01/12/Kali-%E6%B1%89%E5%8C%96%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>在 Kali 的桌面按下 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>T</kbd> 打开终端</p>
</li>
<li><p>使用 root 权限执行 <code>sudo dpkg-reconfigure locales</code><br>  <img src="/images/pasted-37.png" alt="upload successful"></p>
</li>
<li><p>选中 <strong>en_US.UTF-8 UTF-8</strong>  和  <strong>zh_CN.UTF-8 UTF-8</strong>  (注意:按下<strong>空格键</strong>选中,选好后按下<strong>TAB</strong>键退出编码格式选项,跳到<strong>OK选项</strong>)<br>  <img src="/images/pasted-38.png" alt="upload successful"></p>
</li>
<li><p>选择 <strong>zh_CN.UTF-8</strong>，选择OK<br> <img src="/images/pasted-39.png" alt="upload successful"></p>
</li>
<li><p>在终端键入<code>reboot</code>, 重启Kali<br>  <img src="/images/pasted-40.png" alt="upload successful"></p>
</li>
<li><p>重启Kali后, 建议选择<strong>保留旧的名称</strong><br>  <img src="/images/pasted-41.png" alt="upload successful"></p>
</li>
<li><p>此时可以看到界面已经汉化完成了!<br>  <img src="/images/pasted-42.png" alt="upload successful"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Kali Linux</tag>
        <tag>系统汉化</tag>
        <tag>英文切换到中文</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali 修改为阿里云镜像</title>
    <url>/2019/11/16/Kali-%E4%BF%AE%E6%94%B9%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kali Linux is a Debian-derived Linux distribution designed for digital forensics and penetration testing. It is maintained and funded by Offensive Security Ltd</p>
<p>下载地址: <span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmFsaXl1bi5jb20va2FsaS8=">https://mirrors.aliyun.com/kali/<i class="fa fa-external-link-alt"></i></span></p>
<p>相关仓库</p>
<ul>
<li>Kali安装源（kali-images）：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3Iva2FsaS1pbWFnZXM=">https://developer.aliyun.com/mirror/kali-images<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>修改 <code>/etc/apt/sources.list</code> , 将相关 url 改成阿里云的源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#deb https://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>官方主页: <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcv">https://www.kali.org/<i class="fa fa-external-link-alt"></i></span></li>
<li>文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy8=">https://www.kali.org/docs/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <tags>
        <tag>镜像加速</tag>
        <tag>Kali Linux</tag>
        <tag>系统配置</tag>
        <tag>DevOps 工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 开启文件共享：使用 Samba 服务</title>
    <url>/2024/07/20/Linux-%E5%BC%80%E5%90%AF%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%EF%BC%9A%E4%BD%BF%E7%94%A8-Samba-%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>在 Linux 系统中，Samba 是一个功能强大的服务，它允许 Linux 和 Windows 系统之间进行文件共享。通过 Samba，你可以轻松地在不同操作系统之间共享文件和打印机。本文将详细介绍如何在 Linux 上配置 Samba 服务，以实现文件共享。</p>
<h2 id="安装-Samba"><a href="#安装-Samba" class="headerlink" title="安装 Samba"></a>安装 Samba</h2><p>首先，你需要确保你的 Linux 系统上安装了 Samba。在基于 Debian 的系统（如 Ubuntu）上，你可以使用以下命令来安装 Samba：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install samba</span><br></pre></td></tr></table></figure>

<p>这将安装 Samba 服务及其依赖项。</p>
<h2 id="配置-Samba"><a href="#配置-Samba" class="headerlink" title="配置 Samba"></a>配置 Samba</h2><p>安装完成后，你需要配置 Samba 以便它知道你想要共享哪些目录。这涉及到编辑 Samba 的配置文件 <code>smb.conf</code>。</p>
<ol start="2">
<li>使用文本编辑器打开 <code>smb.conf</code> 文件。这里我们使用 <code>vi</code> 编辑器，但你也可以使用 <code>nano</code> 或其他你喜欢的编辑器：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 <code>smb.conf</code> 文件中，你可以定义多个共享部分，每个部分对应一个共享目录。以下是两个示例共享部分的配置：</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mnt-rw]</span></span><br><span class="line">  <span class="attr">comment</span> = Read-Write Mount Point</span><br><span class="line">  <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">  <span class="attr">path</span> = /mnt</span><br><span class="line">  force <span class="attr">user</span> = root</span><br><span class="line">  create <span class="attr">mask</span> = <span class="number">0775</span></span><br><span class="line">  directory <span class="attr">mask</span> = <span class="number">0775</span></span><br><span class="line">  guest <span class="attr">ok</span> = <span class="literal">Yes</span></span><br><span class="line">  read <span class="attr">only</span> = <span class="literal">No</span></span><br><span class="line"></span><br><span class="line"><span class="section">[onecloud-share]</span></span><br><span class="line">  <span class="attr">comment</span> = Read-<span class="literal">On</span>ly <span class="literal">On</span>eCloud Share</span><br><span class="line">  <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">  <span class="attr">path</span> = /mnt</span><br><span class="line">  guest <span class="attr">ok</span> = <span class="literal">Yes</span></span><br><span class="line">  read <span class="attr">only</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>[mnt-rw]</code> 部分定义了一个名为 <code>mnt-rw</code> 的共享，它指向 <code>/mnt</code> 目录。这个共享允许读写访问，并且对所有用户（包括匿名用户）开放。</li>
<li><code>[onecloud-share]</code> 部分定义了另一个共享，它同样指向 <code>/mnt</code> 目录，但这个共享只允许读访问。</li>
</ul>
<h3 id="配置选项解释"><a href="#配置选项解释" class="headerlink" title="配置选项解释"></a>配置选项解释</h3><ul>
<li><code>browseable = yes</code>：这个选项使得共享在网络浏览器中可见。</li>
<li><code>path = /mnt</code>：指定共享的文件系统路径。</li>
<li><code>force user = root</code>：强制所有连接到此共享的用户以 root 用户身份访问。</li>
<li><code>create mask = 0775</code> 和 <code>directory mask = 0775</code>：设置文件和目录的默认权限。</li>
<li><code>guest ok = Yes</code>：允许匿名访问。</li>
<li><code>read only = No</code>：对于 <code>[mnt-rw]</code> 共享，这个选项允许写入操作；对于 <code>[onecloud-share]</code> 共享，这个选项设置为 <code>yes</code>，表示只读。</li>
</ul>
<h2 id="启动-Samba-服务"><a href="#启动-Samba-服务" class="headerlink" title="启动 Samba 服务"></a>启动 Samba 服务</h2><p>配置完成后，你需要启动 Samba 服务以使更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service smbd start</span><br></pre></td></tr></table></figure>

<p>这个命令将启动 Samba 守护进程，使你的共享目录在网络上可用。</p>
<h2 id="测试共享"><a href="#测试共享" class="headerlink" title="测试共享"></a>测试共享</h2><p>在 Windows 系统上，你可以通过网络邻居访问这些共享，或者在文件资源管理器中输入共享的网络路径（例如 <code>\\&lt;Linux-Server-IP&gt;\mnt-rw</code>）来访问。</p>
]]></content>
      <tags>
        <tag>Samba</tag>
        <tag>Linux</tag>
        <tag>文件共享</tag>
      </tags>
  </entry>
  <entry>
    <title>Low Orbit Ion Cannon (LOIC)：网络攻击工具解析</title>
    <url>/2017/10/04/Low-Orbit-Ion-Cannon-LOIC-%EF%BC%9A%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E5%B7%A5%E5%85%B7%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>在网络世界中，安全与攻击技术总是并存的。今天，我们将深入探讨一个名为Low Orbit Ion Cannon（LOIC）的网络攻击工具，它是一种开源的压力测试和拒绝服务（DoS或DDoS）攻击应用程序，用C#编写。本文将详细介绍LOIC的起源、功能、使用方法以及相关的法律风险。</p>
<h2 id="LOIC简介"><a href="#LOIC简介" class="headerlink" title="LOIC简介"></a>LOIC简介</h2><p>LOIC 最初由 Praetox Technologies 开发，并后来被发布到公共领域。其源代码现在可以自由获取，并且可以在多个开源平台上下载。LOIC能够执行基本的TCP、UDP或HTTP DoS攻击，当多个用户联合使用时，可以形成DDoS攻击。它的流行部分原因是因为有一个版本与Anonymous组织有关，通过IRC控制通道，允许人们加入自愿的僵尸网络并攻击单一目标。</p>
<p><img src="/images/pasted-73.png" alt="upload successful"></p>
<h2 id="LOIC的工作原理与使用"><a href="#LOIC的工作原理与使用" class="headerlink" title="LOIC的工作原理与使用"></a>LOIC的工作原理与使用</h2><p>LOIC 的操作相对简单。用户只需填写目标系统的URL或IP地址，选择攻击方法和端口，然后点击“IMMA CHARGIN MAH LAZER”按钮即可。以下是详细的使用步骤：</p>
<ol>
<li>运行工具。</li>
<li>在相关字段中输入网站的URL或IP，并点击“Lock On”。</li>
<li>如果你是高级用户，可以更改参数；否则，保持默认设置。</li>
<li>点击标有“IMMA CHARGIN MAH LAZER”的大按钮。</li>
<li>攻击开始，你可以在工具中看到攻击状态（例如发送的数据包数量）。</li>
</ol>
<h2 id="LOIC是否为病毒？"><a href="#LOIC是否为病毒？" class="headerlink" title="LOIC是否为病毒？"></a>LOIC是否为病毒？</h2><p>虽然LOIC不是病毒，但许多杀毒软件会将其检测为病毒（类似于trojan.agent&#x2F;gen-msil flooder），因为它通常被用于恶意目的，并且许多用户在不知情的情况下安装了它。</p>
<h2 id="LOIC的法律风险"><a href="#LOIC的法律风险" class="headerlink" title="LOIC的法律风险"></a>LOIC的法律风险</h2><p>使用LOIC进行DoS或DDoS攻击在大多数国家是非法的。因此，我们强烈建议仅在你有权限访问的网络或进行压力测试时使用此工具，以展示DoS攻击的力量。</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC下安装sqlmap及环境配置</title>
    <url>/2019/04/22/MAC%E4%B8%8B%E5%AE%89%E8%A3%85sqlmap%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1、首先上-git-下-sqlmap"><a href="#1、首先上-git-下-sqlmap" class="headerlink" title="1、首先上 git 下 sqlmap"></a>1、首先上 git 下 <code>sqlmap</code></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/sqlmapproject/sqlmap.git</span><br></pre></td></tr></table></figure>

<h1 id="2、接着配置环境"><a href="#2、接着配置环境" class="headerlink" title="2、接着配置环境"></a>2、接着配置环境</h1><p>将一下代码添加到 <code>.bash_profile</code> 文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias sqlmap=&quot;/Users/y50/sqlmap/sqlmap.py&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：Alias是linux中常用的别名命令，这么好的东东在mac中自然不会舍去。当有一些比较复杂的命令需要经常执行的时候，alias对效率的提升立竿见影。</p>
</blockquote>
<h1 id="3、bash重新载入配置"><a href="#3、bash重新载入配置" class="headerlink" title="3、bash重新载入配置"></a>3、bash重新载入配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>即可<br>以后需要使用 <code>sqlmap</code> ，就只需要在 <code>terminal</code> 中输入 <code>sqlmap</code></p>
]]></content>
      <tags>
        <tag>MAC</tag>
        <tag>Git</tag>
        <tag>Shell命令</tag>
        <tag>开发环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkText：下一代Markdown编辑器的新星</title>
    <url>/2024/10/24/MarkText%EF%BC%9A%E4%B8%8B%E4%B8%80%E4%BB%A3Markdown%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E6%96%B0%E6%98%9F/</url>
    <content><![CDATA[<p>在数字时代，我们每天都在产生和消费大量的文本内容。无论是撰写报告、编写文档、还是记录个人笔记，一个高效、简洁且功能丰富的文本编辑器都是我们不可或缺的工具。今天，我要向大家介绍一款名为MarkText的开源Markdown编辑器，它以其出色的性能和优雅的设计，成为了文本编辑领域的一颗新星。</p>
<h2 id="MarkText简介"><a href="#MarkText简介" class="headerlink" title="MarkText简介"></a>MarkText简介</h2><p>MarkText是一款开源的Markdown编辑器，专注于速度和可用性。它支持多个操作系统，包括Linux、macOS和Windows，让不同平台的用户都能享受到流畅的写作体验。MarkText以其简洁的界面和实时预览功能，为用户提供了一种无干扰的写作环境，使得写作变得更加专注和高效。</p>
<h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><p>MarkText拥有许多令人印象深刻的特性，以下是其中的一些亮点：</p>
<ol>
<li><p><strong>实时预览</strong>：MarkText提供了所见即所得的实时预览功能，这意味着你在编辑器中输入的内容会立即反映在预览窗口中，让你可以即时看到最终的排版效果。</p>
</li>
<li><p><strong>遵循Markdown规范</strong>：它支持CommonMark规范和GitHub Flavored Markdown规范，这意味着你可以使用MarkText来编写符合行业标准的Markdown文档。</p>
</li>
<li><p><strong>Markdown扩展</strong>：除了标准的Markdown功能，MarkText还支持数学表达式（通过KaTeX）、front matter和emoji等Markdown扩展，丰富了你的写作选项。</p>
</li>
<li><p><strong>样式快捷方式</strong>：MarkText提供了段落和内联样式的快捷方式，帮助你提高写作效率。</p>
</li>
<li><p><strong>输出格式多样</strong>：你可以将文档输出为HTML和PDF文件，满足不同场景的需求。</p>
</li>
<li><p><strong>主题丰富</strong>：MarkText提供了多种主题，如Cadmium Light、Material Dark等，用户可以根据自己的喜好选择不同的主题。</p>
</li>
<li><p><strong>编辑模式多样</strong>：包括源代码模式、打字机模式和专注模式，适应不同用户的写作习惯。</p>
</li>
<li><p><strong>图片粘贴</strong>：直接从剪贴板中粘贴图片，简化了图片插入的过程。</p>
</li>
</ol>
<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>MarkText的安装非常简单。对于macOS用户，你可以通过Homebrew-Cask安装：</p>
<p><code>brew install --cask mark-text</code></p>
<p>Windows用户可以下载安装向导并运行，或者使用Chocolatey和Winget等软件包管理器进行安装：</p>
<p><code>choco install marktext</code></p>
<p>或者</p>
<p><code>winget install marktext</code></p>
<p>Linux用户则可以按照官方提供的安装指南进行操作。</p>
<h3 id="最新版本下载"><a href="#最新版本下载" class="headerlink" title="最新版本下载"></a>最新版本下载</h3><p>想要获取MarkText的最新版本，你可以直接访问其GitHub发布页面：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmt0ZXh0L21hcmt0ZXh0L3JlbGVhc2VzL2xhdGVzdA==">MarkText GitHub Releases<i class="fa fa-external-link-alt"></i></span></p>
<p>在这里，你可以找到适用于不同操作系统的安装包，选择适合你的版本进行下载和安装。</p>
]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>Markdown</tag>
        <tag>开源软件</tag>
        <tag>生产力工具</tag>
        <tag>文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown——入门指南</title>
    <url>/2016/12/04/Markdown%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>导语：</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3poLndpa2lwZWRpYS5vcmcvd2lraS9NYXJrZG93bg==">Markdown<i class="fa fa-external-link-alt"></i></span> 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbjw1eqft66xcg3j21kw12mdub.jpg" alt="Ulysses for Mac"></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy51bHlzc2VzYXBwLmNvbS8=">Ulysses for Mac<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="一，认识-Markdown"><a href="#一，认识-Markdown" class="headerlink" title="一，认识 Markdown"></a>一，认识 Markdown</h2><p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如<span class="exturl" data-url="aHR0cDovL2ppYW5zaHUuaW8v">简书<i class="fa fa-external-link-alt"></i></span>）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 <span class="exturl" data-url="aHR0cDovL3d3dy5nZXRjbG91ZGFwcC5jb20v">CloudApp<i class="fa fa-external-link-alt"></i></span> 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 <span class="exturl" data-url="aHR0cDovL3RlMWVlLnR1bWJsci5jb20v">Tumblr<i class="fa fa-external-link-alt"></i></span>，也支持 Mou 这类 Markdown 工具的直接上传。</p>
<h3 id="Markdown-官方文档"><a href="#Markdown-官方文档" class="headerlink" title="Markdown 官方文档"></a>Markdown 官方文档</h3><blockquote>
<p>这里可以看到官方的 Markdown 语法规则文档，当然，** 后文我也会用自己的方式阐述这些语法的具体用法 **。</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi9zeW50YXg=">创始人 John Gruber 的 Markdown 语法说明<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3dvd3VidW50dS5jb20vbWFya2Rvd24vI2xpc3Q=">Markdown 中文版语法说明<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h3><ul>
<li>专注你的文字内容而不是排版样式，安心写作。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li>
<li>可读、直观、学习成本低。</li>
</ul>
<h3 id="使用-Markdown-的误区"><a href="#使用-Markdown-的误区" class="headerlink" title="使用 Markdown 的误区"></a>使用 Markdown 的误区</h3><blockquote>
<p>*We believe that writing is about content, about what you want to say – not about fancy formatting. *<br>我们坚信写作写的是内容，所思所想，而不是花样格式。<br>— Ulysses for Mac</p>
</blockquote>
<ul>
<li>Markdown 旨在简洁、高效，也由于 Markdown 的易读易写，人们用不同的编程语言实现了多个版本的解析器和生成器，这就导致了目前不同的 Markdown 工具集成了不同的功能（基础功能大致相同），例如流程图与时序图，复杂表格与复杂公式的呈现，虽然功能的丰富并没有什么本质的缺点，但终归有些背离初衷，何况在编写的过程中很费神，不如使用专业的工具撰写来的更有效率，所以如果你需实现复杂功能，专业的图形界面工具会更加方便。** 当然，如果你对折腾这些不同客户端对 Markdown 的定制所带来高阶功能感到愉悦的话，那也是无可厚非的。 **</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1eq320claw3j21kw0kjdpc.jpg" alt="flowchart.js on Github（使用 Markdown 绘制流程图）"></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkcmFpL2Zsb3djaGFydC5qcw==">flowchart.js on Github（使用 Markdown 绘制流程图）<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="我该用什么工具？"><a href="#我该用什么工具？" class="headerlink" title="我该用什么工具？"></a>我该用什么工具？</h2><p><img src="http://mouapp.com/Mou_128.png" alt="Mou for Mac"></p>
<p>Mou for Mac</p>
<ul>
<li>在 Mac OS X 上，我强烈建议你用 <span class="exturl" data-url="aHR0cDovL21vdWFwcC5jb20v">Mou<i class="fa fa-external-link-alt"></i></span> 这款免费且十分好用的 Markdown 编辑器，它支持实时预览，既左边是你编辑 Markdown 语言，右边会实时的生成预览效果。不仅如此，Mou 还有一些有趣的偏好设置（Preference），例如主题（Themes）与样式（CSS），它们可以配置出定制化的文本编辑效果与导出效果，如果你对自带的主题与样式不满意还可以到 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaD91dGY4PSVFMiU5QyU5MyZxPU1vdQ==">GitHub<i class="fa fa-external-link-alt"></i></span> 上搜索其它爱好者为 Mou 编写的更多主题样式，导入的方式可以在偏好设置的 Themes 或 CSS 选项中 选择 reload。</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effcq2gx92j210j0ustj7.jpg" alt="Mou 的编写与预览窗口"></p>
<p>Mou 的编写与预览窗口</p>
<p>如果你从事文字工作，我强烈建议你购买 <span class="exturl" data-url="aHR0cDovL3d3dy51bHlzc2VzYXBwLmNvbS8=">Ulysses for Mac<i class="fa fa-external-link-alt"></i></span>，这款软件入围了苹果 Mac App Store 的 <code>The Best of 2013</code>。它支持更多的写作格式、多文档的支持。Mou，iA writer 这些软件都是基于单文档的管理方式，而 Ulysses 支持 Folder、Filter 的管理，一个 Folder 里面可以创建多个 Sheet，Sheet 之间也可以进行 Combine 处理。</p>
<p><img src="http://ww1.sinaimg.cn/large/6aee7dbbjw1eqgrj7suqoj217a0aiq4u.jpg" alt="Mac 上一些 Markdown 编辑器"></p>
<p>Mac 上一些 Markdown 编辑器</p>
<ul>
<li>由于笔者很少接触 Windows，Windows 下的 Markdown 没有过多涉猎，经朋友介绍，有两款还算不错，一款叫做 <span class="exturl" data-url="aHR0cDovL3d3dy5tYXJrZG93bnBhZC5jb20v">MarkdownPad<i class="fa fa-external-link-alt"></i></span> ，另一款叫做 <span class="exturl" data-url="aHR0cDovL2NvZGU1Mi5vcmcvRG93bm1hcmtlcldQRi8=">MarkPad<i class="fa fa-external-link-alt"></i></span>。</li>
<li>iOS 端很多 app 早已经支持了 Markdown 录入，例如 Drafts，Day One，iA writer 等，另外 Ulysses for iPad 现在已经上架，可以说是 iOS 平台最好的编辑器了。</li>
<li>在 Web端，我强烈推荐<span class="exturl" data-url="aHR0cDovL2ppYW5zaHUuaW8v">简书<i class="fa fa-external-link-alt"></i></span>这款产品，上面有无数热爱文字的人在不停的创造，分享。在 Web 端使用 Markdown * 没有比简书更舒服的地方了，同样支持左右两栏的实时预览，字体优雅，简洁。</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1effdkfijo1j21220nigth.jpg" alt="简书的编辑预览模式"></p>
<p>简书的编辑预览模式</p>
<h2 id="二，Markdown-语法的简要规则"><a href="#二，Markdown-语法的简要规则" class="headerlink" title="二，Markdown 语法的简要规则"></a>二，Markdown 语法的简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effeaclhiyj20eh09cwez.jpg" alt="标题"></p>
<p>标题</p>
<p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可。</p>
<p><code># 一级标题</code></p>
<p><code>## 二级标题</code></p>
<p><code>### 三级标题</code></p>
<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 <code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加<code>1.</code> <code>2.</code> <code>3.</code> 符号要和文字之间加上一个字符的空格。</p>
<p><img src="http://ww4.sinaimg.cn/large/6aee7dbbgw1effew5aftij20d80bz3yw.jpg" alt="无序列表与有序列表"></p>
<p>无序列表与有序列表</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p>
<blockquote>
<p>例如这样</p>
<p>只需要在文本前加入 <code>&gt;</code> 这种尖括号（大于号）即可</p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effezhonxlj20e009c3yu.jpg" alt="引用"></p>
<p>引用</p>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>插入链接与插入图片的语法很像，区别在一个 <code>!</code> 号</p>
<p>图片为：<code>![](){ImgCap}{/ImgCap}</code></p>
<p>链接为：<code>[]()</code></p>
<p>插入图片的地址需要图床，这里推荐<span class="exturl" data-url="aHR0cDovL3dlaWJvdHVjaHVhbmcuc2luYWFwcC5jb20v">围脖图床修复计划<i class="fa fa-external-link-alt"></i></span> 与 <span class="exturl" data-url="aHR0cDovL3d3dy5nZXRjbG91ZGFwcC5jb20v">CloudApp<i class="fa fa-external-link-alt"></i></span> 的服务，生成URL地址即可。</p>
<p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" alt="URL 与图片"></p>
<p>URL 与图片</p>
<h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法。</p>
<p>例如：** 这里是粗体 ** * 这里是斜体 *</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是我觉得 Markdown 比较累人的地方，例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure>

<p>这种语法生成的表格如下：</p>
<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 &#96; 把中间的代码包裹起来。图例：</p>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effg1lsa97j20lt0a8dgs.jpg" alt="使用 &#96;tab&#96; 键即可缩进"></p>
<p>使用 <code>tab</code> 键即可缩进。</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要三个 <code>*</code> 号，例如：</p>
<hr>
<p>[	到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。</p>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effgmnpgqlj210j0us44j.jpg"></p>
<h2 id="三，相关推荐"><a href="#三，相关推荐" class="headerlink" title="三，相关推荐:"></a>三，相关推荐:</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><em>图床工具用来上传图片获取 URL 地址</em></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2Ryb3Bsci5jb20v">Droplr<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5nZXRjbG91ZGFwcC5jb20v">Cloudapp<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL2NuL2FwcC95aS14aWFuZy9pZDY3MjUyMjMzNT9tdD0xMiZ1bz00">ezShare for Mac<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3dlaWJvdHVjaHVhbmcuc2luYWFwcC5jb20v">围脖图床修复计划<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p><em>在线好用的Markdown工具，为印象笔记而生</em></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL21heGlhbmcuaW5mby8=">马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h3 id="相关文章阅读："><a href="#相关文章阅读：" class="headerlink" title="相关文章阅读："></a>相关文章阅读：</h3><ul>
<li><span class="exturl" data-url="aHR0cDovL2ppYW5zaHUuaW8vcC9xcWdqbG4=">为什么作家应该用 Markdown 保存自己的文稿<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy55YW5nemhpcGluZy5jb20vdGVjaC9yLW1hcmtkb3duLWtuaXRyLmh0bWw=">Markdown写作浅谈<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5hcHBpbm4uY29tL21hcmtkb3duLXRvb2xzLw==">Markdown 工具补完<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ppYW5zaHUuaW8vcC82M0hZWjY=">Drafts + Scriptogr.am + Dropbox 打造移动端 Markdown 风格博客<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pdHVyaW5nLmNvbS5jbi9hcnRpY2xlLzIz">图灵社区，怎样使用Markdown<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL25ld3MuY25ibG9ncy5jb20vbi8xMzk2NDkv">为什么我们要学习Markdown的三个理由<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2lidWljay5tZS8/cD00MDkz">Markdown 语法写作入门指南 by ibuick<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>文本编辑器</tag>
        <tag>Mou</tag>
        <tag>图床工具</tag>
        <tag>写作工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/2022/03/11/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯。 它允许人们使用易读易写的<strong>纯文本格式</strong>编写文档，然后转换成有效的<strong>HTML</strong>文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 </p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>轻量化</li>
<li>跨平台</li>
<li>易读易写</li>
</ul>
<h3 id="文件后缀名"><a href="#文件后缀名" class="headerlink" title="文件后缀名"></a>文件后缀名</h3><ul>
<li>.md</li>
<li>.markdown</li>
</ul>
<h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><table>
<thead>
<tr>
<th>描述</th>
<th>代码</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>斜体</td>
<td>*斜体*<br>_斜体_</td>
<td><em>斜体</em><br><em>斜体</em></td>
</tr>
<tr>
<td>粗体</td>
<td>**粗体**</td>
<td><strong>粗体</strong></td>
</tr>
<tr>
<td>斜粗体</td>
<td>***斜粗体***</td>
<td><em><strong>斜粗体</strong></em></td>
</tr>
<tr>
<td>删除线</td>
<td>~~删除线~~</td>
<td><del>删除线</del></td>
</tr>
<tr>
<td>插入链接</td>
<td>[链接名称](链接地址 “标题”)</td>
<td><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="标题">链接名称</a></td>
</tr>
<tr>
<td>插入图片</td>
<td>![alt](图片地址 “标题”)</td>
<td><img src="/images/avatar.gif" alt="alt text" title="avatar"></td>
</tr>
<tr>
<td>代码行</td>
<td>`print()`</td>
<td><code>print()</code></td>
</tr>
<tr>
<td>HTML 元素</td>
<td>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt;</td>
<td>使用 <kbd>Ctrl</kbd>+<kbd>C</kbd> 复制</td>
</tr>
<tr>
<td>emoji</td>
<td>:hammer:</td>
<td>:hammer:</td>
</tr>
</tbody></table>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一级标题</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表条目1</span><br><span class="line"><span class="bullet">2.</span> 列表条目2</span><br><span class="line"><span class="bullet">   1.</span> 列表条目2.1</span><br><span class="line"><span class="bullet">      1.</span> 列表条目2.1.1</span><br><span class="line"><span class="bullet">      2.</span> 列表条目2.1.2</span><br><span class="line"><span class="bullet">3.</span> 列表条目2.2</span><br><span class="line"><span class="bullet">4.</span> 列表条目3</span><br></pre></td></tr></table></figure>

<ol>
<li>列表条目1</li>
<li>列表条目2<ol>
<li>列表条目2.1</li>
<li>列表条目2.2<ol>
<li>列表条目2.2.1</li>
<li>列表条目2.2.2</li>
<li>列表条目2.2.3</li>
</ol>
</li>
<li>列表条目2.3</li>
</ol>
</li>
<li>列表条目3</li>
</ol>
<h3 id="无需列表"><a href="#无需列表" class="headerlink" title="无需列表"></a>无需列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表条目1</span><br><span class="line"><span class="bullet">-</span> 列表条目2</span><br><span class="line"><span class="bullet">  -</span> 列表条目2.1</span><br><span class="line"><span class="bullet">    -</span> 列表条目2.1.1</span><br><span class="line"><span class="bullet">    -</span> 列表条目2.1.2</span><br><span class="line"><span class="bullet">  -</span> 列表条目2.2</span><br><span class="line"><span class="bullet">-</span> 列表条目3</span><br></pre></td></tr></table></figure>

<ul>
<li>列表条目1</li>
<li>列表条目2<ul>
<li>列表条目2.1<ul>
<li>列表条目2.1.1</li>
<li>列表条目2.1.2</li>
</ul>
</li>
<li>列表条目2.2</li>
</ul>
</li>
<li>列表条目3</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```[语言]</span></span><br><span class="line"><span class="code">代码块</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;hello,world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容</span></span><br><span class="line">&gt;&gt; 引用内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用内容</p>
<blockquote>
<p>引用内容</p>
</blockquote>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong">* * *</span></span><br><span class="line"><span class="strong">**</span><span class="strong">***</span></span><br><span class="line"><span class="strong">- - -</span></span><br><span class="line"><span class="strong">----------</span></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<hr>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="center">右对齐</th>
<th align="right">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格</td>
</tr>
</tbody></table>
<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p>[toc]</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>$$<br>f(x)&#x3D;sin(x)+12<br>$$</p>
<p>$$<br>\begin{Bmatrix}<br>   a &amp; b \<br>   c &amp; d<br>\end{Bmatrix}<br>$$</p>
<p>$$<br>\begin{CD}<br>   A @&gt;a&gt;&gt; B \<br>@VbVV @AAcA \<br>   C @&#x3D; D<br>\end{CD}<br>$$</p>
<h3 id="流程图、时序图、甘特图"><a href="#流程图、时序图、甘特图" class="headerlink" title="流程图、时序图、甘特图"></a>流程图、时序图、甘特图</h3><p>1、横向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt;|a=1| D[结果1]</span><br><span class="line">C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<p>2、竖向流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>

<p>3、标准流程图源码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<p>4、标准流程图源码格式（横向）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<p>5、UML时序图源码样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>

<p>6、UML时序图源码复杂样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>

<p>7、UML标准时序图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>

<p>8、甘特图样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">	gantt</span><br><span class="line">	dateFormat  YYYY-MM-DD</span><br><span class="line">	title 软件开发甘特图</span><br><span class="line">	section 设计</span><br><span class="line">	需求              :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">	原型              :active,  des2, 2014-01-09, 3d</span><br><span class="line">	UI设计            :         des3, after des2, 5d</span><br><span class="line">	未来任务          :         des4, after des3, 5d</span><br><span class="line">	section 开发</span><br><span class="line">	学习准备理解需求  :crit, done, 2014-01-06,24h</span><br><span class="line">	设计框架          :crit, done, after des2, 2d</span><br><span class="line">	开发              :crit, active, 3d</span><br><span class="line">	未来任务          :crit, 5d</span><br><span class="line">	耍                :2d</span><br><span class="line">	section 测试</span><br><span class="line">	功能测试          :active, a1, after des3, 3d</span><br><span class="line">	压力测试          :after a1  , 20h</span><br><span class="line">	测试报告          :48h</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>mermaid图表</tag>
        <tag>技术文档编写</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat Premium 16 永久激活工具</title>
    <url>/2023/01/29/Navicat-Premium-16-%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li>打开破解工具</li>
<li>选择 Navicat 安装目录，勾选 HOSTS 和 RSA key，点击 <strong>Patch</strong></li>
<li>打开 Navicat Premium 输入许可证，点击 <strong>激活</strong> 按钮</li>
</ol>
<p> <img src="/images/pasted-52.png" alt="upload successful"></p>
<ol start="4">
<li>等待弹出服务器不可用窗口，点击 <strong>手动激活</strong> 按钮</li>
</ol>
<p> <img src="/images/pasted-53.png" alt="upload successful"></p>
<ol start="5">
<li><p>将 <strong>请求码</strong> 复制到激活工具中的 <strong>Request Code</strong> 输入框中</p>
</li>
<li><p>点击 <strong>Generate Activation Code!</strong> 按钮，生成激活码</p>
</li>
<li><p>生成好的 <strong>激活码</strong> 复制到 <strong>Navicat Premium</strong> 中，点击激活按钮</p>
</li>
</ol>
<p> <img src="/images/pasted-54.png" alt="upload successful"></p>
<p> <img src="/images/pasted-56.png" alt="upload successful"></p>
<ol start="8">
<li>预览一下破解结果</li>
</ol>
<p><img src="/images/pasted-55.png" alt="upload successful"></p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLw==">阿里云盘<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Navicat</tag>
        <tag>数据库管理</tag>
        <tag>软件破解</tag>
        <tag>阿里云盘</tag>
        <tag>破解教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Curl Class: HTTP requests made easy</title>
    <url>/2018/03/16/PHP-Curl-Class-HTTP-requests-made-easy/</url>
    <content><![CDATA[<h3 id="PHP-Curl-Class-HTTP-requests-made-easy"><a href="#PHP-Curl-Class-HTTP-requests-made-easy" class="headerlink" title="PHP Curl Class: HTTP requests made easy"></a>PHP Curl Class: HTTP requests made easy</h3><p><a href="https://github.com/php-curl-class/php-curl-class/releases/"><img src="https://img.shields.io/github/release/php-curl-class/php-curl-class.svg"></a><br><a href="https://github.com/php-curl-class/php-curl-class/blob/master/LICENSE"><img src="https://img.shields.io/github/license/php-curl-class/php-curl-class.svg"></a><br><a href="https://travis-ci.org/php-curl-class/php-curl-class/"><img src="https://img.shields.io/travis/php-curl-class/php-curl-class.svg"></a><br><a href="https://github.com/php-curl-class/php-curl-class/releases/"><img src="https://img.shields.io/packagist/dt/php-curl-class/php-curl-class.svg"></a></p>
<p>PHP Curl Class makes it easy to send HTTP requests and integrate with web APIs.</p>
<p><img src="https://raw.githubusercontent.com/php-curl-class/php-curl-class/master/www/img/screencast.gif" alt="PHP Curl Class screencast"></p>
<hr>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>To install PHP Curl Class, simply:</p>
<pre><code>$ composer require php-curl-class/php-curl-class
</code></pre>
<p>For latest commit version:</p>
<pre><code>$ composer require php-curl-class/php-curl-class @dev
</code></pre>
<h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>PHP Curl Class works with PHP 5.3, 5.4, 5.5, 5.6, 7.0, 7.1, and HHVM.</p>
<h3 id="Quick-Start-and-Examples"><a href="#Quick-Start-and-Examples" class="headerlink" title="Quick Start and Examples"></a>Quick Start and Examples</h3><p>More examples are available under <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BocC1jdXJsLWNsYXNzL3BocC1jdXJsLWNsYXNzL3RyZWUvbWFzdGVyL2V4YW1wbGVz">&#x2F;examples<i class="fa fa-external-link-alt"></i></span>.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> \<span class="title">Curl</span>\<span class="title">Curl</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;https://www.example.com/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$curl</span>-&gt;error) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Error: &#x27;</span> . <span class="variable">$curl</span>-&gt;errorCode . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$curl</span>-&gt;errorMessage . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Response:&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$curl</span>-&gt;response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://www.example.com/search?q=keyword</span></span><br><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;https://www.example.com/search&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;keyword&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;https://www.example.com/login/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;myusername&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;mypassword&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setBasicAuthentication</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setUserAgent</span>(<span class="string">&#x27;MyUserAgent/0.0.1 (+https://www.example.com/bot.html)&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setReferrer</span>(<span class="string">&#x27;https://www.example.com/url?url=https%3A%2F%2Fwww.example.com%2F&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setHeader</span>(<span class="string">&#x27;X-Requested-With&#x27;</span>, <span class="string">&#x27;XMLHttpRequest&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setCookie</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;https://www.example.com/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$curl</span>-&gt;error) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Error: &#x27;</span> . <span class="variable">$curl</span>-&gt;errorCode . <span class="string">&#x27;: &#x27;</span> . <span class="variable">$curl</span>-&gt;errorMessage . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Response:&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$curl</span>-&gt;response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$curl</span>-&gt;requestHeaders);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$curl</span>-&gt;responseHeaders);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setOpt</span>(CURLOPT_FOLLOWLOCATION, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;https://shortn.example.com/bHbVsP&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">put</span>(<span class="string">&#x27;https://api.example.com/user/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;first_name&#x27;</span> =&gt; <span class="string">&#x27;Zach&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last_name&#x27;</span> =&gt; <span class="string">&#x27;Borboa&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">patch</span>(<span class="string">&#x27;https://api.example.com/profile/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;image&#x27;</span> =&gt; <span class="string">&#x27;@path/to/file.jpg&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">patch</span>(<span class="string">&#x27;https://api.example.com/profile/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;image&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">CURLFile</span>(<span class="string">&#x27;path/to/file.jpg&#x27;</span>),</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;https://api.example.com/user/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Enable all supported encoding types and download a file.</span></span><br><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">setOpt</span>(CURLOPT_ENCODING , <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">download</span>(<span class="string">&#x27;https://www.example.com/file.bin&#x27;</span>, <span class="string">&#x27;/tmp/myfile.bin&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Case-insensitive access to headers.</span></span><br><span class="line"><span class="variable">$curl</span> = <span class="keyword">new</span> <span class="title class_">Curl</span>();</span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">download</span>(<span class="string">&#x27;https://www.example.com/image.png&#x27;</span>, <span class="string">&#x27;/tmp/myimage.png&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$curl</span>-&gt;responseHeaders[<span class="string">&#x27;Content-Type&#x27;</span>] . <span class="string">&quot;\n&quot;</span>; <span class="comment">// image/png</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$curl</span>-&gt;responseHeaders[<span class="string">&#x27;CoNTeNT-TyPE&#x27;</span>] . <span class="string">&quot;\n&quot;</span>; <span class="comment">// image/png</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Clean up.</span></span><br><span class="line"><span class="variable">$curl</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example access to curl object.</span></span><br><span class="line"><span class="title function_ invoke__">curl_set_opt</span>(<span class="variable">$curl</span>-&gt;curl, CURLOPT_USERAGENT, <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>-&gt;curl);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> \<span class="title">Curl</span>\<span class="title">MultiCurl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Requests in parallel with callback functions.</span></span><br><span class="line"><span class="variable">$multi_curl</span> = <span class="keyword">new</span> <span class="title class_">MultiCurl</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">success</span>(function(<span class="variable">$instance</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;call to &quot;&#x27;</span> . <span class="variable">$instance</span>-&gt;url . <span class="string">&#x27;&quot; was successful.&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;response:&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$instance</span>-&gt;response);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">error</span>(function(<span class="variable">$instance</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;call to &quot;&#x27;</span> . <span class="variable">$instance</span>-&gt;url . <span class="string">&#x27;&quot; was unsuccessful.&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;error code: &#x27;</span> . <span class="variable">$instance</span>-&gt;errorCode . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;error message: &#x27;</span> . <span class="variable">$instance</span>-&gt;errorMessage . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">complete</span>(function(<span class="variable">$instance</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;call completed&#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">addGet</span>(<span class="string">&#x27;https://www.google.com/search&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">addGet</span>(<span class="string">&#x27;https://duckduckgo.com/&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">addGet</span>(<span class="string">&#x27;https://www.bing.com/search&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="variable">$multi_curl</span>-&gt;<span class="title function_ invoke__">start</span>(); <span class="comment">// Blocks until all items in the queue have been processed.</span></span><br></pre></td></tr></table></figure>

<p>More examples are available under <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BocC1jdXJsLWNsYXNzL3BocC1jdXJsLWNsYXNzL3RyZWUvbWFzdGVyL2V4YW1wbGVz">&#x2F;examples<i class="fa fa-external-link-alt"></i></span>.</p>
<h3 id="Available-Methods"><a href="#Available-Methods" class="headerlink" title="Available Methods"></a>Available Methods</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$base_url</span> = <span class="literal">null</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">__get</span>(<span class="variable">$name</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">attemptRetry</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">beforeSend</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">buildPostData</span>(<span class="variable">$data</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">call</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">close</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">complete</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">delete</span>(<span class="variable">$url</span>, <span class="variable">$query_parameters</span> = <span class="keyword">array</span>(), <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">download</span>(<span class="variable">$url</span>, <span class="variable">$mixed_filename</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">error</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">exec</span>(<span class="variable">$ch</span> = <span class="literal">null</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">execDone</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">getCookie</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">getInfo</span>(<span class="variable">$opt</span> = <span class="literal">null</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">getOpt</span>(<span class="variable">$option</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">getResponseCookie</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">getResponseCookies</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">head</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">options</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">patch</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">post</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>(), <span class="variable">$follow_303_with_post</span> = <span class="literal">false</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">progress</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">put</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">removeHeader</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">search</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setBasicAuthentication</span>(<span class="variable">$username</span>, <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setConnectTimeout</span>(<span class="variable">$seconds</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setCookie</span>(<span class="variable">$key</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setCookieFile</span>(<span class="variable">$cookie_file</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setCookieJar</span>(<span class="variable">$cookie_jar</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setCookieString</span>(<span class="variable">$string</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setCookies</span>(<span class="variable">$cookies</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDefaultDecoder</span>(<span class="variable">$mixed</span> = <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDefaultJsonDecoder</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDefaultTimeout</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDefaultUserAgent</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDefaultXmlDecoder</span>()</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setDigestAuthentication</span>(<span class="variable">$username</span>, <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setHeader</span>(<span class="variable">$key</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setHeaders</span>(<span class="variable">$headers</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setJsonDecoder</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setMaxFilesize</span>(<span class="variable">$bytes</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setOpt</span>(<span class="variable">$option</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setOpts</span>(<span class="variable">$options</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setPort</span>(<span class="variable">$port</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setReferer</span>(<span class="variable">$referer</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setReferrer</span>(<span class="variable">$referrer</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setRetry</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setTimeout</span>(<span class="variable">$seconds</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setUrl</span>(<span class="variable">$url</span>, <span class="variable">$mixed_data</span> = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setUserAgent</span>(<span class="variable">$user_agent</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">setXmlDecoder</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">success</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">unsetHeader</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">Curl</span>::<span class="title function_ invoke__">verbose</span>(<span class="variable">$on</span> = <span class="literal">true</span>, <span class="variable">$output</span> = STDERR)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$base_url</span> = <span class="literal">null</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">__destruct</span>()</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addCurl</span>(Curl <span class="variable">$curl</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addDelete</span>(<span class="variable">$url</span>, <span class="variable">$query_parameters</span> = <span class="keyword">array</span>(), <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addDownload</span>(<span class="variable">$url</span>, <span class="variable">$mixed_filename</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addGet</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addHead</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addOptions</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addPatch</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addPost</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>(), <span class="variable">$follow_303_with_post</span> = <span class="literal">false</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addPut</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">addSearch</span>(<span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>())</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">beforeSend</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">close</span>()</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">complete</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">error</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">getOpt</span>(<span class="variable">$option</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">removeHeader</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setBasicAuthentication</span>(<span class="variable">$username</span>, <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setConcurrency</span>(<span class="variable">$concurrency</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setConnectTimeout</span>(<span class="variable">$seconds</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setCookie</span>(<span class="variable">$key</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setCookieFile</span>(<span class="variable">$cookie_file</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setCookieJar</span>(<span class="variable">$cookie_jar</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setCookieString</span>(<span class="variable">$string</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setCookies</span>(<span class="variable">$cookies</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setDigestAuthentication</span>(<span class="variable">$username</span>, <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setHeader</span>(<span class="variable">$key</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setHeaders</span>(<span class="variable">$headers</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setJsonDecoder</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setOpt</span>(<span class="variable">$option</span>, <span class="variable">$value</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setOpts</span>(<span class="variable">$options</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setPort</span>(<span class="variable">$port</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setReferer</span>(<span class="variable">$referer</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setReferrer</span>(<span class="variable">$referrer</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setRetry</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setTimeout</span>(<span class="variable">$seconds</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setUrl</span>(<span class="variable">$url</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setUserAgent</span>(<span class="variable">$user_agent</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">setXmlDecoder</span>(<span class="variable">$mixed</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">start</span>()</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">success</span>(<span class="variable">$callback</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">unsetHeader</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="title class_">MultiCurl</span>::<span class="title function_ invoke__">verbose</span>(<span class="variable">$on</span> = <span class="literal">true</span>, <span class="variable">$output</span> = STDERR)</span><br></pre></td></tr></table></figure>

<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>See <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BocC1jdXJsLWNsYXNzL3BocC1jdXJsLWNsYXNzL2Jsb2IvbWFzdGVyL1NFQ1VSSVRZLm1k">SECURITY<i class="fa fa-external-link-alt"></i></span> for security considerations.</p>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>See <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BocC1jdXJsLWNsYXNzL3BocC1jdXJsLWNsYXNzL2Jsb2IvbWFzdGVyL1RST1VCTEVTSE9PVElORy5tZA==">TROUBLESHOOTING<i class="fa fa-external-link-alt"></i></span> for troubleshooting.</p>
<h3 id="Run-Tests"><a href="#Run-Tests" class="headerlink" title="Run Tests"></a>Run Tests</h3><p>To run tests:</p>
<pre><code>$ git clone https://github.com/php-curl-class/php-curl-class.git
$ cd php-curl-class/
$ composer update
$ ./tests/run.sh
</code></pre>
<h3 id="Contribute"><a href="#Contribute" class="headerlink" title="Contribute"></a>Contribute</h3><ol>
<li>Check for open issues or open a new issue to start a discussion around a bug or feature.</li>
<li>Fork the repository on GitHub to start making your changes.</li>
<li>Write one or more tests for the new feature or that expose the bug.</li>
<li>Make code changes to implement the feature or fix the bug.</li>
<li>Send a pull request to get your changes merged and published.</li>
</ol>
]]></content>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>PHP</tag>
        <tag>软件开发</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Redis 秒杀</title>
    <url>/2018/11/23/PHP-Redis-%E7%A7%92%E6%9D%80/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 初始化</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $goodsId 商品ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $number 商品数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRedis</span>(<span class="params"><span class="variable">$goodsId</span>, <span class="variable">$number</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$storeKey</span> = <span class="string">&quot;goods_<span class="subst">&#123;$goodsId&#125;</span>_store&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title function_ invoke__">redis</span>();</span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">del</span>(<span class="variable">$storeKey</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$number</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">lpush</span>(<span class="variable">$storeKey</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀入口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $goodsId 商品ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kills</span>(<span class="params"><span class="variable">$goodsId</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$storeKey</span> = <span class="string">&quot;goods_<span class="subst">&#123;$goodsId&#125;</span>_store&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title function_ invoke__">redis</span>();</span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$count</span> = <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">lpop</span>(<span class="variable">$storeKey</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$count</span>) &#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&quot;order_sn&quot;</span>] = <span class="title function_ invoke__">rand</span>(<span class="number">1000</span>, <span class="number">9999</span>);	<span class="comment">// 测试订单号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 直接进行数据库操作</span></span><br><span class="line">        <span class="variable">$orderModel</span> = <span class="keyword">new</span> <span class="title function_ invoke__">orderModel</span>();</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$orderModel</span>-&gt;<span class="title function_ invoke__">save</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">lpush</span>(<span class="variable">$storeKey</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加队列后继操作</span></span><br><span class="line">        <span class="title class_">Queue</span>::<span class="title function_ invoke__">push</span>(<span class="variable">$job</span>, <span class="variable">$data</span>, <span class="string">&#x27;seckill&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Redis</tag>
        <tag>秒杀系统</tag>
        <tag>高并发处理</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 接受命令行参数的三种方式</title>
    <url>/2018/12/29/PHP-%E6%8E%A5%E5%8F%97%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>通常 PHP 都作为 HTTP 方式来请求，有些时候需要在 shell 命令写把 PHP 作为脚本来执行，比如定时任务。这样和涉及到在 shell 命令下如何给 PHP 传参的问题，通常有三种方式传参。</p>
</blockquote>
<h1 id="使用-argc-和-argv-变量接受"><a href="#使用-argc-和-argv-变量接受" class="headerlink" title="使用 $argc 和 $argv 变量接受"></a>使用 $argc 和 $argv 变量接受</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 $argc 和 $argv 接受参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;接受到了 <span class="subst">&#123;$argc&#125;</span> 个参数\r\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$argv</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php test.php</span><br><span class="line"></span><br><span class="line">接受到了 1 个参数</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; test.php</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">php test.php a b c d</span><br><span class="line">接受到了 5 个参数</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; test.php</span><br><span class="line">    [1] =&gt; a</span><br><span class="line">    [2] =&gt; b</span><br><span class="line">    [3] =&gt; c</span><br><span class="line">    [4] =&gt; d</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="使用-getopt-函数"><a href="#使用-getopt-函数" class="headerlink" title="使用 getopt 函数"></a>使用 getopt 函数</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 getopt 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$paramArray</span> = <span class="title function_ invoke__">getopt</span>(<span class="string">&#x27;a:b:&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$paramArray</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php test.php -a 1 -b 2</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [a] =&gt; 1</span><br><span class="line">    [b] =&gt; 2</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="提示用户输入"><a href="#提示用户输入" class="headerlink" title="提示用户输入"></a>提示用户输入</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示用户输入，类似Python</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;Please enter your name: &#x27;</span>);</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;The name you entered is: &#x27;</span>.<span class="title function_ invoke__">fgets</span>(STDIN);</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php test.php</span><br><span class="line">Please enter your name: helen</span><br><span class="line">The name you entered is: helen</span><br></pre></td></tr></table></figure>

<p>你也可以这么干，不让用户输入空内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fs</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$fs</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(STDOUT, <span class="string">&#x27;Please enter your name:&#x27;</span>);</span><br><span class="line">        <span class="variable">$fs</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(STDOUT, <span class="string">&#x27;Sorry, the name cannot be empty, please re-enter your name:&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">fgets</span>(STDIN));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (!<span class="keyword">isset</span>(<span class="variable">$name</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;The name you entered: <span class="subst">&#123;$name&#125;</span>\r\n&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>命令行参数</tag>
        <tag>脚本编写</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 调用 MongoDB 全解析</title>
    <url>/2024/10/19/PHP-%E8%B0%83%E7%94%A8-MongoDB-%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="PHP-调用-MongoDB-全解析"><a href="#PHP-调用-MongoDB-全解析" class="headerlink" title="PHP 调用 MongoDB 全解析"></a>PHP 调用 MongoDB 全解析</h1><p>MongoDB 是一款流行的开源文档型数据库，它以 JSON 风格的文档形式存储数据，具有高性能、高可扩展性和灵活的数据模型等特点。而 PHP 作为一种广泛应用于 Web 开发的脚本语言，与 MongoDB 结合可以为开发者提供强大的数据存储和处理能力。本文将详细介绍如何使用 PHP 调用 MongoDB 进行数据的增删改查等操作。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在使用 PHP 调用 MongoDB 之前，需要确保已经安装了 MongoDB 数据库和 PHP 的 MongoDB 扩展。可以使用 Composer 来安装 MongoDB 的 PHP 驱动，在项目根目录下创建一个<code>composer.json</code>文件，内容如下：</p>
<p>json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mongodb/mongodb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.13&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后在终端中执行<code>composer install</code>命令来安装依赖。</p>
<h2 id="代码示例与解析"><a href="#代码示例与解析" class="headerlink" title="代码示例与解析"></a>代码示例与解析</h2><h3 id="连接-MongoDB"><a href="#连接-MongoDB" class="headerlink" title="连接 MongoDB"></a>连接 MongoDB</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> MongoDB\<span class="title function_ invoke__">Client</span>(<span class="string">&quot;mongodb://localhost:27017&quot;</span>);</span><br><span class="line"><span class="comment">//指定数据库</span></span><br><span class="line"><span class="variable">$db</span> = <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">selectDatabase</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="comment">//指定集合</span></span><br><span class="line"><span class="variable">$collection</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">selectCollection</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种指定合集的方式</span></span><br><span class="line"><span class="variable">$collection</span> = <span class="variable">$client</span>-&gt;test-&gt;users;</span><br></pre></td></tr></table></figure>

<p>上述代码首先通过<code>require &#39;vendor/autoload.php&#39;;</code>引入 Composer 的自动加载文件，然后使用<code>MongoDB\Client</code>类来连接本地的 MongoDB 服务器，端口为<code>27017</code>。接着指定了要使用的数据库<code>test</code>和集合<code>users</code>。</p>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="插入单条数据"><a href="#插入单条数据" class="headerlink" title="插入单条数据"></a>插入单条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">insertOne</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span> =&gt; <span class="string">&#x27;男&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>insertOne</code>方法可以向集合中插入一条数据，数据以关联数组的形式传入。</p>
<h4 id="指定-ID-插入数据"><a href="#指定-ID-插入数据" class="headerlink" title="指定 ID 插入数据"></a>指定 ID 插入数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">insertOne</span>([</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span> =&gt; <span class="keyword">new</span> MongoDB\BSON\<span class="title function_ invoke__">ObjectID</span>(<span class="string">&#x27;5e7b0b0b0b0b0b0b0b0b0b0b&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span> =&gt; <span class="string">&#x27;男&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>在插入数据时，可以手动指定<code>_id</code>字段，使用<code>MongoDB\BSON\ObjectID</code>类来创建一个 ObjectID 对象。</p>
<h4 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">insertMany</span>([</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> =&gt; <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span> =&gt; <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>insertMany</code>方法可以一次性插入多条数据，传入一个二维数组，每个子数组代表一条数据。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="查询单条数据"><a href="#查询单条数据" class="headerlink" title="查询单条数据"></a>查询单条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$document</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">findOne</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br></pre></td></tr></table></figure>

<p>使用<code>findOne</code>方法可以查询符合条件的第一条数据，返回一个文档对象，使用<code>json_encode</code>方法将其转换为 JSON 字符串并输出。</p>
<h4 id="查询多条数据"><a href="#查询多条数据" class="headerlink" title="查询多条数据"></a>查询多条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>find</code>方法可以查询符合条件的多条数据，返回一个游标对象，通过<code>foreach</code>循环遍历游标对象，输出每条数据。</p>
<h4 id="查询指定数量的数据"><a href="#查询指定数量的数据" class="headerlink" title="查询指定数量的数据"></a>查询指定数量的数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span> =&gt; <span class="number">2</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>find</code>方法的第二个参数中，可以使用<code>limit</code>选项来指定查询结果的数量。</p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询年龄大于18的数据</span></span><br><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;$gt&#x27;</span> =&gt; <span class="number">18</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询年龄小于18，名称等于张三的数据</span></span><br><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;$lt&#x27;</span> =&gt; <span class="number">19</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询性别为空的数据</span></span><br><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;$exists&#x27;</span> =&gt; <span class="literal">false</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在查询条件中，可以使用 MongoDB 的查询操作符，如<code>$gt</code>（大于）、<code>$lt</code>（小于）、<code>$exists</code>（是否存在）等。</p>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">find</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;sort&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">1</span>    // <span class="number">1</span>正序，-<span class="number">1</span>倒叙</span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cursor</span> <span class="keyword">as</span> <span class="variable">$document</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$document</span>,  JSON_UNESCAPED_UNICODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>find</code>方法的第二个参数中，可以使用<code>sort</code>选项来对查询结果进行排序，<code>1</code>表示正序，<code>-1</code>表示倒序。</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><h4 id="查询并修改"><a href="#查询并修改" class="headerlink" title="查询并修改"></a>查询并修改</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">findOneAndUpdate</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;$set&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$cursor</span>,  JSON_UNESCAPED_UNICODE));</span><br></pre></td></tr></table></figure>

<p>使用<code>findOneAndUpdate</code>方法可以查询符合条件的第一条数据并进行修改，返回修改前的文档对象。</p>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">updateOne</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;$set&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>updateOne</code>方法可以更新符合条件的第一条数据，使用<code>$set</code>操作符来指定要更新的字段和值。</p>
<h4 id="查询并替换"><a href="#查询并替换" class="headerlink" title="查询并替换"></a>查询并替换</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cursor</span> = <span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">findOneAndReplace</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span></span><br><span class="line">]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$cursor</span>,  JSON_UNESCAPED_UNICODE));</span><br></pre></td></tr></table></figure>

<p>使用<code>findOneAndReplace</code>方法可以查询符合条件的第一条数据并进行替换，返回替换前的文档对象。</p>
<h4 id="存在更新不存在插入"><a href="#存在更新不存在插入" class="headerlink" title="存在更新不存在插入"></a>存在更新不存在插入</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">updateOne</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;$set&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span></span><br><span class="line">    ]</span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;upsert&#x27;</span> =&gt; <span class="literal">true</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>在<code>updateOne</code>方法的第三个参数中，使用<code>upsert</code>选项设置为<code>true</code>，可以实现如果符合条件的数据存在则更新，不存在则插入的功能。</p>
<h4 id="更新多条数据"><a href="#更新多条数据" class="headerlink" title="更新多条数据"></a>更新多条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">updateMany</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">], [</span><br><span class="line">    <span class="string">&#x27;$set&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">27</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>updateMany</code>方法可以更新符合条件的多条数据。</p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><h4 id="删除单条数据"><a href="#删除单条数据" class="headerlink" title="删除单条数据"></a>删除单条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">deleteOne</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>deleteOne</code>方法可以删除符合条件的第一条数据。</p>
<h4 id="删除多条数据"><a href="#删除多条数据" class="headerlink" title="删除多条数据"></a>删除多条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">deleteMany</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>使用<code>deleteMany</code>方法可以删除符合条件的多条数据。</p>
<h3 id="删除集合和数据库"><a href="#删除集合和数据库" class="headerlink" title="删除集合和数据库"></a>删除集合和数据库</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除集合</span></span><br><span class="line"><span class="variable">$collection</span>-&gt;<span class="title function_ invoke__">drop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据库</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">drop</span>();</span><br></pre></td></tr></table></figure>

<p>使用<code>drop</code>方法可以删除集合和数据库。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>软件开发</tag>
        <tag>MongoDB</tag>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP生成excel表格文件并下载</title>
    <url>/2017/10/26/PHP%E7%94%9F%E6%88%90excel%E8%A1%A8%E6%A0%BC%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>利用php导出excel我们大多会直接生成.xls文件，这种方便快捷。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createtable</span>(<span class="params"><span class="variable">$list</span>,<span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:application/vnd.ms-excel&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Disposition:filename=&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$strexport</span>=<span class="string">&quot;编号\t姓名\t性别\t年龄\r&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="variable">$strexport</span>.=<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        <span class="variable">$strexport</span>.=<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        <span class="variable">$strexport</span>.=<span class="variable">$row</span>[<span class="string">&#x27;sex&#x27;</span>].<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        <span class="variable">$strexport</span>.=<span class="variable">$row</span>[<span class="string">&#x27;age&#x27;</span>].<span class="string">&quot;\r&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="variable">$strexport</span>=<span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;UTF-8&#x27;</span>,<span class="string">&quot;GB2312//IGNORE&quot;</span>,<span class="variable">$strexport</span>);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$strexport</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于这个我们可以将方法封装一下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建(导出)Excel数据表格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $list 要导出的数组格式的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string  $filename 导出的Excel表格数据表的文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $header Excel表格的表头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array   $index $list数组中与Excel表格表头$header中每个项目对应的字段的名字(key值)</span></span><br><span class="line"><span class="comment"> * 比如: $header = array(&#x27;编号&#x27;,&#x27;姓名&#x27;,&#x27;性别&#x27;,&#x27;年龄&#x27;);</span></span><br><span class="line"><span class="comment"> *       $index = array(&#x27;id&#x27;,&#x27;username&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;);</span></span><br><span class="line"><span class="comment"> *       $list = array(array(&#x27;id&#x27;=&gt;1,&#x27;username&#x27;=&gt;&#x27;YQJ&#x27;,&#x27;sex&#x27;=&gt;&#x27;男&#x27;,&#x27;age&#x27;=&gt;24));</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [array] [数组]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">createtable</span>(<span class="params"><span class="variable">$list</span>,<span class="variable">$filename</span>,<span class="variable">$header</span>=<span class="keyword">array</span>(<span class="params"></span>),<span class="variable">$index</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:application/vnd.ms-excel&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Disposition:filename=&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">	<span class="variable">$teble_header</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&quot;\t&quot;</span>,<span class="variable">$header</span>);</span><br><span class="line">	<span class="variable">$strexport</span> = <span class="variable">$teble_header</span>.<span class="string">&quot;\r&quot;</span>;</span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">		<span class="keyword">foreach</span>(<span class="variable">$index</span> <span class="keyword">as</span> <span class="variable">$val</span>)&#123;</span><br><span class="line">			<span class="variable">$strexport</span>.=<span class="variable">$row</span>[<span class="variable">$val</span>].<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$strexport</span>.=<span class="string">&quot;\r&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$strexport</span>=<span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;UTF-8&#x27;</span>,<span class="string">&quot;GB2312//IGNORE&quot;</span>,<span class="variable">$strexport</span>);</span><br><span class="line">	<span class="keyword">exit</span>(<span class="variable">$strexport</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法调用:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;提现记录&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;YmdHis&#x27;</span>);  </span><br><span class="line"><span class="variable">$header</span> = <span class="keyword">array</span>(<span class="string">&#x27;会员&#x27;</span>,<span class="string">&#x27;编号&#x27;</span>,<span class="string">&#x27;联系电话&#x27;</span>,<span class="string">&#x27;开户名&#x27;</span>,<span class="string">&#x27;开户行&#x27;</span>,<span class="string">&#x27;申请金额&#x27;</span>,<span class="string">&#x27;手续费&#x27;</span>,<span class="string">&#x27;实际金额&#x27;</span>,<span class="string">&#x27;申请时间&#x27;</span>);  </span><br><span class="line"><span class="variable">$index</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;vipnum&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>,<span class="string">&#x27;checkname&#x27;</span>,<span class="string">&#x27;bank&#x27;</span>,<span class="string">&#x27;money&#x27;</span>,<span class="string">&#x27;handling_charge&#x27;</span>,<span class="string">&#x27;real_money&#x27;</span>,<span class="string">&#x27;applytime&#x27;</span>);  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createtable</span>(<span class="variable">$cash</span>,<span class="variable">$filename</span>,<span class="variable">$header</span>,<span class="variable">$index</span>);  </span><br></pre></td></tr></table></figure>

<p>这种方式生成Excel文件,生成速度很快,但是有缺点是:</p>
<ol>
<li>单纯的生成Excel文件,生成的文件没有样式,单元格属性(填充色,宽度,高度,边框颜色…)不能自定义。</li>
<li>生成的文件虽然可以打开,但是兼容性很差,每次打开,都会报一个警告。</li>
</ol>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>软件开发</tag>
        <tag>Excel</tag>
        <tag>文件下载</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPStorm 控制台乱码</title>
    <url>/2024/07/06/PHPStorm-%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>PHPStorm 控制台出现乱码的情况，往往是由于控制台所采用的字符编码和输出内容的编码存在差异所致。比如说，控制台或许默认运用的是 GBK 编码，然而您的 PHP 代码输出的却是 UTF-8 编码的内容，抑或是其他的编码形式。</p>
</blockquote>
<p><img src="/images/pasted-69.png" alt="upload successful"></p>
<p>开启 PHPStorm 的设置页面，在其中进行搜索“Console Encoding”，接着选中“Default Encoding”这一选项，并将“UTF-8”设定为默认编码。</p>
<p><img src="/images/pasted-70.png" alt="upload successful"></p>
<p>再次执行相关命令，此时控制台理应能够正常显示内容。</p>
<p><img src="/images/pasted-71.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>字符编码</tag>
        <tag>PHPStorm</tag>
        <tag>控制台乱码</tag>
        <tag>UTF-8</tag>
        <tag>GBK</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP获取curl传输进度</title>
    <url>/2017/07/21/PHP%E8%8E%B7%E5%8F%96curl%E4%BC%A0%E8%BE%93%E8%BF%9B%E5%BA%A6/</url>
    <content><![CDATA[<p>curl上传或者下载，有以下2个选项：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CURLOPT_NOPROGRESS =&gt; <span class="literal">false</span>,</span><br><span class="line">CURLOPT_PROGRESSFUNCTION =&gt; <span class="string">&#x27;callback&#x27;</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>CURLOPT_NOPROGRESS：是否关闭传输进度，默认是true。</li>
<li>CURLOPT_PROGRESSFUNCTION：回调函数，curl传输过程中，会每隔一段时间自动调用该函数。我测试过，间隔不到1秒，具体不知道。官方的注释是这样：设置一个回调函数，有五个参数，第一个是cURL的资源句柄，第二个是预计要下载的总字节（bytes）数。第三个是目前下载的字节数，第四个是预计传输中总上传字节数，第五个是目前上传的字节数。（注意回调函数的命名空间。如：CURLOPT_PROGRESSFUNCTION &#x3D;&gt; ‘namespace_xxx\callback’）</li>
</ul>
<p>设置完成后，需要定义回调函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"><span class="variable">$resource</span>, <span class="variable">$downloadSize</span> = <span class="number">0</span>, <span class="variable">$downloaded</span> = <span class="number">0</span>, <span class="variable">$uploadSize</span> = <span class="number">0</span>, <span class="variable">$uploaded</span> = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// php5.5之前的参数是不同的，所以要考虑到兼容性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">version_compare</span>(PHP_VERSION, <span class="string">&#x27;5.5.0&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;downloadSize&#x27;</span> =&gt; <span class="variable">$downloadSize</span>,</span><br><span class="line">            <span class="string">&#x27;downloaded&#x27;</span>   =&gt; <span class="variable">$downloaded</span>,</span><br><span class="line">            <span class="string">&#x27;uploadSize&#x27;</span>   =&gt; <span class="variable">$uploadSize</span>,</span><br><span class="line">            <span class="string">&#x27;uploaded&#x27;</span>     =&gt; <span class="variable">$uploaded</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;downloadSize&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;downloaded&#x27;</span>   =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;uploadSize&#x27;</span>   =&gt; <span class="variable">$downloaded</span>,</span><br><span class="line">            <span class="string">&#x27;uploaded&#x27;</span>     =&gt; <span class="variable">$uploadSize</span>,</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">S</span>(<span class="string">&#x27;file_upload_&#x27;</span> . <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth.uid&#x27;</span>), <span class="variable">$info</span>, <span class="number">300</span>); <span class="comment">// 可以将结果存放到缓存（这里是ThinkPHP例子）</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>重要：<br>在curl发起请求时，如果开启了 session，会独占 session ，阻塞其他的请求。所以如果框架默认启用了 session ，在 curl 之前可以用session_write_close() 函数关闭 session 阻塞。<br>参考：<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9za2lsbENvZGluZy9hcmNoaXZlLzIwMTIvMDQvMDkvMjQzOTI5Ni5odG1s">http://www.cnblogs.com/skillCoding/archive/2012/04/09/2439296.html<i class="fa fa-external-link-alt"></i></span></p>
<p>最后：在进行传输时，可以每隔1秒通过ajax来获取缓存信息，从而显示传输进度。</p>
<p>补充：<br>传送大文件时，php会超时，注意设置 php-fpm.conf 中的 request_terminate_timeout 值，我设了1000（秒）。<br>还有个 max_children（进程数） ，进程不够用可改大。<br>在程序中，可以使用 set_time_limit() 临时增加 php 响应时间。<br>php.ini中还有 max_execution_time 设置，看攻略说是跟 set_time_limit 累加的，如果攻略是对的，那么这个不用管。</p>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1ZXIyMjAyL2FydGljbGUvZGV0YWlscy83NTM2NDkzOQ==">https://blog.csdn.net/buer2202/article/details/75364939<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Curl</tag>
        <tag>PHP</tag>
        <tag>传输进度</tag>
        <tag>回调函数</tag>
        <tag>会话阻塞</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStorm 提示控制器的类和方法未被使用</title>
    <url>/2022/09/26/PhpStorm-%E6%8F%90%E7%A4%BA%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在 <code>Editor &gt; Inspections</code> 中找到 <code>Unused declaration</code> ，在 <code>Options</code> 中的 <code>Entry points</code> 表中中点击 <code>Code patterns</code></p>
<p><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>根据项目的控制器命名空间添加2条记录。(Member为空，表示构造函数，*表示所有函数。支持正则匹配，可以根据实际代码调整。)</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>PhpStorm</tag>
        <tag>Inspection configuration</tag>
        <tag>Unused code detection</tag>
        <tag>Code optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStorm 破解与配置</title>
    <url>/2022/09/25/PhpStorm-%E7%A0%B4%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>PhpStorm 是 JetBrains 公司开发的一款商业的PHP集成开发工具，旨在提高用户效率，可深刻理解用户的编码，提供智能代码补全，快速导航以及即时错误检查。</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>软件下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9waHBzdG9ybS8=">https://www.jetbrains.com/phpstorm/<i class="fa fa-external-link-alt"></i></span><br>下载后自行安装。</p>
<h2 id="破解激活"><a href="#破解激活" class="headerlink" title="破解激活"></a>破解激活</h2><p>打开 <span class="exturl" data-url="aHR0cHM6Ly9qZXRicmEuaW4vNWQ4NDQ2NmUzMTcyMjk3OTI2NjA1NzY2NDk0MWE3MTg5MzMyMjQ2MA==">JETBRA.IN 检查器 | IPFS<i class="fa fa-external-link-alt"></i></span> 页面，检测器会自动给你匹配出你可以连接上的服务器地址，找到一个适合的地址打开。<br>在网页顶部找到 <strong>jetbar.zip</strong> ，点击链接下载破解工具，<strong>该软件仅作测试用途，不作商业用途!</strong></p>
<p><img src="/images/pasted-14.png" alt="pasted-14"></p>
<p>下载完成后，解压出来。（我习惯解压到 <code>D:\Program Files\JetBrains\jetbra</code> 这个目录，和 JetBrains 全家桶放在一个目录）<br>运行 jetbra 中的 “.&#x2F;scripts&#x2F;install-all-users.vbs” 文件，来配置 vmoptions。</p>
<p><img src="/images/pasted-15.png" alt="pasted-15"></p>
<p>点击确认按钮，等待完成弹窗。（可能需要几秒钟，耐心等待一下)</p>
<p><img src="/images/pasted-16.png" alt="pasted-16"></p>
<p>在刚刚下载激活工具的页面找到PhpStorm，点击 Copy to clipboard，复制激活码。</p>
<p><img src="/images/pasted-17.png" alt="pasted-17"></p>
<p>运行软件来到激活页面，激活方式选择 Activation code，粘贴刚刚复制的激活码，点击激活按钮，即可完成激活。</p>
<p><img src="/images/pasted-18.png" alt="pasted-18"></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Material-Theme-UI-Lite"><a href="#Material-Theme-UI-Lite" class="headerlink" title="Material Theme UI Lite"></a>Material Theme UI Lite</h3><h3 id="Atom-Material-File-Icons"><a href="#Atom-Material-File-Icons" class="headerlink" title="Atom Material File Icons"></a>Atom Material File Icons</h3><h3 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h3><p>GitToolBox 是 git 增强工具，功能十分强大。</p>
<h3 id="CodeGlance-Pro"><a href="#CodeGlance-Pro" class="headerlink" title="CodeGlance Pro"></a>CodeGlance Pro</h3><p>它在编辑器窗格中显示类似于 Sublime 中的缩小概览或小地图。 小地图允许快速滚动，让您直接跳转到代码部分。 </p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="UI配置"><a href="#UI配置" class="headerlink" title="UI配置"></a>UI配置</h3><p>设置主题并设置软件字体和大小</p>
<p><img src="/images/pasted-19.png" alt="pasted-19"></p>
<p>设置代码配色方案</p>
<p><img src="/images/pasted-20.png" alt="pasted-20"></p>
<p>自定义注释颜色（默认是灰色的，个人感觉看着不是很显眼）</p>
<p><img src="/images/pasted-21.png" alt="pasted-21"></p>
<p><img src="/images/pasted-22.png" alt="pasted-22"></p>
]]></content>
      <tags>
        <tag>PhpStorm</tag>
        <tag>界面优化</tag>
        <tag>破解激活</tag>
        <tag>开发效率</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStorm 配置 PHP CS Fixer</title>
    <url>/2022/09/28/PhpStorm-%E9%85%8D%E7%BD%AE-PHP-CS-Fixer/</url>
    <content><![CDATA[<h2 id="PHP-CS-Fixer-介绍"><a href="#PHP-CS-Fixer-介绍" class="headerlink" title="PHP CS Fixer 介绍"></a>PHP CS Fixer 介绍</h2><p>PHP CS Fixer (PHP Coding Standards Fixer)是一款通过编码标准来修复代码的工具。它支持 PSR 编码规范和其他社区驱动（如 Symfony），还可以根据自己（团队）的风格进行自定义配置。</p>
<h2 id="PHP-CS-Fixer-安装"><a href="#PHP-CS-Fixer-安装" class="headerlink" title="PHP CS Fixer 安装"></a>PHP CS Fixer 安装</h2><p>安装 PHP CS Fixer 推荐使用 Composer 来进行安装。可以进行全局安装或者直接安装到项目中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">全局安装</span><br><span class="line">composer global require friendsofphp/php-cs-fixer</span><br><span class="line"></span><br><span class="line">为项目安装</span><br><span class="line">composer require --dev friendsofphp/php-cs-fixer </span><br></pre></td></tr></table></figure>

<h2 id="PhpStorm-配置"><a href="#PhpStorm-配置" class="headerlink" title="PhpStorm 配置"></a>PhpStorm 配置</h2><p>在 <code>PHP &gt; Quality Tools</code> 找到 <code>PHP CS Fixer</code> ,点击配置.</p>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<p>在路径中选这个刚刚安装好的 PHP CS Fixer <code>C:\Users\l1n6yun\AppData\Roaming\Composer\vendor\bin\php-cs-fixer.bat</code>.</p>
<p>点击 验证 按钮验证是否安装成功.</p>
<p><img src="/images/pasted-26.png" alt="upload successful"></p>
<p>点击 <code>PHP CS Fixer inspection</code> 配置,在检测页面开启,并<strong>根据项目要求</strong>配置检测规则集</p>
<p><img src="/images/pasted-27.png" alt="upload successful"></p>
<h2 id="配置外部工具"><a href="#配置外部工具" class="headerlink" title="配置外部工具"></a>配置外部工具</h2><p><strong>Program</strong>: <code>C:\Users\l1n6yun\AppData\Roaming\Composer\vendor\bin\php-cs-fixer.bat</code></p>
<p><strong>Arguments</strong>: <code>fix &quot;$FileDir$\$FileName$&quot; --using-cache=no</code></p>
<p><strong>Working directory</strong>: <code>$ProjectFileDir$</code></p>
<p><img src="/images/pasted-28.png" alt="upload successful"></p>
<p>添加快捷键</p>
<p><img src="/images/pasted-29.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>PhpStorm</tag>
        <tag>代码规范</tag>
        <tag>PHP CS Fixer</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 对象</title>
    <url>/2022/01/28/Promise-%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<blockquote>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。简单来说就是一个容器，里面保存着某个未来才会结束的事件(通常是一个异步操作的结果)</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ECMAscript 6 原生提供了 Promise 对象。</p>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。简单来说就是一个容器，里面保存着某个未来才会结束的事件(通常是一个异步操作的结果)</p>
<p>Promise 对象的基本语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li><p>对象的状态不受外界影响</p>
<p>Promise 对象表示一个异步操作，有三种状态</p>
<ul>
<li><p>pending: 初始状态</p>
</li>
<li><p>fulfilled: 操作成功</p>
</li>
<li><p>rejected: 操作失败</p>
</li>
</ul>
</li>
<li><p>一旦状态改变，就不会再变，状态就凝固了</p>
</li>
</ol>
<p>列如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after resolve&#x27;</span>)</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">after resolve</span><br><span class="line">success</span><br><span class="line"><span class="title class_">Promise</span> &#123; &lt;state&gt;: <span class="string">&quot;fulfilled&quot;</span>, &lt;value&gt;: <span class="string">&quot;success&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p><code>resolve</code> 后面的语句其实是可以执行的。那么为什么 <code>reject</code> 的状态信息在下面没有接受到呢？这就是 Promise 对象的状态凝固特点。<code>new</code> 出一个 Promise 对象时，这个对象的起始状态就是 pending 状态，再根据 <code>resolve</code> 或 <code>reject</code> 返回 fulfilled 状态或 rejected 状态。</p>
<h2 id="传递回调"><a href="#传递回调" class="headerlink" title="传递回调"></a>传递回调</h2><p>Promise 对象可以调用 <code>promise.then()</code> 方法，传递 <code>resolve</code> , <code>reject</code> 方法的回调。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled)		<span class="comment">// 只用于接受 resolve 处理</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="literal">null</span>,onFulfilled)	<span class="comment">// 只用于接受 reject 处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// promise简化了对error的处理</span></span><br><span class="line">promise.<span class="title function_">then</span>(onFulfilled).<span class="title function_">catch</span>(onRejected)</span><br></pre></td></tr></table></figure>

<h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>我们来执行一段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;reject&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resultP = p.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="title class_">Promise</span> &#123; &lt;state&gt;: <span class="string">&quot;pending&quot;</span> &#125;</span><br><span class="line">reject</span><br></pre></td></tr></table></figure>

<p>js 的执行顺序就是这样，同步-&gt;异步-&gt;回调，在同步执行的时候，Promise 对象还处于 pending 的状态，也说明了这个 then 返回的是一个 Promise 对象。</p>
<p>而且必须在then里面给一个返回值，才能继续调用，否则undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resultP = p.<span class="title function_">then</span>(<span class="literal">null</span>,<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(resultP);</span></span><br><span class="line">resultP.<span class="title function_">then</span>(<span class="function"><span class="params">tmp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">error</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>将现有对象转为 Promise 对象的快捷方式。</p>
<p>传递一个普通的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;l1n6yun&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;18&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// Promise &#123; &lt;state&gt;: &quot;fulfilled&quot;, &lt;value&gt;: &#123; name: &quot;l1n6yun&quot;, age: &quot;18&quot; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="title class_">Object</span> &#123; <span class="attr">name</span>: <span class="string">&quot;l1n6yun&quot;</span>,<span class="attr">age</span>:<span class="string">&quot;18&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>如果是Promise对象呢，直接返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pp = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p);</span><br><span class="line"></span><br><span class="line">pp.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pp == p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>快速的获取一个拒绝状态的 Promise 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>,result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="title class_">Promise</span> &#123; &lt;rejected&gt; <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p><code>Promise.all()</code> 方法用于对多个 Promise 实例包装成一个新的 Promise 实例。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>) [ <span class="number">123</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;success&quot;</span> ]</span><br></pre></td></tr></table></figure>

<p>成功之后就是数组类型，但所有状态都是成功状态才可以返回数组吗。如果其中有一个对象状态为 reject 就返回 reject 的状态值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p4]).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">error</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用sleep来模仿浏览器的AJAX请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">wait</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">res</span>(wait);</span><br><span class="line">        &#125;,wait);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">    <span class="comment">//loading</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p><code>Promise.race()</code> 同样是键多个 Promise 实例包装成一个新的 Promise 实例。</p>
<p>和 all 同样接受多个对象，不同的是 race 接受的对象中，哪个对象返回的快就返回哪个对象。</p>
<p>就如race直译的赛跑这样。如果对象其中有reject状态的，必须catch捕捉到，如果返回的够快，就返回这个状态。race最终返回的只有一个值。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用sleep来模仿浏览器的AJAX请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">wait</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">res</span>(wait);</span><br><span class="line">        &#125;,wait);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">sleep</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">let</span> p0 = <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p0]).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p0,p2]).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">500</span></span><br><span class="line">error</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote>
<p>錯誤處理的聲音實在安靜,安靜得聽不見 from Nolan Lawson </p>
</blockquote>
<p>当 promise 被明确拒绝时,会发生拒绝；但是如果是在构造函数回调中引发的错误,则会隐式拒绝。</p>
<p>为什么说安静，一个例子， Promise 内部的错误外界用 try-catch 捕捉不到</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;I&#x27;m error&quot;</span>);</span><br><span class="line">        <span class="comment">// reject(new Error(&quot;I&#x27;m Error&quot;));</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果什么都没打印。<br> 但是抛出的错误可以通过catch来捕捉：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// try &#123;</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;I&#x27;m error&quot;</span>);</span><br><span class="line">        <span class="comment">// reject(new Error(&quot;I&#x27;m Error&quot;));</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// &#125;catch(e) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;catch&#x27;,e);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样就捕捉到错误。所以:</p>
<p><strong>建议</strong>在 Promise 的链的尾部必须要有个catch接着。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
        <tag>Async/Await</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python自动化神器PyAutoGUI，效率飙升不是梦！</title>
    <url>/2024/12/14/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E7%A5%9E%E5%99%A8PyAutoGUI%EF%BC%8C%E6%95%88%E7%8E%87%E9%A3%99%E5%8D%87%E4%B8%8D%E6%98%AF%E6%A2%A6%EF%BC%81/</url>
    <content><![CDATA[<h2 id="一、PyAutoGUI-是什么"><a href="#一、PyAutoGUI-是什么" class="headerlink" title="一、PyAutoGUI 是什么"></a>一、PyAutoGUI 是什么</h2><p>在 Python 的自动化领域中，PyAutoGUI 是一个非常实用的库，它允许我们通过编写代码来模拟鼠标和键盘的操作，从而实现自动化任务 。无论是重复性的日常工作，还是复杂的软件测试流程，PyAutoGUI 都能发挥重要作用，帮助我们节省时间和精力。</p>
<p>想象一下，你需要在某个软件中重复进行一系列的点击、输入操作，要是手动完成，不仅耗时，还容易出错。但有了 PyAutoGUI，你只需编写一个简单的 Python 脚本，就能让计算机自动执行这些任务。比如自动填写表格、批量处理文件、自动化测试软件功能等，这些操作都能轻松实现。</p>
<h2 id="二、PyAutoGUI-的安装"><a href="#二、PyAutoGUI-的安装" class="headerlink" title="二、PyAutoGUI 的安装"></a>二、PyAutoGUI 的安装</h2><p>在开始使用 PyAutoGUI 之前，我们需要先将其安装到我们的 Python 环境中。安装 PyAutoGUI 非常简单，使用 pip 命令即可完成 。打开你的命令行工具（如 Windows 下的命令提示符、Linux 或 macOS 下的终端），输入以下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure>

<p>如果你使用的是 Python 3.9 或更高版本，也可以使用pip3命令进行安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install pyautogui</span><br></pre></td></tr></table></figure>

<p>安装过程中，pip 会自动下载 PyAutoGUI 及其依赖项（如 Pillow 库，用于图像处理） 。等待安装完成后，你就可以在 Python 脚本中导入并使用 PyAutoGUI 了。</p>
<p>需要注意的是，在安装之前，请确保你的 Python 环境已经正确配置，并且 pip 已经安装在系统上。如果你在 Windows 操作系统上使用 Python，还要确保已将 Python 添加到系统的环境变量中，以便能够在命令提示符中运行 pip。 如果你在安装过程中遇到问题，可以参考 PyAutoGUI 的官方文档，或者在相关技术论坛上寻求帮助。</p>
<h2 id="三、PyAutoGUI-的强大功能展示"><a href="#三、PyAutoGUI-的强大功能展示" class="headerlink" title="三、PyAutoGUI 的强大功能展示"></a>三、PyAutoGUI 的强大功能展示</h2><h3 id="（一）鼠标操作"><a href="#（一）鼠标操作" class="headerlink" title="（一）鼠标操作"></a>（一）鼠标操作</h3><h4 id="1-移动鼠标"><a href="#1-移动鼠标" class="headerlink" title="1. 移动鼠标"></a>1. 移动鼠标</h4><p>在 PyAutoGUI 中，控制鼠标移动主要通过moveTo()和moveRel()函数 。moveTo()函数用于将鼠标移动到屏幕上的指定坐标位置，它的语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveTo(x, y, duration=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>其中，x和y是目标坐标的横坐标和纵坐标，duration是可选参数，表示鼠标移动到目标位置所需的时间，单位为秒。如果不设置duration，鼠标会瞬间移动到指定位置。例如，要将鼠标移动到屏幕坐标为 (500, 300) 的位置，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将鼠标移动到坐标(500, 300)，耗时2秒</span></span><br><span class="line">pyautogui.moveTo(<span class="number">500</span>, <span class="number">300</span>, duration=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<p>moveRel()函数则是相对于当前鼠标位置进行移动，语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveRel(xOffset, yOffset, duration=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>xOffset和yOffset分别是水平和垂直方向上的偏移量，正数表示向右和向下移动，负数表示向左和向上移动。同样，duration是移动所需的时间。比如，要让鼠标在当前位置的基础上向右移动 100 个像素，向下移动 50 个像素，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标在当前位置基础上，向右移动100像素，向下移动50像素，耗时1秒</span></span><br><span class="line">pyautogui.moveRel(<span class="number">100</span>, <span class="number">50</span>, duration=<span class="number">1</span>) </span><br></pre></td></tr></table></figure>

<h4 id="2-点击操作"><a href="#2-点击操作" class="headerlink" title="2. 点击操作"></a>2. 点击操作</h4><p>PyAutoGUI 提供了多个函数来实现鼠标的点击操作，包括click()、doubleClick()、rightClick()和middleClick()等 。click()函数是最常用的点击函数，它可以模拟鼠标的左键点击、右键点击以及中键点击，还可以设置点击的次数和间隔时间。语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(x=<span class="literal">None</span>, y=<span class="literal">None</span>, clicks=<span class="number">1</span>, interval=<span class="number">0.0</span>, button=<span class="string">&#x27;left&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>x和y是点击的坐标位置，如果不指定则在当前鼠标位置点击；clicks表示点击的次数，默认为 1 次；interval是每次点击之间的间隔时间，单位为秒；button指定点击的鼠标按钮，可选值为 ‘left’（左键，默认值）、’right’（右键）和 ‘middle’（中键）。例如，要在坐标 (400, 200) 处进行两次左键点击，每次点击间隔 0.5 秒，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在坐标(400, 200)处进行两次左键点击，每次间隔0.5秒</span></span><br><span class="line">pyautogui.click(<span class="number">400</span>, <span class="number">200</span>, clicks=<span class="number">2</span>, interval=<span class="number">0.5</span>) </span><br></pre></td></tr></table></figure>

<p>doubleClick()函数专门用于模拟鼠标左键的双击操作，语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.doubleClick(x=<span class="literal">None</span>, y=<span class="literal">None</span>, interval=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>

<p>x和y是双击的坐标位置，interval是两次点击之间的间隔时间。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前鼠标位置进行双击</span></span><br><span class="line">pyautogui.doubleClick() </span><br></pre></td></tr></table></figure>

<p>rightClick()和middleClick()函数分别用于模拟鼠标右键点击和中键点击，语法类似，只需在调用时传入相应的坐标位置即可。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在坐标(300, 100)处进行右键点击</span></span><br><span class="line">pyautogui.rightClick(<span class="number">300</span>, <span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在坐标(200, 150)处进行中键点击</span></span><br><span class="line">pyautogui.middleClick(<span class="number">200</span>, <span class="number">150</span>) </span><br></pre></td></tr></table></figure>

<h4 id="3-鼠标拖拽"><a href="#3-鼠标拖拽" class="headerlink" title="3. 鼠标拖拽"></a>3. 鼠标拖拽</h4><p>实现鼠标拖拽操作的函数是dragTo()和dragRel() 。dragTo()函数将鼠标从当前位置拖动到指定的坐标位置，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragTo(x, y, duration=<span class="number">0</span>, button=<span class="string">&#x27;left&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>x和y是目标坐标，duration是拖动所需的时间，button指定拖动时使用的鼠标按钮，默认为左键。比如，要将鼠标从当前位置拖动到坐标 (600, 400) 处，耗时 3 秒，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从当前位置将鼠标拖动到坐标(600, 400)，耗时3秒，使用左键</span></span><br><span class="line">pyautogui.dragTo(<span class="number">600</span>, <span class="number">400</span>, duration=<span class="number">3</span>) </span><br></pre></td></tr></table></figure>

<p>dragRel()函数则是相对于当前鼠标位置进行拖动，语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.dragRel(xOffset, yOffset, duration=<span class="number">0</span>, button=<span class="string">&#x27;left&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>xOffset和yOffset是水平和垂直方向上的偏移量，duration是拖动时间，button是鼠标按钮。例如，要让鼠标在当前位置的基础上，向右拖动 80 个像素，向上拖动 30 个像素，耗时 2 秒，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标在当前位置基础上，向右拖动80像素，向上拖动30像素，耗时2秒，使用左键</span></span><br><span class="line">pyautogui.dragRel(<span class="number">80</span>, -<span class="number">30</span>, duration=<span class="number">2</span>) </span><br></pre></td></tr></table></figure>

<h4 id="4-鼠标滚动"><a href="#4-鼠标滚动" class="headerlink" title="4. 鼠标滚动"></a>4. 鼠标滚动</h4><p>控制鼠标滚轮滚动的函数是scroll()，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.scroll(clicks)</span><br></pre></td></tr></table></figure>

<p>clicks是一个整数参数，表示滚动的距离，正数表示向上滚动，负数表示向下滚动。例如，要让鼠标滚轮向上滚动 5 个单位，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标滚轮向上滚动5个单位</span></span><br><span class="line">pyautogui.scroll(<span class="number">5</span>) </span><br></pre></td></tr></table></figure>

<p>如果要向下滚动 10 个单位，则可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标滚轮向下滚动10个单位</span></span><br><span class="line">pyautogui.scroll(-<span class="number">10</span>) </span><br></pre></td></tr></table></figure>

<h3 id="（二）键盘操作"><a href="#（二）键盘操作" class="headerlink" title="（二）键盘操作"></a>（二）键盘操作</h3><h4 id="1-按键模拟"><a href="#1-按键模拟" class="headerlink" title="1. 按键模拟"></a>1. 按键模拟</h4><p>在 PyAutoGUI 中，模拟按键按下和释放主要使用press()、keyDown()和keyUp()函数 。press()函数用于模拟按下并释放一个按键，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.press(key)</span><br></pre></td></tr></table></figure>

<p>key是要按下的按键名称，可以是单个字符，如 ‘a’、’b’，也可以是特殊按键，如 ‘enter’（回车键）、’esc’（退出键）等。例如，要模拟按下回车键，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟按下回车键</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;enter&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>keyDown()函数用于模拟按下一个按键，而不释放，语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.keyDown(key)</span><br></pre></td></tr></table></figure>

<p>keyUp()函数则用于模拟释放一个按键，语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.keyUp(key)</span><br></pre></td></tr></table></figure>

<p>这两个函数通常一起使用，以实现对按键的精确控制。例如，要模拟按住 Shift 键的同时按下 ‘a’ 键，然后释放 Shift 键，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按下Shift键</span></span><br><span class="line">pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 按下&#x27;a&#x27;键</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放Shift键</span></span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h4 id="2-文本输入"><a href="#2-文本输入" class="headerlink" title="2. 文本输入"></a>2. 文本输入</h4><p>实现自动化文本输入的函数是typewrite()，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite(message, interval=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure>

<p>message是要输入的文本内容，可以是字符串；interval是可选参数，表示输入每个字符之间的时间间隔，单位为秒。例如，要在当前光标位置输入 “Hello, World!”，每个字符之间间隔 0.2 秒，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入&quot;Hello, World!&quot;，每个字符间隔0.2秒</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;Hello, World!&#x27;</span>, interval=<span class="number">0.2</span>) </span><br></pre></td></tr></table></figure>

<p>如果要输入包含特殊按键的组合，比如先按 ‘enter’ 键，再输入 “Python”，可以将按键和文本内容放在一个列表中传递给typewrite()函数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先按&#x27;enter&#x27;键，再输入&quot;Python&quot;</span></span><br><span class="line">pyautogui.typewrite([<span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]) </span><br></pre></td></tr></table></figure>

<h4 id="3-组合键操作"><a href="#3-组合键操作" class="headerlink" title="3. 组合键操作"></a>3. 组合键操作</h4><p>模拟组合键操作可以使用hotkey()函数，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.hotkey(*keys)</span><br></pre></td></tr></table></figure>

<p>keys是要组合的按键名称，可以传递多个参数。例如，要模拟按下 Ctrl+C 组合键（复制操作），可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟按下Ctrl+C组合键</span></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>同样，要模拟按下 Alt+Tab 组合键（切换应用程序），可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟按下Alt+Tab组合键</span></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h3 id="（三）屏幕操作"><a href="#（三）屏幕操作" class="headerlink" title="（三）屏幕操作"></a>（三）屏幕操作</h3><h4 id="1-屏幕截图"><a href="#1-屏幕截图" class="headerlink" title="1. 屏幕截图"></a>1. 屏幕截图</h4><p>获取屏幕截图的函数是screenshot()，它可以返回一个表示屏幕截图的 Pillow 图像对象 。语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = pyautogui.screenshot()</span><br></pre></td></tr></table></figure>

<p>im就是返回的图像对象，你可以对其进行保存、分析等操作。例如，要将屏幕截图保存为名为 “screenshot.png” 的文件，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕截图并保存为&quot;screenshot.png&quot;</span></span><br><span class="line">im = pyautogui.screenshot()im.save(<span class="string">&#x27;screenshot.png&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>如果你只想截取屏幕的某个区域，可以使用region参数指定截取区域的左上角坐标和宽度、高度，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = pyautogui.screenshot(region=(left, top, width, height))</span><br></pre></td></tr></table></figure>

<p>left和top是截取区域左上角的横坐标和纵坐标，width和height是截取区域的宽度和高度。例如，要截取屏幕左上角坐标为 (100, 100)，宽度为 200，高度为 150 的区域，可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取指定区域的屏幕截图</span></span><br><span class="line">im = pyautogui.screenshot(region=(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">150</span>))im.save(<span class="string">&#x27;partial_screenshot.png&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h4 id="2-图像识别定位"><a href="#2-图像识别定位" class="headerlink" title="2. 图像识别定位"></a>2. 图像识别定位</h4><p>在屏幕上查找指定图像位置的函数主要有locateOnScreen()和locateCenterOnScreen() 。locateOnScreen()函数用于在屏幕上查找指定图像的位置，并返回其边界框（bounding box）的坐标，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">location = pyautogui.locateOnScreen(image, grayscale=<span class="literal">False</span>, confidence=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>image是要查找的图像文件名或 Pillow 图像对象；grayscale是可选参数，设置为True时会以灰度模式查找图像，这样可以提高查找速度，但可能会降低准确性；confidence是可选参数，表示匹配的置信度，取值范围为 0 到 1，值越高表示匹配要求越严格，默认值为None，即不进行置信度匹配。location返回一个包含边界框坐标的四元组(left, top, width, height)，如果未找到图像，则返回None。例如，要在屏幕上查找名为 “button.png” 的图像位置，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在屏幕上查找&quot;button.png&quot;的位置</span></span><br><span class="line">location = pyautogui.locateOnScreen(<span class="string">&#x27;button.png&#x27;</span>)</span><br><span class="line">	<span class="keyword">if</span> location:    left, top, width, height = location</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">f&#x27;找到图像，位置为：(<span class="subst">&#123;left&#125;</span>, <span class="subst">&#123;top&#125;</span>)，宽度为：<span class="subst">&#123;width&#125;</span>，高度为：<span class="subst">&#123;height&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&#x27;未找到图像&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>locateCenterOnScreen()函数则是在屏幕上查找指定图像的位置，并返回其中心点的坐标，语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">center = pyautogui.locateCenterOnScreen(image, grayscale=<span class="literal">False</span>, confidence=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>center返回一个包含中心点坐标的二元组(x, y)，如果未找到图像，则返回None。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="comment"># 在屏幕上查找&quot;icon.png&quot;的中心点位置</span></span><br><span class="line">center = pyautogui.locateCenterOnScreen(<span class="string">&#x27;icon.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> center:</span><br><span class="line">	x, y = center</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;找到图像，中心点位置为：(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;未找到图像&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这些屏幕操作函数结合鼠标和键盘操作函数，可以实现更加复杂的自动化任务，比如根据屏幕上的图像位置进行点击、输入等操作。</p>
<h2 id="四、实战应用案例"><a href="#四、实战应用案例" class="headerlink" title="四、实战应用案例"></a>四、实战应用案例</h2><p>（一）自动化测试</p>
<p>假设我们正在开发一款简单的图形界面应用程序，其中有一个登录窗口，包含用户名输入框、密码输入框和登录按钮 。我们可以使用 PyAutoGUI 编写自动化测试脚本来模拟用户登录操作，检查应用程序的登录功能是否正常。以下是一个简单的示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟打开应用程序（这里假设应用程序图标在屏幕上的位置已知）</span></span><br><span class="line">app_icon_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;app_icon.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> app_icon_location:</span><br><span class="line">    pyautogui.doubleClick(app_icon_location.x, app_icon_location.y)</span><br><span class="line">    time.sleep(<span class="number">3</span>)  <span class="comment"># 等待应用程序打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟输入用户名和密码</span></span><br><span class="line">username_input_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;username_input.png&#x27;</span>)</span><br><span class="line">password_input_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;password_input.png&#x27;</span>)</span><br><span class="line">login_button_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;login_button.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> username_input_location <span class="keyword">and</span> password_input_location <span class="keyword">and</span> login_button_location:</span><br><span class="line">    pyautogui.click(username_input_location.x, username_input_location.y)</span><br><span class="line">    pyautogui.typewrite(<span class="string">&#x27;test_user&#x27;</span>)</span><br><span class="line">    pyautogui.click(password_input_location.x, password_input_location.y)</span><br><span class="line">    pyautogui.typewrite(<span class="string">&#x27;test_password&#x27;</span>)</span><br><span class="line">    pyautogui.click(login_button_location.x, login_button_location.y)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 等待登录结果显示</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查登录是否成功（这里假设登录成功后会出现一个特定的提示框）</span></span><br><span class="line">    success_dialog_location = pyautogui.locateOnScreen(<span class="string">&#x27;success_dialog.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> success_dialog_location:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录测试成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录测试失败&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法找到界面元素，测试终止&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先通过locateCenterOnScreen函数查找应用程序图标、用户名输入框、密码输入框和登录按钮的位置，然后使用click和typewrite函数模拟用户的点击和输入操作 。最后，通过查找登录成功后的提示框来判断登录是否成功。这样，我们就可以自动化地对应用程序的登录功能进行多次测试，大大提高了测试效率和准确性。</p>
<h3 id="（二）数据采集与处理"><a href="#（二）数据采集与处理" class="headerlink" title="（二）数据采集与处理"></a>（二）数据采集与处理</h3><p>比如，我们需要从一个电商网站上采集商品信息，包括商品名称、价格、销量等 。我们可以使用 PyAutoGUI 结合一些图像识别和文本处理技术来实现自动化采集。以下是一个简单的思路和示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开浏览器并访问电商网站</span></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;win&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># 打开运行对话框</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;chrome&#x27;</span>)</span><br><span class="line">pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;https://example_ecommerce.com&#x27;</span>)</span><br><span class="line">pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)  <span class="comment"># 等待页面加载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟搜索商品</span></span><br><span class="line">search_box_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;search_box.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> search_box_location:</span><br><span class="line">    pyautogui.click(search_box_location.x, search_box_location.y)</span><br><span class="line">    pyautogui.typewrite(<span class="string">&#x27;手机&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 等待搜索结果页面加载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采集商品信息</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># 假设采集3页商品信息</span></span><br><span class="line">    <span class="comment"># 截取当前页面商品信息区域的屏幕截图</span></span><br><span class="line">    screenshot = pyautogui.screenshot(region=(<span class="number">100</span>, <span class="number">200</span>, <span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    screenshot.save(<span class="string">&#x27;product_info.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用OCR识别截图中的文本信息</span></span><br><span class="line">    text = pytesseract.image_to_string(Image.<span class="built_in">open</span>(<span class="string">&#x27;product_info.png&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理识别出的文本，提取商品名称、价格、销量等信息</span></span><br><span class="line">    <span class="comment"># 这里只是简单示例，实际需要更复杂的文本处理逻辑</span></span><br><span class="line">    lines = text.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;价格&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            price = line.split(<span class="string">&#x27;：&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;商品价格：<span class="subst">&#123;price&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;销量&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            sales = line.split(<span class="string">&#x27;：&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;商品销量：<span class="subst">&#123;sales&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟点击下一页按钮</span></span><br><span class="line">    next_page_button_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;next_page_button.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> next_page_button_location:</span><br><span class="line">        pyautogui.click(next_page_button_location.x, next_page_button_location.y)</span><br><span class="line">        time.sleep(<span class="number">5</span>)  <span class="comment"># 等待下一页加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先打开浏览器并访问电商网站，然后模拟搜索商品 。接着，通过截取屏幕上商品信息区域的截图，并使用 OCR 技术（这里使用pytesseract库）识别截图中的文本，从而提取出商品的相关信息。最后，通过模拟点击下一页按钮，实现多页商品信息的采集。</p>
<h3 id="（三）软件演示与教程录制"><a href="#（三）软件演示与教程录制" class="headerlink" title="（三）软件演示与教程录制"></a>（三）软件演示与教程录制</h3><p>假设我们要制作一个关于某个绘图软件使用教程的视频，我们可以使用 PyAutoGUI 自动化演示软件的各种功能，并配合录屏软件进行录制 。以下是一个简单的示例代码，展示如何使用 PyAutoGUI 打开绘图软件并进行一些基本操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟打开绘图软件（假设软件图标在屏幕上的位置已知）</span></span><br><span class="line">paint_icon_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;paint_icon.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> paint_icon_location:</span><br><span class="line">    pyautogui.doubleClick(paint_icon_location.x, paint_icon_location.y)</span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 等待软件打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示绘制一个矩形</span></span><br><span class="line">rectangle_tool_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;rectangle_tool.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> rectangle_tool_location:</span><br><span class="line">    pyautogui.click(rectangle_tool_location.x, rectangle_tool_location.y)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    start_x, start_y = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">    end_x, end_y = <span class="number">300</span>, <span class="number">300</span></span><br><span class="line">    pyautogui.moveTo(start_x, start_y)</span><br><span class="line">    pyautogui.mouseDown()</span><br><span class="line">    pyautogui.dragTo(end_x, end_y)</span><br><span class="line">    pyautogui.mouseUp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示保存绘制的图形</span></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>,<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">file_name_input_location = pyautogui.locateCenterOnScreen(<span class="string">&#x27;file_name_input.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> file_name_input_location:</span><br><span class="line">    pyautogui.click(file_name_input_location.x, file_name_input_location.y)</span><br><span class="line">    pyautogui.typewrite(<span class="string">&#x27;drawing.png&#x27;</span>)</span><br><span class="line">    pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先通过图像识别找到绘图软件的图标并打开软件 。然后，找到矩形绘制工具并使用鼠标操作绘制一个矩形。最后，演示保存绘制图形的操作。在运行这段代码时，同时开启录屏软件，就可以录制出一个完整的软件使用教程视频，大大提高了制作教程的效率和准确性。</p>
<h3 id="（四）游戏辅助工具"><a href="#（四）游戏辅助工具" class="headerlink" title="（四）游戏辅助工具"></a>（四）游戏辅助工具</h3><p>以简单的扫雷游戏为例，我们可以使用 PyAutoGUI 制作一个辅助工具，帮助玩家自动识别雷区和点击安全区域 。以下是一个简单的实现思路和示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义雷区格子的大小和初始位置</span></span><br><span class="line">cell_size = <span class="number">18</span></span><br><span class="line">left, top = <span class="number">0</span>, <span class="number">0</span>  <span class="comment"># 假设雷区左上角坐标，实际需要根据屏幕截图识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数字图片模板，用于识别雷区数字</span></span><br><span class="line">number_templates = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">    template = cv2.imread(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.png&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    number_templates.append(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recognize_number</span>(<span class="params">image</span>):</span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    best_match = <span class="literal">None</span></span><br><span class="line">    best_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, template <span class="keyword">in</span> <span class="built_in">enumerate</span>(number_templates):</span><br><span class="line">        result = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)</span><br><span class="line">        <span class="keyword">if</span> max_val &gt; best_score:</span><br><span class="line">            best_score = max_val</span><br><span class="line">            best_match = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> best_match</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">analyze_minefield</span>():</span><br><span class="line">    screenshot = pyautogui.screenshot(region=(left, top, cell_size * <span class="number">30</span>, cell_size * <span class="number">16</span>))  <span class="comment"># 假设雷区大小为30x16</span></span><br><span class="line">    screenshot = cv2.cvtColor(numpy.array(screenshot), cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line">            cell = screenshot[y * cell_size:(y + <span class="number">1</span>) * cell_size, x * cell_size:(x + <span class="number">1</span>) * cell_size]</span><br><span class="line">            number = recognize_number(cell)</span><br><span class="line">            <span class="keyword">if</span> number:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;坐标(<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)处的数字为：<span class="subst">&#123;number&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始分析雷区</span></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 等待游戏界面加载完成</span></span><br><span class="line">analyze_minefield()</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们首先定义了雷区格子的大小和初始位置，然后加载数字图片模板用于识别雷区中的数字 。recognize_number函数通过模板匹配的方式识别每个格子中的数字，analyze_minefield函数则对整个雷区进行截图并分析每个格子的数字。通过这种方式，我们可以根据识别出的数字来判断哪些区域是安全的，哪些区域可能有雷，从而实现简单的扫雷游戏辅助功能。 请注意，在实际游戏中使用辅助工具可能涉及违反游戏规则的问题，仅用于技术学习和研究目的。</p>
<h2 id="五、使用注意事项与技巧"><a href="#五、使用注意事项与技巧" class="headerlink" title="五、使用注意事项与技巧"></a>五、使用注意事项与技巧</h2><p>（一）防故障机制</p>
<p>PyAutoGUI 提供了自动防故障功能，默认情况下是开启的 。当鼠标移动到屏幕的左上角（坐标为 (0, 0)）时，会触发FailSafeException异常，程序会停止执行，这可以防止程序出现异常情况时无法停止，导致不可预期的后果 。如果你确定自己的程序不会出现问题，或者在调试过程中不想被这个机制中断，可以通过以下方式禁用它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用自动防故障功能</span></span><br><span class="line">pyautogui.FAILSAFE = <span class="literal">False</span> </span><br></pre></td></tr></table></figure>

<p>不过，禁用故障保护可能会带来风险，因此请谨慎操作。 另外，为了避免操作速度过快导致程序出错或错过某些界面元素的响应，你可以设置停顿功能 。通过设置pyautogui.PAUSE变量，可以让每个 PyAutoGUI 函数调用在执行动作后暂停指定的秒数。例如，设置暂停时间为 1 秒：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每次操作后暂停1秒</span></span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<p>这样，在执行诸如鼠标移动、点击、键盘输入等操作后，程序都会暂停 1 秒，给系统和其他应用程序足够的时间来响应。</p>
<h3 id="（二）坐标定位技巧"><a href="#（二）坐标定位技巧" class="headerlink" title="（二）坐标定位技巧"></a>（二）坐标定位技巧</h3><p>在使用 PyAutoGUI 进行鼠标操作时，准确获取屏幕坐标非常关键 。你可以使用pyautogui.position()函数来获取当前鼠标的坐标位置，返回一个包含横坐标和纵坐标的元组 。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前鼠标坐标</span></span><br><span class="line">x, y = pyautogui.position()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;当前鼠标坐标: (<span class="subst">&#123;x&#125;</span>, <span class="subst">&#123;y&#125;</span>)&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>另外，在进行图像识别定位时，为了提高定位的准确性和稳定性，可以设置locateOnScreen()函数的confidence参数 。该参数表示匹配的置信度，取值范围为 0 到 1，值越高表示匹配要求越严格 。例如，将置信度设置为 0.8：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在屏幕上查找图像，置信度为0.8</span></span><br><span class="line">location = pyautogui.locateOnScreen(<span class="string">&#x27;image.png&#x27;</span>, confidence=<span class="number">0.8</span>)</span><br><span class="line"><span class="keyword">if</span> location:</span><br><span class="line">	left, top, width, height = location</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;找到图像，位置为：(<span class="subst">&#123;left&#125;</span>, <span class="subst">&#123;top&#125;</span>)，宽度为：<span class="subst">&#123;width&#125;</span>，高度为：<span class="subst">&#123;height&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;未找到图像&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当在不同分辨率的屏幕上运行自动化脚本时，由于相同的像素坐标在不同分辨率下代表的实际位置可能不同，会导致坐标不准确 。为了解决这个问题，可以使用pyautogui.size()函数获取当前屏幕的分辨率，并根据分辨率调整坐标 。例如，假设你希望在屏幕中心进行点击操作，无论屏幕分辨率如何变化，都可以这样实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取屏幕分辨率</span></span><br><span class="line">screen_width, screen_height = pyautogui.size()</span><br><span class="line"><span class="comment"># 计算屏幕中心坐标</span></span><br><span class="line">center_x = screen_width // <span class="number">2</span></span><br><span class="line">center_y = screen_height // <span class="number">2</span></span><br><span class="line"><span class="comment"># 移动鼠标到屏幕中心并点击</span></span><br><span class="line">pyautogui.click(center_x, center_y) </span><br></pre></td></tr></table></figure>

<h3 id="（三）异常处理"><a href="#（三）异常处理" class="headerlink" title="（三）异常处理"></a>（三）异常处理</h3><p>在使用 PyAutoGUI 时，可能会遇到各种异常情况 。除了前面提到的FailSafeException异常外，还可能遇到ImageNotFoundException异常，当使用locateOnScreen()等图像识别函数找不到指定图像时会抛出该异常 。你可以使用try - except语句来捕获并处理这些异常，使程序更加健壮 。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 在屏幕上查找图像</span></span><br><span class="line">    location = pyautogui.locateOnScreen(<span class="string">&#x27;icon.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> location:</span><br><span class="line">        x, y = pyautogui.center(location)</span><br><span class="line">        pyautogui.click(x, y)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未找到图像&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> pyautogui.ImageNotFoundException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;在屏幕上未找到指定图像&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> pyautogui.FailSafeException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;触发自动防故障机制，程序停止&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>另外，在进行键盘输入操作时，如果目标窗口没有获得焦点，可能会导致输入内容没有出现在预期的位置 。为了避免这种情况，可以在执行键盘输入操作前，使用pyautogui.click()函数先将鼠标点击到目标窗口，使其获得焦点 。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设目标窗口的位置已知</span></span><br><span class="line">window_x, window_y = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line"><span class="comment"># 点击目标窗口，使其获得焦点</span></span><br><span class="line">pyautogui.click(window_x, window_y)</span><br><span class="line"><span class="comment"># 进行键盘输入操作</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;Hello, World!&#x27;</span>) </span><br></pre></td></tr></table></figure>

<p>通过合理运用这些使用注意事项与技巧，可以让你在使用 PyAutoGUI 进行自动化任务时更加得心应手，提高脚本的稳定性和可靠性 。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>GUI自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>RDPWrap：远程桌面优化神器的技术解析与应用指南</title>
    <url>/2024/06/29/RDPWrap%EF%BC%9A%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>是一个开源项目，用于破解和优化Windows系统上的Remote Desktop Protocol（远程桌面协议）。它允许你在没有官方许可的情况下，实现多用户的并发远程访问，这对于IT管理员、开发者或者需要频繁远程控制电脑的用户来说，是一个非常实用的工具。</p>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>RDPWrap的主要功能是绕过Windows系统的限制，使得单个安装了RDP服务的计算机可以同时接受多个远程桌面连接，而无需购买额外的授权。该项目由Stas’M Sajewicz创建并维护，社区也在持续贡献和支持。</p>
<h3 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h3><p>RDPWrap的工作原理是通过对Windows的Remote Desktop Services（RDS）服务进行钩子处理，改变其内部的行为模式。它提供了一个配置工具，用于检测当前系统的支持情况，并更新本地的bypass.dll文件以启用多会话模式。此外，RDPWrap还包含一个实时更新的服务端口数据库，帮助用户跟踪最新的系统版本兼容性。</p>
<p>需要注意的是，由于涉及到系统底层操作，RDPWrap可能需要管理员权限运行，且在安装和配置过程中应谨慎操作，避免对系统稳定性产生影响。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>节省成本 - 对于拥有大量Windows设备但预算有限的企业，RDPWrap可以帮助他们避免购买昂贵的多用户许可证。 </li>
<li>远程教育与培训 - 教师或教练可以同时监控多个学生的学习进度，提供即时反馈。 </li>
<li>多用户共享 - 在家庭环境中，家庭成员可以在各自的设备上同时远程访问一台高性能主机进行游戏或计算任务。 </li>
<li>服务器管理 - IT专业人员可以更方便地同时管理多台服务器，无需来回切换登录。</li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>开源免费 - 开源意味着代码公开，用户可以自由查看，学习甚至改进。</li>
<li>跨平台支持 - 支持多种Windows操作系统版本，从XP到最新的Windows 10。</li>
<li>简单易用 - 提供直观的配置工具，即使是对技术不太了解的用户也能轻松设置。</li>
<li>持续更新 - 社区活跃，不断跟进新的Windows更新，确保兼容性。</li>
</ul>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>在使用RDPWrap之前，请确保已理解其工作方式并做好数据备份，因为任何对系统核心组件的操作都可能存在风险。另外，尊重他人的版权，合法使用远程桌面服务，切勿用于非法目的。</p>
<p>总结来说，RDPWrap是一个强大且实用的工具，尤其适合需要高效远程管理Windows系统的用户。只要合理使用，它就能为你带来极大的便利。希望这篇介绍能够帮助你更好地理解和利用RDPWrap，享受更灵活的远程桌面体验。</p>
<p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0YXNjb3JwL3JkcHdyYXA=">https://github.com/stascorp/rdpwrap<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>RDP</tag>
        <tag>开源</tag>
        <tag>逆向工程</tag>
        <tag>系统编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell和Perl脚本加密与编译技术详解</title>
    <url>/2024/11/16/Shell%E5%92%8CPerl%E8%84%9A%E6%9C%AC%E5%8A%A0%E5%AF%86%E4%B8%8E%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>在数字化时代，脚本编程在软件开发和自动化任务中扮演着至关重要的角色。然而，未加密的脚本代码面临着潜在的盗用和篡改风险，甚至可能导致敏感信息泄露。本文将探讨多种有效的脚本加密与编译技术，涵盖了Shell和Perl脚本的保护方法，旨在帮助开发者保护自己的代码和敏感信息。</p>
<h4 id="Shell脚本加密与编译方法"><a href="#Shell脚本加密与编译方法" class="headerlink" title="Shell脚本加密与编译方法"></a>Shell脚本加密与编译方法</h4><p><strong>使用shc工具</strong></p>
<p>SHC（Shell Script Compiler）是一个开源工具，用于将Shell脚本编译成可执行文件。它将代码转换为C语言程序，然后再编译成二进制文件，以保护源代码。SHC的主要目的是提供一个简单的方式来保护Shell脚本代码，防止未经授权的访问和篡改。</p>
<ul>
<li><strong>SHC的功能</strong>：SHC将Shell脚本编译成二进制可执行文件，隐藏脚本的实现细节，并在编译过程中对脚本内容进行预处理和加密。</li>
</ul>
<p><strong>安装SHC</strong></p>
<p>通过包管理器安装SHC（推荐）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian：</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install shc</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install epel-release</span><br><span class="line"><span class="built_in">sudo</span> yum install shc</span><br></pre></td></tr></table></figure>

<p>从源代码编译安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装必要的编译工具和库。包括 `gcc`（GNU C编译器）和 `make` 工具：</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 SHC 的 GitHub 仓库，下载最新的源代码压缩包，或通过 `git` 克隆仓库。</span></span><br><span class="line">git clone https://github.com/neurobin/shc.git</span><br><span class="line">cd shc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 SHC：</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 SHC，将编译的二进制文件移动到 `/usr/local/bin` 目录（或其他合适的目录）：</span></span><br><span class="line">sudo cp shc /usr/local/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 SHC 是否安装成功：</span></span><br><span class="line">shc -h</span><br></pre></td></tr></table></figure>

<p><strong>编译示例</strong></p>
<p>脚本（hello.sh）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 检查是否为root用户</span><br><span class="line">if [ &quot;$EUID&quot; -ne 0 ]; then</span><br><span class="line">    echo &quot;请以管理员权限运行此脚本（使用sudo）!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 显示系统信息</span><br><span class="line">echo &quot;-----------------------------&quot;</span><br><span class="line">echo &quot;系统信息&quot;</span><br><span class="line">echo &quot;-----------------------------&quot;</span><br><span class="line">echo &quot;当前用户: $(whoami)&quot;</span><br><span class="line">echo &quot;系统时间: $(date)&quot;</span><br><span class="line">echo &quot;操作系统版本: $(lsb_release -d | cut -f2)&quot;</span><br><span class="line"></span><br><span class="line"># 列出当前目录文件</span><br><span class="line">echo &quot;-----------------------------&quot;</span><br><span class="line">echo &quot;当前目录中的文件:&quot;</span><br><span class="line">ls -1</span><br><span class="line"></span><br><span class="line"># 用户选择文件</span><br><span class="line">read -p &quot;请选择一个文件以查看其内容 (输入文件名): &quot; file_name</span><br><span class="line"></span><br><span class="line"># 检查文件是否存在</span><br><span class="line">if [ -f &quot;$file_name&quot; ]; then</span><br><span class="line">    echo &quot;-----------------------------&quot;</span><br><span class="line">    echo &quot;文件内容: $file_name&quot;</span><br><span class="line">    cat &quot;$file_name&quot;</span><br><span class="line"></span><br><span class="line">    # 将输出重定向到日志文件</span><br><span class="line">    echo &quot;日志保存到 log.txt&quot;</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;文件内容: $file_name&quot;</span><br><span class="line">        cat &quot;$file_name&quot;</span><br><span class="line">    &#125; &gt; log.txt</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">    echo &quot;文件不存在!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>编译脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shc -f hello.sh</span><br></pre></td></tr></table></figure>

<p>将生成两个文件：hello.sh.x（可执行文件）和hello.sh.x.c（C源文件）。</p>
<p>执行编译文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./hello.sh.x</span><br></pre></td></tr></table></figure>

<p><strong>加密与编码</strong></p>
<p>除了使用shc工具，还可以使用base64编码或openssl加密来增加脚本的安全性。</p>
<p>使用base64编码将脚本内容进行base64编码，并在运行时解码执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="built_in">base64</span> hello.sh &gt; hello_base64.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码并执行</span></span><br><span class="line"><span class="built_in">base64</span> -d hello_base64.txt | bash</span><br></pre></td></tr></table></figure>

<p>使用openssl工具对脚本进行对称或非对称加密，然后在运行时解密。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密</span></span><br><span class="line">openssl aes-256-cbc -salt -<span class="keyword">in</span> hello.sh -out hello.sh.enc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密并执行</span></span><br><span class="line">openssl aes-256-cbc -d -<span class="keyword">in</span> hello.sh.enc | bash</span><br></pre></td></tr></table></figure>

<h4 id="Perl脚本加密与编译方法"><a href="#Perl脚本加密与编译方法" class="headerlink" title="Perl脚本加密与编译方法"></a>Perl脚本加密与编译方法</h4><p><strong>PAR::Packer工具</strong></p>
<p>PAR::Packer是一个Perl模块，用于将Perl脚本及其所有依赖打包成可执行的二进制文件。它分析Perl脚本，自动识别所用到的模块，并将这些模块打包在内，确保在目标环境中运行时可以找到。</p>
<ul>
<li><strong>安装并使用</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以使用 CPAN 安装：</span></span><br><span class="line">cpan PAR::Packer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包Perl脚本</span></span><br><span class="line">pp -o hello.pxf hello.pl</span><br></pre></td></tr></table></figure>

<p><strong>perlcc编译器</strong></p>
<p>perlcc是Perl语言的一个编译器，它可以将Perl脚本编译成C代码，然后进一步编译成可执行的二进制文件。然而，perlcc可能无法处理某些复杂的Perl特性或者特定模块，导致编译失败。</p>
<ul>
<li><strong>编译过程示例</strong>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perlcc -o task_manager task_manager.pl</span><br></pre></td></tr></table></figure>

<p>使用-d选项可以在编译时显示调试信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perlcc -d -o hello hello.pl</span><br></pre></td></tr></table></figure>

<p>查看perlcc的更多选项和功能，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perlcc -h</span><br></pre></td></tr></table></figure>

<p><strong>加密与解密技术</strong></p>
<p>使用Crypt::CBC模块可以实现对数据的加密和解密。Crypt::CBC提供了基于块密码的加密和模式，常用的加密算法包括AES、DES等。</p>
<ul>
<li><strong>安装Crypt::CBC</strong>：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpan Crypt::CBC</span><br></pre></td></tr></table></figure>

<p>使用Crypt::CBC模块加密一个Perl脚本，涉及到定义一个加密的过程并将脚本本身保存为一个密文，然后可以在运行时解密并执行。这种做法只是为了保护源代码，这并不是一种绝对的安全措施，因为熟悉Perl的人仍然可以通过逆向工程等手段获取原始代码。</p>
<p>以下是使用Crypt::CBC加密和解密Perl脚本的示例代码：</p>
<p>加密脚本（encrypt_script.pl）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/perl</span></span><br><span class="line">use strict;</span><br><span class="line">use warnings;</span><br><span class="line">use Crypt::CBC;</span><br><span class="line">use MIME::Base64;</span><br><span class="line">use File::Slurp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置加密参数</span></span><br><span class="line">my $key = &#x27;*********&#x27;;  # 选择一个合适的密钥</span><br><span class="line">my $cipher = Crypt::CBC-&gt;new(</span><br><span class="line">    -key    =&gt; $key,</span><br><span class="line">    -cipher =&gt; &#x27;Crypt::AES&#x27;,</span><br><span class="line">);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取原始脚本</span></span><br><span class="line">my $script = read_file(&#x27;task_manager.pl&#x27;);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密脚本</span></span><br><span class="line">my $ciphertext = $cipher-&gt;encrypt_hex($script);</span><br><span class="line">write_file(&#x27;hello_encrypted.pl&#x27;, $ciphertext);</span><br><span class="line"></span><br><span class="line">print &quot;Script encrypted and saved to hello_encrypted.pl\n&quot;;</span><br></pre></td></tr></table></figure>

<p>解密并执行脚本（run_encrypted.pl）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/perl</span></span><br><span class="line">use strict;</span><br><span class="line">use warnings;</span><br><span class="line">use Crypt::CBC;</span><br><span class="line">use MIME::Base64;</span><br><span class="line">use File::Slurp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置加密参数</span></span><br><span class="line">my $key = &#x27;******&#x27;;  # 确保与加密时的密钥一致</span><br><span class="line">my $cipher = Crypt::CBC-&gt;new(</span><br><span class="line">    -key    =&gt; $key,</span><br><span class="line">    -cipher =&gt; &#x27;Crypt::AES&#x27;,</span><br><span class="line">);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取加密脚本</span></span><br><span class="line">my $ciphertext = read_file(&#x27;hello_encrypted.pl&#x27;);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解密</span></span><br><span class="line">my $decrypted = $cipher-&gt;decrypt_hex($ciphertext);</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行解密后的脚本</span></span><br><span class="line">eval $decrypted;</span><br><span class="line">if ($@) &#123;</span><br><span class="line">    die &quot;Error executing decrypted script: $@&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行解密并执行的脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">perl run_encrypted.pl</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>脚本加密和编译技术为确保源代码安全性提供了有效的手段。本文详细介绍了使用流行工具和方法对Shell脚本和Perl脚本进行加密和编译的步骤，旨在帮助开发者保护自己的代码和敏感信息。</p>
]]></content>
      <tags>
        <tag>加密技术</tag>
        <tag>Shell脚本</tag>
        <tag>Perl编程</tag>
        <tag>脚本编译</tag>
        <tag>软件安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Standard Markdown</title>
    <url>/2016/10/21/Standard%20Markdown/</url>
    <content><![CDATA[<h1 id="Standard-Markdown"><a href="#Standard-Markdown" class="headerlink" title="Standard Markdown"></a>Standard Markdown</h1><h2 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*emphasize*   **strong**</span><br><span class="line">_emphasize_   __strong__</span><br></pre></td></tr></table></figure>
<h2 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h2><p>Inline:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">An [example](http://url.com/ &quot;Title&quot;)</span><br></pre></td></tr></table></figure>
<p>Reference-style labels (titles are optional):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">An [example][id]. Then, anywhere</span><br><span class="line">else in the doc, define the link:</span><br><span class="line"></span><br><span class="line">  [id]: http://example.com/  &quot;Title&quot;</span><br></pre></td></tr></table></figure>
<p>Email:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">An email &lt;example@example.com&gt; link.</span><br></pre></td></tr></table></figure>

<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>Inline (titles are optional):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt text](/path/img.jpg &quot;Title&quot;)</span><br></pre></td></tr></table></figure>
<p>Reference-style:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt text][id]</span><br><span class="line"></span><br><span class="line">[id]: /url/to/img.jpg &quot;Title&quot;</span><br></pre></td></tr></table></figure>
<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Setext-style:</span><br><span class="line"></span><br><span class="line">Header 1</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">Header 2</span><br><span class="line">--------</span><br></pre></td></tr></table></figure>
<p>atx-style (closing #’s are optional):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Header 1 #</span><br><span class="line"></span><br><span class="line">## Header 2 ##</span><br><span class="line"></span><br><span class="line">###### Header 6</span><br></pre></td></tr></table></figure>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>Ordered, without paragraphs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Foo</span><br><span class="line">2.  Bar</span><br></pre></td></tr></table></figure>
<p>Unordered, with paragraphs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   A list item.</span><br><span class="line"></span><br><span class="line">    With multiple paragraphs.</span><br><span class="line"></span><br><span class="line">*   Bar</span><br></pre></td></tr></table></figure>
<p>You can nest them:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Abacus</span><br><span class="line">    * answer</span><br><span class="line">*   Bubbles</span><br><span class="line">    1.  bunk</span><br><span class="line">    2.  bupkis</span><br><span class="line">        * BELITTLER</span><br><span class="line">    3. burper</span><br><span class="line">*   Cunning</span><br></pre></td></tr></table></figure>
<h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Email-style angle brackets</span><br><span class="line">&gt; are used for blockquotes.</span><br><span class="line"></span><br><span class="line">&gt; &gt; And, they can be nested.</span><br><span class="line"></span><br><span class="line">&gt; #### Headers in blockquotes</span><br><span class="line">&gt; </span><br><span class="line">&gt; * You can quote a list.</span><br><span class="line">&gt; * Etc.</span><br></pre></td></tr></table></figure>
<h2 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;code&gt;` spans are delimited</span><br><span class="line">by backticks.</span><br><span class="line"></span><br><span class="line">You can include literal backticks</span><br><span class="line">like `` `this` ``.</span><br></pre></td></tr></table></figure>
<h2 id="Block-Code"><a href="#Block-Code" class="headerlink" title="Block Code"></a>Block Code</h2><p>Indent every line of a code block by at least 4 spaces or 1 tab.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is a normal paragraph.</span><br><span class="line"></span><br><span class="line">    This is a preformatted</span><br><span class="line">    code block.</span><br></pre></td></tr></table></figure>
<h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><p>Three or more dashes or asterisks:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">- - - -</span><br></pre></td></tr></table></figure>
<h2 id="Hard-Line-Breaks"><a href="#Hard-Line-Breaks" class="headerlink" title="Hard Line Breaks"></a>Hard Line Breaks</h2><p>End a line with two or more spaces:</p>
<pre><code>Roses are red,   
Violets are blue.```
</code></pre>
]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>代码块</tag>
        <tag>Markdown 语法</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP连接SQLite</title>
    <url>/2017/04/14/ThinkPHP%E8%BF%9E%E6%8E%A5SQLite/</url>
    <content><![CDATA[<p>配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DB_TYPE&#x27;</span> =&gt; <span class="string">&#x27;sqlite&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;DB_NAME&#x27;</span> =&gt; DATA_PATH.<span class="string">&#x27;/test.db&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>文件：\Library\Think\Db\Driver\Sqlite.class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span>\<span class="title class_">Db</span>\<span class="title class_">Driver</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sqlite数据库驱动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqlite</span> <span class="keyword">extends</span> <span class="title">Driver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析pdo连接的dsn信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $config 连接信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseDsn</span>(<span class="params"><span class="variable">$config</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dsn</span> = <span class="string">&#x27;sqlite:&#x27;</span> . <span class="variable">$config</span>[<span class="string">&#x27;database&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dsn</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得数据表的字段信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFields</span>(<span class="params"><span class="variable">$tableName</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$tableName</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27; &#x27;</span>, <span class="variable">$tableName</span>);</span><br><span class="line">        <span class="variable">$result</span>          = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;PRAGMA table_info( &#x27;</span> . <span class="variable">$tableName</span> . <span class="string">&#x27; )&#x27;</span>);</span><br><span class="line">        <span class="variable">$info</span>            = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$info</span>[<span class="variable">$val</span>[<span class="string">&#x27;name&#x27;</span>]] = <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>    =&gt; <span class="variable">$val</span>[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;type&#x27;</span>    =&gt; <span class="variable">$val</span>[<span class="string">&#x27;type&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;notnull&#x27;</span> =&gt; (<span class="keyword">bool</span>) (<span class="number">1</span> === <span class="variable">$val</span>[<span class="string">&#x27;notnull&#x27;</span>]),</span><br><span class="line">                    <span class="string">&#x27;default&#x27;</span> =&gt; <span class="variable">$val</span>[<span class="string">&#x27;dflt_value&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;primary&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span> == <span class="variable">$val</span>[<span class="string">&#x27;pk&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;autoinc&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得数据库的表信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTables</span>(<span class="params"><span class="variable">$dbName</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27; &quot;</span></span><br><span class="line">            . <span class="string">&quot;UNION ALL SELECT name FROM sqlite_temp_master &quot;</span></span><br><span class="line">            . <span class="string">&quot;WHERE type=&#x27;table&#x27; ORDER BY name&quot;</span>);</span><br><span class="line">        <span class="variable">$info</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="variable">$info</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">current</span>(<span class="variable">$val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL指令安全过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $str  SQL指令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">escapeString</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parseLimit</span>(<span class="params"><span class="variable">$limit</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$limitStr</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$limit</span>)) &#123;</span><br><span class="line">            <span class="variable">$limit</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$limit</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$limit</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable">$limitStr</span> .= <span class="string">&#x27; LIMIT &#x27;</span> . <span class="variable">$limit</span>[<span class="number">1</span>] . <span class="string">&#x27; OFFSET &#x27;</span> . <span class="variable">$limit</span>[<span class="number">0</span>] . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$limitStr</span> .= <span class="string">&#x27; LIMIT &#x27;</span> . <span class="variable">$limit</span>[<span class="number">0</span>] . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$limitStr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseRand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;RANDOM()&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>ThinkPHP</tag>
        <tag>SQLite</tag>
        <tag>数据库连接</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora1.2.4 你懂得版</title>
    <url>/2022/05/05/Typora1-2-4-%E4%BD%A0%E6%87%82%E5%BE%97%E7%89%88/</url>
    <content><![CDATA[<p><img src="/images/pasted-13.png" alt="Typora"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Typora 是一款由 Abner Lee 开发的轻量级 Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>安装主程序<br>  打开下载的压缩包，双击 <code>typora-setup-x64-1.2.4.exe</code> 安装。</li>
<li>覆盖资源文件<br>  安装完成后，将压缩包的 <code>app.asar</code> 覆盖到安装目录的 <code>resources</code> 文件夹内。</li>
<li>破解<br>  打开Typora，点击输入序列号，邮箱随便填，序列号输入<br>  <code>E8Q9Y5-KXMTL5-7578SL-4S5XKS</code></li>
</ol>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4ucXVhcmsuY24vcy9kZDNmZjIyMDBkNjY=">夸克网盘<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Markdown编辑器</tag>
        <tag>Typora</tag>
        <tag>安装教程</tag>
        <tag>破解版</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue - 创建项目</title>
    <url>/2019/01/25/VUE%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<blockquote>
<p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了开箱即用的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 <code>lint</code> 校验，以及生产环境可用的构建版本</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要管理员权限才能执行这些操作</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否安装成功</span></span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择预设</span></span><br><span class="line">Vue CLI v4.5.15</span><br><span class="line">? Please pick a preset:</span><br><span class="line">&gt; Default ([Vue 2] babel, eslint)</span><br><span class="line">  Default (Vue 3) ([Vue 3] babel, eslint)</span><br><span class="line">  Manually <span class="keyword">select</span> features</span><br></pre></td></tr></table></figure>

<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-word</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>启动成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DONE  Compiled successfully <span class="keyword">in</span> 2244ms                         下午10:20:26</span><br><span class="line"></span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8080/</span><br><span class="line"> - Network: http://192.168.0.104:8080/</span><br><span class="line"></span><br><span class="line"> Note that the development build is not optimized.</span><br><span class="line"> To create a production build, run npm run build.</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>Vue</tag>
        <tag>SPA</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation 16 Pro</title>
    <url>/2022/01/01/VMware-Workstation-16-Pro/</url>
    <content><![CDATA[<p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudm13YXJlLmNvbS9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wcm8vd29ya3N0YXRpb24tcHJvLWV2YWx1YXRpb24uaHRtbA==">https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html<i class="fa fa-external-link-alt"></i></span><br>产品秘钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class="line">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class="line">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br><span class="line">FA1M0-89YE3-081TQ-AFNX9-NKUC0</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>VMware Workstation 16 Pro</tag>
        <tag>虚拟化</tag>
        <tag>序列号</tag>
        <tag>虚拟机关键</tag>
        <tag>安装配置</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket协议</title>
    <url>/2017/07/04/WebSocket%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$master</span>;  <span class="comment">// 连接 server 的 client</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$sockets</span> = <span class="keyword">array</span>(); <span class="comment">// 不同状态的 socket 管理</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$handshake</span> = <span class="literal">false</span>; <span class="comment">// 判断是否握手</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$address</span>, <span class="variable">$port</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 建立一个 socket 套接字</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;master = <span class="title function_ invoke__">socket_create</span>(AF_INET, SOCK_STREAM, SOL_TCP)   </span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;socket_create() failed&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">socket_set_option</span>(<span class="variable">$this</span>-&gt;master, SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)  </span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;socket_option() failed&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">socket_bind</span>(<span class="variable">$this</span>-&gt;master, <span class="variable">$address</span>, <span class="variable">$port</span>)                    </span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;socket_bind() failed&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">socket_listen</span>(<span class="variable">$this</span>-&gt;master, <span class="number">2</span>)                               </span><br><span class="line">            <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;socket_listen() failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sockets[] = <span class="variable language_">$this</span>-&gt;master;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// debug</span></span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;Master socket  : &quot;</span>.<span class="variable language_">$this</span>-&gt;master.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//自动选择来消息的 socket 如果是握手 自动选择主机</span></span><br><span class="line">            <span class="variable">$write</span> = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="variable">$except</span> = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="title function_ invoke__">socket_select</span>(<span class="variable">$this</span>-&gt;sockets, <span class="variable">$write</span>, <span class="variable">$except</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;sockets <span class="keyword">as</span> <span class="variable">$socket</span>) &#123;</span><br><span class="line">                <span class="comment">//连接主机的 client </span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$socket</span> == <span class="variable language_">$this</span>-&gt;master)&#123;</span><br><span class="line">                    <span class="variable">$client</span> = <span class="title function_ invoke__">socket_accept</span>(<span class="variable">$this</span>-&gt;master);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$client</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// debug</span></span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;socket_accept() failed&quot;</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//connect($client);</span></span><br><span class="line">                        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;sockets, <span class="variable">$client</span>);</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;connect client\n&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$bytes</span> = @<span class="title function_ invoke__">socket_recv</span>(<span class="variable">$socket</span>,<span class="variable">$buffer</span>,<span class="number">2048</span>,<span class="number">0</span>);</span><br><span class="line">                    <span class="title function_ invoke__">print_r</span>(<span class="variable">$buffer</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$bytes</span> == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;handshake) &#123;</span><br><span class="line">                        <span class="comment">// 如果没有握手，先握手回应</span></span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">doHandShake</span>(<span class="variable">$socket</span>, <span class="variable">$buffer</span>);</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;shakeHands\n&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    </span><br><span class="line">                        <span class="comment">// 如果已经握手，直接接受数据，并处理</span></span><br><span class="line">                        <span class="variable">$buffer</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decode</span>(<span class="variable">$buffer</span>);</span><br><span class="line">                        <span class="comment">//process($socket, $buffer); </span></span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;send file\n&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dohandshake</span>(<span class="params"><span class="variable">$socket</span>, <span class="variable">$req</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取加密key</span></span><br><span class="line">        <span class="variable">$acceptKey</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encry</span>(<span class="variable">$req</span>);</span><br><span class="line">        <span class="variable">$upgrade</span> = <span class="string">&quot;HTTP/1.1 101 Switching Protocols\r\n&quot;</span> .</span><br><span class="line">                   <span class="string">&quot;Upgrade: websocket\r\n&quot;</span> .</span><br><span class="line">                   <span class="string">&quot;Connection: Upgrade\r\n&quot;</span> .</span><br><span class="line">                   <span class="string">&quot;Sec-WebSocket-Accept: &quot;</span> . <span class="variable">$acceptKey</span> . <span class="string">&quot;\r\n&quot;</span> .</span><br><span class="line">                   <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;dohandshake &quot;</span>.<span class="variable">$upgrade</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>);           </span><br><span class="line">        <span class="comment">// 写入socket</span></span><br><span class="line">        <span class="title function_ invoke__">socket_write</span>(<span class="variable">$socket</span>,<span class="variable">$upgrade</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="title function_ invoke__">strlen</span>(<span class="variable">$upgrade</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>)));</span><br><span class="line">        <span class="comment">// 标记握手已经成功，下次接受数据采用数据帧格式</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;handshake = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encry</span>(<span class="params"><span class="variable">$req</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getKey</span>(<span class="variable">$req</span>);</span><br><span class="line">        <span class="variable">$mask</span> = <span class="string">&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span> . <span class="string">&#x27;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#x27;</span>, <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params"><span class="variable">$req</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Sec-WebSocket-Key: (.*)\r\n/&quot;</span>, <span class="variable">$req</span>, <span class="variable">$match</span>)) &#123; </span><br><span class="line">            <span class="variable">$key</span> = <span class="variable">$match</span>[<span class="number">1</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析数据帧</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$buffer</span></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$len</span> = <span class="variable">$masks</span> = <span class="variable">$data</span> = <span class="variable">$decoded</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$len</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$buffer</span>[<span class="number">1</span>]) &amp; <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$len</span> === <span class="number">126</span>)  &#123;</span><br><span class="line">            <span class="variable">$masks</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">8</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$len</span> === <span class="number">127</span>)  &#123;</span><br><span class="line">            <span class="variable">$masks</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">14</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            <span class="variable">$masks</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$buffer</span>, <span class="number">6</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$index</span> = <span class="number">0</span>; <span class="variable">$index</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>); <span class="variable">$index</span>++) &#123;</span><br><span class="line">            <span class="variable">$decoded</span> .= <span class="variable">$data</span>[<span class="variable">$index</span>] ^ <span class="variable">$masks</span>[<span class="variable">$index</span> % <span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$decoded</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回帧信息处理</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params"><span class="variable">$s</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$s</span>, <span class="number">125</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;\x81&quot;</span> . <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>[<span class="number">0</span>])) . <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ns</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$o</span>) &#123;</span><br><span class="line">            <span class="variable">$ns</span> .= <span class="string">&quot;\x81&quot;</span> . <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$o</span>)) . <span class="variable">$o</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ns</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$client</span>, <span class="variable">$msg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">frame</span>(<span class="variable">$msg</span>);</span><br><span class="line">        <span class="title function_ invoke__">socket_write</span>(<span class="variable">$client</span>, <span class="variable">$msg</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$msg</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试    </span></span><br><span class="line"><span class="variable">$ws</span> = <span class="keyword">new</span> <span class="title function_ invoke__">WS</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>WebSocket</tag>
        <tag>服务器开发</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2与Docker容器，无缝互相迁移</title>
    <url>/2022/04/04/WSL2%E4%B8%8EDocker%E5%AE%B9%E5%99%A8%EF%BC%8C%E6%97%A0%E7%BC%9D%E4%BA%92%E7%9B%B8%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<blockquote>
<p> 本文分享自华为云社区《<span class="exturl" data-url="aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2Jsb2dzLzMzNjkyMw==">WSL2与Docker容器，无缝互相迁移<i class="fa fa-external-link-alt"></i></span>》，作者： tsjsdbd 。</p>
</blockquote>
<p> 注：本文提到的WSL都是指WSL2</p>
<h1 id="WSL与Docker"><a href="#WSL与Docker" class="headerlink" title="WSL与Docker"></a>WSL与Docker</h1><p> WSL非常像windows版的Docker，可以直接启动“容器”（故意加引号，下面有解释），并且在容器世界里面，可以执行各种Linux操作。像下面这样，是不是和Docker很像？</p>
<p><img src="/images/pasted-43.png" alt="upload successful"></p>
<p> ps：上面提到的“容器”，实际是安全容器（即：虚机），WSL2内部架构如下：</p>
<p><img src="/images/pasted-44.png" alt="upload successful"></p>
<p>虽WSL和Docker很像，但是它对WSL镜像有要求，就是得从 MS的应用商店下载：</p>
<p><img src="/images/pasted-45.png" alt="upload successful"></p>
<p>这个就稍显不那么方便，毕竟你可能已经有很多现成的Docker容器了，这里又得重新安装一遍。</p>
<p>我是Windows上有WSL，我的Linux开发机上有Docker，那我怎么在WSL里面跑Docker呢？</p>
<h1 id="WSL运行Docker容器"><a href="#WSL运行Docker容器" class="headerlink" title="WSL运行Docker容器"></a>WSL运行Docker容器</h1><p>常见的WSL里面运行Docker，是这样子的：</p>
<p><img src="/images/pasted-46.png" alt="upload successful"></p>
<p>就是把WSL当做一台新的开发机，然后在WSL里面，安装Docker软件。</p>
<p>这样子，也能解决问题。就是稍微麻烦了一点点。那能不能WSL直接运行Docker镜像呢？</p>
<p>答案是可以的：</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvdXNlLWN1c3RvbS1kaXN0cm8=">https://docs.microsoft.com/en-us/windows/wsl/use-custom-distro<i class="fa fa-external-link-alt"></i></span></p>
<p>这种方法下，是类似这个样子的：</p>
<p><img src="/images/pasted-47.png" alt="upload successful"></p>
<p>具体操作如下：</p>
<ol>
<li>在Docker里面，将容器导出来</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看正在运行的容器</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">//根据容器ID，导出镜像包</span><br><span class="line"></span><br><span class="line">docker export $ContainerID &gt; ./tsjsdbd.tar</span><br></pre></td></tr></table></figure>

<ol>
<li>然后再WSL里面，将Docker镜像导入：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --import &lt;DistributionName&gt; &lt;InstallLocation&gt; &lt;FileName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>比如，我这里用Docker运行了一个busybox容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it busybox /bin/sh</span><br></pre></td></tr></table></figure>

<p>然后查询容器ID：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID  IMAGE</span><br><span class="line">c1e9e8f77336  busybox</span><br></pre></td></tr></table></figure>

<p>导出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker export c1e9e8f77336 &gt; tsjsdbd_busybox.tar</span><br></pre></td></tr></table></figure>

<p>然后我把这个 镜像文件，拷贝到我的windows电脑上。</p>
<p>并在wsl里面导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --import tsjsdbd_busybox ./busybox ./tsjsdbd_busybox.tar</span><br></pre></td></tr></table></figure>

<p>导入后查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -l</span><br></pre></td></tr></table></figure>

<p>这时，我启动这个 busybox 镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -d tsjsdbd_busybox</span><br></pre></td></tr></table></figure>

<p>OK，这时我已经在WSL容器里面了，这是一个busybox的Docker容器镜像。</p>
<h1 id="Docker运行WSL镜像"><a href="#Docker运行WSL镜像" class="headerlink" title="Docker运行WSL镜像"></a>Docker运行WSL镜像</h1><p>从上面的操作可以看出来，WSL和Docker的镜像是相通的。所以WSL系统，也可以导出给Docker直接运行。类似这个样子：</p>
<p><img src="/images/pasted-48.png" alt="upload successful"></p>
<p> 具体操作如下：</p>
<p>先查看下当前跑了哪些wsl容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br><span class="line"> NAME        STATE      VERSION</span><br><span class="line">* Ubuntu-18.04    Stopped     2</span><br><span class="line">  tsjsdbd_busybox  Running     2</span><br></pre></td></tr></table></figure>

<p>导出指定的wsl镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --export tsjsdbd_busybox ./mybox.tar</span><br></pre></td></tr></table></figure>

<p>其中 “<em>tsjsdbd_busybox</em>” 就是你希望导给Docker运行的WSL容器（里面可能安装了一些你需要的软件）。导出的tar包，就可以看做是WSL镜像了（可以直接导入给Docker）</p>
<p>最后，在Docker里面，导入这个镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker import - mybox &lt; mybox.tar</span><br></pre></td></tr></table></figure>

<p>可以查询此镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images |grep mybox</span><br></pre></td></tr></table></figure>

<p>并启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it mybox /bin/sh</span><br></pre></td></tr></table></figure>

<h1 id="WSL镜像与Docker镜像"><a href="#WSL镜像与Docker镜像" class="headerlink" title="WSL镜像与Docker镜像"></a>WSL镜像与Docker镜像</h1><p>大体上，我给个示意：</p>
<p><img src="/images/pasted-49.png" alt="upload successful"></p>
<p>所以WSL确实挺香的。</p>
<h1 id="WSL启动GUI界面"><a href="#WSL启动GUI界面" class="headerlink" title="WSL启动GUI界面"></a>WSL启动GUI界面</h1><p>整体方案是利用 X11 Server，原理参考：</p>
<p>《Docker运行带UI界面的应用，并将它的界面投射到你的Windows电脑》</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2Jsb2dzLzI4MTg2Mg==">https://bbs.huaweicloud.com/blogs/281862<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="/images/pasted-50.png" alt="upload successful"></p>
<p>X11 Server，一般网上推荐 VcXsrv，我自己用下来，感觉 MobaXterm 更傻瓜一些。所以我都用 MobaXterm 的。</p>
<h1 id="附：安装WSL"><a href="#附：安装WSL" class="headerlink" title="附：安装WSL"></a>附：安装WSL</h1><h2 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1. 系统要求"></a>1. 系统要求</h2><p>Windows 10，版本 2004 以上。</p>
<p>比如我的是 20H2，是OK的。</p>
<p>点击：开始-设置-关于，查询自己的版本</p>
<h2 id="2-判断wsl2是否已有"><a href="#2-判断wsl2是否已有" class="headerlink" title="2. 判断wsl2是否已有"></a>2. 判断wsl2是否已有</h2><p>打开 power shell，输入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl -l -o</span><br></pre></td></tr></table></figure>

<p>如OK，则不用后续步骤了（说明你的windows版本已经比较高）。</p>
<p>不行，则手动执行后续步骤</p>
<h2 id="3-允许开发者模式"><a href="#3-允许开发者模式" class="headerlink" title="3. 允许开发者模式"></a>3. 允许开发者模式</h2><p><img src="/images/pasted-51.png" alt="upload successful"></p>
<h2 id="4-启动WSL2功能"><a href="#4-启动WSL2功能" class="headerlink" title="4. 启动WSL2功能"></a>4. 启动WSL2功能</h2><p>启用WSL2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure>

<p>启用虚拟机平台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>启用Hyper-V</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Hyper-V /all /norestart</span><br></pre></td></tr></table></figure>

<p>设置WSL2为默认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>

<h2 id="5-重启，安装wsl补丁"><a href="#5-重启，安装wsl补丁" class="headerlink" title="5. 重启，安装wsl补丁"></a>5. 重启，安装wsl补丁</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl_update_x64.msi</span><br></pre></td></tr></table></figure>

<p>执行以上补丁包。</p>
<p>补丁包下载地址：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="附：高阶版-GPU，GUI界面"><a href="#附：高阶版-GPU，GUI界面" class="headerlink" title="附：高阶版 GPU，GUI界面"></a>附：高阶版 GPU，GUI界面</h1><p>Windows版本高的（win10 21H2），可以在WSL2里面跑CUDA</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9haS9kaXJlY3RtbC9ncHUtY3VkYS1pbi13c2w=">https://docs.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl<i class="fa fa-external-link-alt"></i></span></p>
<p>再高一点（win11），可以原生支持带GUI界面的Linux程序。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvdHV0b3JpYWxzL2d1aS1hcHBz">https://docs.microsoft.com/en-us/windows/wsl/tutorials/gui-apps<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>WSL2</tag>
        <tag>容器迁移</tag>
        <tag>X11 Server</tag>
        <tag>GPU加速</tag>
      </tags>
  </entry>
  <entry>
    <title>Aircrack-ng 爆破 wifi 密码</title>
    <url>/2020/06/04/aircrack-ng/</url>
    <content><![CDATA[<p>Aircrack-ng是一个基于WiFi无线网络分析有关的安全软件，主要功能有网络侦测、数据包嗅探、WEP和WPA&#x2F;WPA2-PSK破解等。<br>因为安全性的原因。现在，周围很少有用WEP算法来加密的WiFi密码，不过基本命令都很相似。</p>
<p>WiFi网络构成</p>
<ol>
<li>WiFi是一个建立于IEEE 802.11标准的无线局域网络（WLAN）设备。</li>
<li>WiFi工作原理AP(Access Point 例如：无线路由器)每100ms将SSID（Service Set Identifier）经由beacons（信号台）封包广播一次。</li>
</ol>
<h4 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iwconfig</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-57.png" alt="upload successful"></p>
<h4 id="启动监听模式"><a href="#启动监听模式" class="headerlink" title="启动监听模式"></a>启动监听模式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-58.png" alt="upload successful"></p>
<h4 id="准备抓取握手包"><a href="#准备抓取握手包" class="headerlink" title="准备抓取握手包"></a>准备抓取握手包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airodump-ng -c 6 -bssid 64:6E:97:DA:39:5C -w thomas wlan0</span><br></pre></td></tr></table></figure>

<ul>
<li>-c：信道号</li>
<li>–bssid：apMAC</li>
<li>-w：保存的文件名</li>
</ul>
<p><img src="/images/pasted-59.png" alt="upload successful"></p>
<p>扫描到的WiFi热点信息</p>
<ul>
<li>BSSID：WiFi路由器的MAC地址</li>
<li>PWR：网卡报告信号水平，信号值越高说明离AP越近。（PWR&#x3D;-1，网卡驱动不支持报告此项信息）</li>
<li>Beacons：无线AP发出的通告编号</li>
<li>#Data：被捕获到的数据分组的数量（一般数据量越大，抓取握手包更容易）</li>
<li>#&#x2F;s：过去10秒钟内每秒捕获数据分组的数量</li>
<li>CH：信道号（从Beacon中获取）</li>
<li>MB：无线AP所支持的最大速率</li>
<li>ENC：加密算法体系</li>
<li>CIPHER：加密算法</li>
<li>AUTH：使用的认证协议</li>
<li>ESSID：wifi名称</li>
</ul>
<p>使已连接WiFi的用户A强制下线，之后A会向WiFi路由重新发送一个带密码的请求握手包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aireplay-ng -0 2 -a 64:6E:97:DA:39:5C -c C2:46:34:ED:48:4C wlan0</span><br></pre></td></tr></table></figure>

<ul>
<li>-0：攻击数据包数量</li>
<li>-a：WiFi MAC 地址</li>
<li>-c：用户 MAC 地址</li>
</ul>
<p><img src="/images/pasted-60.png" alt="upload successful"></p>
<p>出现 <code>WAP handshake</code> 表示已经获取到了握手包，下面就可以实现破解了</p>
<p><img src="/images/pasted-61.png" alt="upload successful"></p>
<h4 id="开始爆破"><a href="#开始爆破" class="headerlink" title="开始爆破"></a>开始爆破</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w pass.txt thomas-01.cap</span><br></pre></td></tr></table></figure>

<ul>
<li>-w：字典文件路径</li>
</ul>
<p><img src="/images/pasted-62.png" alt="upload successful"></p>
<h4 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h4><p>关于密码破解，可以使用kali自带的hashcat使效率大大增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aircrack-ng [抓取到的握手包文件名] -J [转换后的文件名]</span><br><span class="line">hashcat -m 2500 .hccap password.txt</span><br></pre></td></tr></table></figure>
<p>参数： -m 2500为破解的模式为WPA&#x2F;PSK方式  hccap格式的文件是刚刚转化好的文件  字典文件 </p>
<p>注：最新版hashcat一般情况下不支持hccap格式，第一步需将握手包cap格式转换为hccapx</p>
]]></content>
      <tags>
        <tag>Kali Linux</tag>
        <tag>Aircrack-ng</tag>
        <tag>网络接口管理</tag>
        <tag>抓包工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ab命令压力测试</title>
    <url>/2022/03/28/ab%E5%91%BD%E4%BB%A4%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题。</p>
<p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。今天我们专门来介绍ab。</p>
<p>ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。</p>
<h2 id="ab的原理"><a href="#ab的原理" class="headerlink" title="ab的原理"></a>ab的原理</h2><p>ab是apachebench命令的缩写。</p>
<p>ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</p>
<p>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>
<h2 id="ab的安装"><a href="#ab的安装" class="headerlink" title="ab的安装"></a>ab的安装</h2><p>ab的安装非常简单，如果是源码安装apache的话，那就更简单了。apache安装完毕后ab命令存放在apache安装目录的bin目录下。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/apache2/bin</span><br></pre></td></tr></table></figure>

<p>如果apache 是通过yum的RPM包方式安装的话，ab命令默认存放在&#x2F;usr&#x2F;bin目录下。如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> ab</span></span><br><span class="line">/usr/bin/ab</span><br></pre></td></tr></table></figure>

<p>注意：如果不想安装apache但是又想使用ab命令的话，我们可以直接安装apache的工具包httpd-tools。如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum -y install httpd-tools</span></span><br></pre></td></tr></table></figure>

<p>查看ab是否安装成功，可以切换到上述目录下，使用ab –V命令进行检测。如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ab -V</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1874286 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></table></figure>

<p>如果ab安装成功，通过 <code>ab –V</code> 命令则会显示ab的相迎版本。</p>
<h2 id="ab参数说明"><a href="#ab参数说明" class="headerlink" title="ab参数说明"></a>ab参数说明</h2><p>有关ab命令的使用，我们可以通过帮助命令进行查看。如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ab --<span class="built_in">help</span></span></span><br><span class="line">ab: wrong number of arguments</span><br><span class="line">Usage: ab [options] [http://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. wait for each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -B address      Address to bind to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header to use for POST/PUT data, eg.</span><br><span class="line">                    &#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">                    Default is &#x27;text/plain&#x27;</span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. &#x27;Apache=1234&#x27;. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. &#x27;Accept-Encoding: gzip&#x27;</span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this for dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don&#x27;t exit on socket receive errors.</span><br><span class="line">    -m method       Method name</span><br><span class="line">    -h              Display usage information (this message)</span><br></pre></td></tr></table></figure>

<p>下面我们对这些参数，进行相关说明。如下：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>在测试会话中所执行的请求个数。默认时，仅执行一个请求。</td>
</tr>
<tr>
<td>-c</td>
<td>一次产生的请求个数。默认是一次一个。</td>
</tr>
<tr>
<td>-t</td>
<td>测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</td>
</tr>
<tr>
<td>-p</td>
<td>包含了需要POST的数据的文件。</td>
</tr>
<tr>
<td>-P</td>
<td>对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。</td>
</tr>
<tr>
<td>-T</td>
<td>POST数据所使用的Content-type头信息。</td>
</tr>
<tr>
<td>-v</td>
<td>设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(404,200等),2或更大值可以显示警告和其他信息。</td>
</tr>
<tr>
<td>-V</td>
<td>显示版本号并退出。</td>
</tr>
<tr>
<td>-w</td>
<td>以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</td>
</tr>
<tr>
<td>-i</td>
<td>执行HEAD请求，而不是GET。</td>
</tr>
<tr>
<td>-x</td>
<td>设置&lt;table&gt;属性的字符串。</td>
</tr>
<tr>
<td>-X</td>
<td>对请求使用代理服务器。</td>
</tr>
<tr>
<td>-y</td>
<td>设置&lt;tr&gt;属性的字符串。</td>
</tr>
<tr>
<td>-z</td>
<td>设置&lt;td&gt;属性的字符串。</td>
</tr>
<tr>
<td>-C</td>
<td>对请求附加一个Cookie:行。其典型形式是name&#x3D;value的一个参数对，此参数可以重复。</td>
</tr>
<tr>
<td>-H</td>
<td>对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,”Accept-Encoding:zip&#x2F;zop;8bit”)。</td>
</tr>
<tr>
<td>-A</td>
<td>对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</td>
</tr>
<tr>
<td>-h</td>
<td>显示使用方法。</td>
</tr>
<tr>
<td>-d</td>
<td>不显示”percentage served within XX [ms] table”的消息(为以前的版本提供支持)。</td>
</tr>
<tr>
<td>-e</td>
<td>产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比’gnuplot’格式更有用。</td>
</tr>
<tr>
<td>-g</td>
<td>把所有测试结果写入一个’gnuplot’或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。</td>
</tr>
<tr>
<td>-i</td>
<td>执行HEAD请求，而不是GET。</td>
</tr>
<tr>
<td>-k</td>
<td>启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。</td>
</tr>
<tr>
<td>-q</td>
<td>如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。</td>
</tr>
</tbody></table>
<h2 id="ab性能指标"><a href="#ab性能指标" class="headerlink" title="ab性能指标"></a>ab性能指标</h2><p>在进行性能测试过程中有几个指标比较重要：</p>
<ol>
<li><p>吞吐率（Requests per second）</p>
<p>服务器并发处理能力的量化描述，单位是reqs&#x2F;s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。<br>记住：吞吐率是基于并发用户数的。这句话代表了两个含义：</p>
<ol>
<li>吞吐率和并发用户数相关</li>
<li>不同的并发用户数下，吞吐率一般是不同的</li>
</ol>
<p>计算公式：总请求数&#x2F;处理完成这些请求数所花费的时间，即<br>Request per second&#x3D;Complete requests&#x2F;Time taken for tests<br>必须要说明的是，这个数值表示当前机器的整体性能，值越大越好。</p>
</li>
<li><p>并发连接数（The number of concurrent connections）</p>
<p>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p>
</li>
<li><p>并发用户数（Concurrency Level）</p>
<p>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP&#x2F;1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。</p>
</li>
<li><p>用户平均请求等待时间（Time per request）</p>
<p>计算公式：处理完成所有请求数所花费的时间&#x2F;（总请求数&#x2F;并发用户数），即：<br>Time per request&#x3D;Time taken for tests&#x2F;（Complete requests&#x2F;Concurrency Level）</p>
</li>
<li><p>服务器平均请求等待时间（Time per request:across all concurrent requests）</p>
<p>计算公式：处理完成所有请求数所花费的时间&#x2F;总请求数，即：<br>Time taken for&#x2F;testsComplete requests<br>可以看到，它是吞吐率的倒数。<br>同时，它也等于用户平均请求等待时间&#x2F;并发用户数，即<br>Time per request&#x2F;Concurrency Level</p>
</li>
</ol>
<h2 id="ab实际使用"><a href="#ab实际使用" class="headerlink" title="ab实际使用"></a>ab实际使用</h2><p>ab的命令参数比较多，我们经常使用的是-c和-n参数。</p>
<p>下面我们就实际进行操作下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ab -c 10 -n 100 http://www.baidu.com/</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1874286 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        BWS/1.1</span><br><span class="line">Server Hostname:        www.baidu.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        347961 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   4.771 seconds</span><br><span class="line">Complete requests:      100</span><br><span class="line">Failed requests:        97</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 97, Exceptions: 0)</span><br><span class="line">Total transferred:      34933333 bytes</span><br><span class="line">HTML transferred:       34811246 bytes</span><br><span class="line">Requests per second:    20.96 [#/sec] (mean)</span><br><span class="line">Time per request:       477.127 [ms] (mean)</span><br><span class="line">Time per request:       47.713 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          7150.00 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       36   44   5.5     43      66</span><br><span class="line">Processing:   181  396  65.9    399     589</span><br><span class="line">Waiting:       39   91  48.2     85     330</span><br><span class="line">Total:        223  440  66.3    443     629</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta prompt_">  50% </span><span class="language-bash">   443</span></span><br><span class="line"><span class="meta prompt_">  66% </span><span class="language-bash">   462</span></span><br><span class="line"><span class="meta prompt_">  75% </span><span class="language-bash">   469</span></span><br><span class="line"><span class="meta prompt_">  80% </span><span class="language-bash">   475</span></span><br><span class="line"><span class="meta prompt_">  90% </span><span class="language-bash">   509</span></span><br><span class="line"><span class="meta prompt_">  95% </span><span class="language-bash">   551</span></span><br><span class="line"><span class="meta prompt_">  98% </span><span class="language-bash">   608</span></span><br><span class="line"><span class="meta prompt_">  99% </span><span class="language-bash">   629</span></span><br><span class="line"><span class="meta prompt_"> 100% </span><span class="language-bash">   629 (longest request)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>-c 10</code> 表示并发用户数为10</p>
<p>&#96;-n100 表示请求总数为100</p>
<p><code>http://www.baidu.com/</code> 表示请求的目标URL</p>
<p>这行表示同时处理100个请求并运行10次。</p>
<p>测试结果也一目了然，apache测试出的吞吐率为：<code>Requests per second: 20.96 [#/sec] (mean)</code></p>
<p>除此之外还有其他一些信息，需要说明下，如下：</p>
<p><code>Server Software</code> 表示被测试的Web服务器软件名称。</p>
<p><code>Server Hostname</code> 表示请求的URL主机名。</p>
<p><code>Server Port</code> 表示被测试的Web服务器软件的监听端口。</p>
<p><code>Document Path</code> 表示请求的URL中的根绝对路径，通过该文件的后缀名，我们一般可以了解该请求的类型。</p>
<p><code>Document Length</code> 表示HTTP响应数据的正文长度。</p>
<p><code>Concurrency Level</code> 表示并发用户数，这是我们设置的参数之一。</p>
<p><code>Time taken for tests</code> 表示所有这些请求被处理完成所花费的总时间。</p>
<p><code>Complete requests</code> 表示总请求数量，这是我们设置的参数之一。</p>
<p><code>Failed requests</code> 表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况。如果接收到的HTTP响应数据的头信息中含有2XX以外的状态码，则会在测试结果中显示另一个名为“Non-2xx responses”的统计项，用于统计这部分请求数，这些请求并不算在失败的请求中。</p>
<p><code>Total transferred</code> 表示所有请求的响应数据长度总和，包括每个HTTP响应数据的头信息和正文数据的长度。注意这里不包括HTTP请求数据的长度，仅仅为web服务器流向用户PC的应用层数据总长度。</p>
<p><code>HTML transferred</code> 表示所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度。</p>
<p><code>Requests per second</code> 吞吐率，计算公式：Complete requests&#x2F;Time taken for tests</p>
<p><code>Time per request</code> 用户平均请求等待时间，计算公式：Time token for tests&#x2F;（Complete requests&#x2F;Concurrency Level）。</p>
<p><code>Time per requet</code> (across all concurrent request)服务器平均请求等待时间，计算公式：Time taken for tests&#x2F;Complete requests，正好是吞吐率的倒数。也可以这么统计：Time per request&#x2F;Concurrency Level。</p>
<p><code>Transfer rate</code> 表示这些请求在单位时间内从服务器获取的数据长度，计算公式：Total trnasferred&#x2F; Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。</p>
<p><code>Percentage of the requests served within a certain time (ms)</code>这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间都不超过6ms，这个处理时间是指前面的Time per request，即对于单个用户而言，平均每个请求的处理时间。</p>
<h2 id="测试京东性能"><a href="#测试京东性能" class="headerlink" title="测试京东性能"></a>测试京东性能</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ab -c 10 -n 100 http://www.jd.com/</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1874286 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.jd.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx</span><br><span class="line">Server Hostname:        www.jd.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        138 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken for tests:   1.734 seconds</span><br><span class="line">Complete requests:      100</span><br><span class="line">Failed requests:        0</span><br><span class="line">Non-2xx responses:      100</span><br><span class="line">Total transferred:      42300 bytes</span><br><span class="line">HTML transferred:       13800 bytes</span><br><span class="line">Requests per second:    57.66 [#/sec] (mean)</span><br><span class="line">Time per request:       173.433 [ms] (mean)</span><br><span class="line">Time per request:       17.343 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          23.82 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       13   17   2.8     16      23</span><br><span class="line">Processing:    15  146  30.4    150     189</span><br><span class="line">Waiting:       15   88  44.5     91     182</span><br><span class="line">Total:         29  163  30.8    168     206</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta prompt_">  50% </span><span class="language-bash">   168</span></span><br><span class="line"><span class="meta prompt_">  66% </span><span class="language-bash">   176</span></span><br><span class="line"><span class="meta prompt_">  75% </span><span class="language-bash">   179</span></span><br><span class="line"><span class="meta prompt_">  80% </span><span class="language-bash">   182</span></span><br><span class="line"><span class="meta prompt_">  90% </span><span class="language-bash">   189</span></span><br><span class="line"><span class="meta prompt_">  95% </span><span class="language-bash">   195</span></span><br><span class="line"><span class="meta prompt_">  98% </span><span class="language-bash">   204</span></span><br><span class="line"><span class="meta prompt_">  99% </span><span class="language-bash">   206</span></span><br><span class="line"><span class="meta prompt_"> 100% </span><span class="language-bash">   206 (longest request)</span></span><br></pre></td></tr></table></figure>

<p>通过上图，测试结果也一目了然，京东测试出的吞吐率为：<code>Requests per second:57.66 [#/sec] (mean)</code></p>
]]></content>
      <tags>
        <tag>服务器性能测试</tag>
        <tag>Web性能优化</tag>
        <tag>ab工具</tag>
        <tag>Webbench</tag>
      </tags>
  </entry>
  <entry>
    <title>clipboard.js 一键复制到剪切板</title>
    <url>/2017/08/29/clipboard-js-%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>Copying text to the clipboard shouldn’t be hard. It shouldn’t require dozens of steps to configure or hundreds of KBs to load. But most of all, it shouldn’t depend on Flash or any bloated framework.</p>
<p>That’s why clipboard.js exists.</p>
<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>You can get it on npm.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install clipboard --save</span><br></pre></td></tr></table></figure>

<p>Or if you’re not into package management, just <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbm9yb2NoYS9jbGlwYm9hcmQuanMvYXJjaGl2ZS9tYXN0ZXIuemlw">download a ZIP<i class="fa fa-external-link-alt"></i></span> file.</p>
<h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>First, include the script located on the <code>dist</code> folder or load it from <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbm9yb2NoYS9jbGlwYm9hcmQuanMvd2lraS9DRE4tUHJvdmlkZXJz">a third-party CDN provider<i class="fa fa-external-link-alt"></i></span>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Now, you need to instantiate it by <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbm9yb2NoYS9jbGlwYm9hcmQuanMvYmxvYi9tYXN0ZXIvZGVtby9jb25zdHJ1Y3Rvci1zZWxlY3Rvci5odG1sI0wxOA==">passing a DOM selector<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbm9yb2NoYS9jbGlwYm9hcmQuanMvYmxvYi9tYXN0ZXIvZGVtby9jb25zdHJ1Y3Rvci1ub2RlLmh0bWwjTDE2LUwxNw==">HTML element<i class="fa fa-external-link-alt"></i></span>, or <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3plbm9yb2NoYS9jbGlwYm9hcmQuanMvYmxvYi9tYXN0ZXIvZGVtby9jb25zdHJ1Y3Rvci1ub2RlbGlzdC5odG1sI0wxOC1MMTk=">list of HTML elements<i class="fa fa-external-link-alt"></i></span>.</p>
<p>Internally, we need to fetch all elements that matches with your selector and attach event listeners for each one. But guess what? If you have hundreds of matches, this operation can consume a lot of memory.</p>
<p>For this reason we use <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY4NzI5Ni93aGF0LWlzLWRvbS1ldmVudC1kZWxlZ2F0aW9u">event delegation<i class="fa fa-external-link-alt"></i></span> which replaces multiple event listeners with just a single listener. After all, <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9oYXNodGFnL3BlcmZtYXR0ZXJz">#perfmatters<i class="fa fa-external-link-alt"></i></span>.</p>
<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>We’re living a declarative renaissance, that’s why we decided to take advantage of <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvSFRNTC9Vc2luZ19kYXRhX2F0dHJpYnV0ZXM=">HTML5 data attributes<i class="fa fa-external-link-alt"></i></span> for better usability.</p>
<h2 id="Copy-text-from-another-element"><a href="#Copy-text-from-another-element" class="headerlink" title="Copy text from another element"></a>Copy text from another element</h2><p>A pretty common use case is to copy content from another element. You can do that by adding a <code>data-clipboard-target</code> attribute in your trigger element.</p>
<p>The value you include on this attribute needs to match another’s element selector.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- Target --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://github.com/zenorocha/clipboard.js.git&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- Trigger --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-clipboard-target</span>=<span class="string">&quot;#foo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;assets/clippy.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Copy to clipboard&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Cut-text-from-another-element"><a href="#Cut-text-from-another-element" class="headerlink" title="Cut text from another element"></a>Cut text from another element</h2><p>Additionally, you can define a <code>data-clipboard-action</code> attribute to specify if you want to either <code>copy</code> or <code>cut</code> content.</p>
<p>If you omit this attribute, <code>copy</code> will be used by default.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- Target --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>Mussum ipsum cacilds...<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- Trigger --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-clipboard-action</span>=<span class="string">&quot;cut&quot;</span> <span class="attr">data-clipboard-target</span>=<span class="string">&quot;#bar&quot;</span>&gt;</span></span><br><span class="line">    Cut to clipboard</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>As you may expect, the <code>cut</code> action only works on <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> elements.</p>
<h2 id="Copy-text-from-attribute"><a href="#Copy-text-from-attribute" class="headerlink" title="Copy text from attribute"></a>Copy text from attribute</h2><p>Truth is, you don’t even need another element to copy its content from. You can just include a <code>data-clipboard-text</code> attribute in your trigger element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- Trigger --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;Just because you can doesn&#x27;t mean you should — clipboard.js&quot;</span>&gt;</span></span><br><span class="line">    Copy to clipboard</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><p>There are cases where you’d like to show some user feedback or capture what has been selected after a copy&#x2F;cut operation.</p>
<p>That’s why we fire custom events such as <code>success</code> and <code>error</code> for you to listen and implement your custom logic.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clipboard = <span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">clipboard.<span class="title function_">on</span>(<span class="string">&#x27;success&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Action:&#x27;</span>, e.<span class="property">action</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Text:&#x27;</span>, e.<span class="property">text</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Trigger:&#x27;</span>, e.<span class="property">trigger</span>);</span><br><span class="line"></span><br><span class="line">    e.<span class="title function_">clearSelection</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">clipboard.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Action:&#x27;</span>, e.<span class="property">action</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Trigger:&#x27;</span>, e.<span class="property">trigger</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="Tooltips"><a href="#Tooltips" class="headerlink" title="Tooltips"></a>Tooltips</h1><p>Each application has different design needs, that’s why clipboard.js does not include any CSS or built-in tooltip solution.</p>
<p>The tooltips you see on this demo site were built using <span class="exturl" data-url="aHR0cDovL3ByaW1lcmNzcy5pby90b29sdGlwcy8=">GitHub’s Primer<i class="fa fa-external-link-alt"></i></span> . You may want to check that out if you’re looking for a similar look and feel.</p>
<h1 id="Advanced-Usage"><a href="#Advanced-Usage" class="headerlink" title="Advanced Usage"></a>Advanced Usage</h1><p>If you don’t want to modify your HTML, there’s a pretty handy imperative API for you to use. All you need to do is declare a function, do your thing, and return a value.</p>
<p>For instance, if you want to dynamically set a <code>target</code>, you’ll need to return a Node.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&#x27;.btn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="keyword">function</span>(<span class="params">trigger</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> trigger.<span class="property">nextElementSibling</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>If you want to dynamically set a <code>text</code>, you’ll return a String.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&#x27;.btn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="keyword">function</span>(<span class="params">trigger</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> trigger.<span class="title function_">getAttribute</span>(<span class="string">&#x27;aria-label&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>For use in Bootstrap Modals or with any other library that changes the focus you’ll want to set the focused element as the <code>container</code> value.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&#x27;.btn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modal&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Also, if you are working with single page apps, you may want to manage the lifecycle of the DOM more precisely. Here’s how you clean up the events and objects that we create.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clipboard = <span class="keyword">new</span> <span class="title class_">Clipboard</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line">clipboard.<span class="title function_">destroy</span>();</span><br></pre></td></tr></table></figure>

<h1 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h1><p>This library relies on both <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlbGVjdGlvbg==">Selection<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L2V4ZWNDb21tYW5k">execCommand<i class="fa fa-external-link-alt"></i></span> APIs. The first one is <span class="exturl" data-url="aHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0aW9u">supported by all browsers<i class="fa fa-external-link-alt"></i></span> while the second one is supported in the following browsers.</p>
<ul>
<li>Chrome 42+</li>
<li>Edge 12+</li>
<li>Firefox 41+</li>
<li>IE 9+</li>
<li>Opera 29+</li>
<li>Safari 10+</li>
</ul>
<p>The good news is that clipboard.js gracefully degrades if you need to support older browsers. All you have to do is show a tooltip saying <code>Copied!</code> when <code>success</code> event is called and <code>Press Ctrl+C to copy</code> when <code>error</code> event is called because the text is already selected.</p>
<p>You can also check if clipboard.js is supported or not by running <code>Clipboard.isSupported()</code>, that way you can hide copy&#x2F;cut buttons from the UI.</p>
<h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>A browser extension that adds a “copy to clipboard” button to every code block on <em>GitHub, MDN, Gist, StackOverflow, StackExchange, npm, and even Medium</em>.</p>
<p>Install for <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvY29kZWNvcHkvZmtiZmVia2NvZWxham1oYW5vY2dwcGFuZm9vamNkbWc=">Chrome<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9hZGRvbnMubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9hZGRvbi9jb2RlY29weS8=">Firefox<i class="fa fa-external-link-alt"></i></span>.</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>file cache class of php</title>
    <url>/2020/01/08/file-cache-class/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Cache</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string 缓存目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$cache_path</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name 缓存变量名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $value 存储数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $expire 有效时间（秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setCache</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$expire</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$expire</span>)) &#123;</span><br><span class="line">            <span class="variable">$expire</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$file</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">_getCacheName</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="variable">$data</span> = <span class="string">&quot;&lt;?php\n//&quot;</span> . <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name 缓存变量名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $default 默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getCache</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$default</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">_getCacheName</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>) &amp;&amp; (<span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>))) &#123;</span><br><span class="line">            <span class="variable">$expire</span> = (<span class="keyword">int</span>)<span class="title function_ invoke__">substr</span>(<span class="variable">$content</span>, <span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$expire</span> === <span class="number">0</span> || <span class="title function_ invoke__">filemtime</span>(<span class="variable">$file</span>) + <span class="variable">$expire</span> &gt;= <span class="title function_ invoke__">time</span>()) &#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$content</span>, <span class="number">32</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">self</span>::<span class="title function_ invoke__">delCache</span>(<span class="variable">$name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">delCache</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">_getCacheName</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>) ? <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>) : <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用缓存目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_getCacheName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$cache_path</span>)) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$cache_path</span> = <span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__DIR__</span>)) . DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$cache_path</span> = <span class="title function_ invoke__">rtrim</span>(<span class="built_in">self</span>::<span class="variable">$cache_path</span>, <span class="string">&#x27;/\\&#x27;</span>) . DIRECTORY_SEPARATOR;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="built_in">self</span>::<span class="variable">$cache_path</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="built_in">self</span>::<span class="variable">$cache_path</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$cache_path</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置目录</span></span><br><span class="line"><span class="title class_">Cache</span>::<span class="variable">$cache_path</span> = <span class="string">&quot;./cache&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置缓存</span></span><br><span class="line"><span class="title class_">Cache</span>::<span class="title function_ invoke__">setCache</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;7200&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取缓存</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title class_">Cache</span>::<span class="title function_ invoke__">getCache</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cache</span>::<span class="title function_ invoke__">delCache</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>文件缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>frp：一款强大的内网穿透代理工具</title>
    <url>/2024/12/07/frp%EF%BC%9A%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>frp（Fast Reverse Proxy）是一款开源的高性能内网穿透代理工具，它允许你将位于NAT或防火墙后面的本地服务器暴露到公网上。frp支持TCP、UDP、HTTP和HTTPS协议，使得内部服务可以通过域名被外部访问。此外，frp还提供了P2P连接模式，进一步增强了其灵活性和可用性。</p>
</blockquote>
<h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><p>frp以其简洁的设计和丰富的功能而闻名，以下是一些核心特性：</p>
<ol>
<li><strong>协议支持</strong>：支持TCP、UDP、HTTP和HTTPS协议，适用于多种网络环境。</li>
<li><strong>P2P连接</strong>：提供P2P连接模式，实现客户端间的直接通信，无需经过服务器。</li>
<li><strong>配置灵活</strong>：支持TOML、YAML和JSON格式的配置文件，方便不同用户的需求。</li>
<li><strong>安全性</strong>：支持Token和OIDC认证，增强连接的安全性。</li>
<li><strong>性能优化</strong>：提供TLS加密和数据压缩，保障数据传输的安全和效率。</li>
<li><strong>监控与日志</strong>：集成Prometheus监控，支持实时监控代理状态和流量。</li>
<li><strong>负载均衡</strong>：支持通过分组实现简单的负载均衡。</li>
<li><strong>健康检查</strong>：提供TCP和HTTP健康检查，确保服务的高可用性。</li>
<li><strong>自定义域名</strong>：支持自定义子域名，方便在共享服务器上区分不同用户的服务。</li>
<li><strong>插件系统</strong>：支持客户端和服务器端的插件扩展，增加了功能的灵活性和多样性。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="步骤1：访问GitHub-Releases页面"><a href="#步骤1：访问GitHub-Releases页面" class="headerlink" title="步骤1：访问GitHub Releases页面"></a>步骤1：访问GitHub Releases页面</h3><p>打开浏览器，访问frp的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycC9yZWxlYXNlcw==">GitHub Releases页面<i class="fa fa-external-link-alt"></i></span>。<br>在页面中，找到最新发布的版本，这通常会被标记为“Latest”或有相应的版本号。</p>
<h3 id="步骤2：下载二进制文件"><a href="#步骤2：下载二进制文件" class="headerlink" title="步骤2：下载二进制文件"></a>步骤2：下载二进制文件</h3><p>根据你的操作系统（Windows、Linux或macOS）和架构（如x86_64、arm等），选择相应的预编译二进制文件。</p>
<ul>
<li>对于Linux用户，你会找到以<code>linux_amd64</code>或<code>linux_arm64</code>等命名的压缩文件。</li>
<li>对于macOS用户，文件名通常包含<code>darwin</code>。</li>
<li>对于Windows用户，文件名会包含<code>windows_4.0</code>。<br>点击相应的文件名，下载到你的计算机上。</li>
</ul>
<h3 id="步骤3：解压缩文件"><a href="#步骤3：解压缩文件" class="headerlink" title="步骤3：解压缩文件"></a>步骤3：解压缩文件</h3><p>解压缩下载的文件。对于Linux和macOS用户，可以使用<code>tar</code>命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf frp_0.39.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>  对于Windows用户，可以使用文件资源管理器或第三方解压缩软件解压<code>.zip</code>文件。</p>
<h3 id="步骤4：移动到合适的目录"><a href="#步骤4：移动到合适的目录" class="headerlink" title="步骤4：移动到合适的目录"></a>步骤4：移动到合适的目录</h3><p>在解压缩的目录中，你会找到<code>frps</code>和<code>frpc</code>两个可执行文件，分别对应服务器端和客户端。</p>
<p>将<code>frps</code>和<code>frpc</code>移动到合适的目录，例如<code>/usr/local/bin</code>（需要管理员权限）：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> frps frpc /usr/local/bin/</span><br></pre></td></tr></table></figure>
<h3 id="步骤5：检查运行"><a href="#步骤5：检查运行" class="headerlink" title="步骤5：检查运行"></a>步骤5：检查运行</h3><p>在命令行中运行<code>frps -v</code>和<code>frpc -v</code>来检查二进制文件是否正确无误：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frps -v</span><br><span class="line">frpc -v</span><br></pre></td></tr></table></figure>
<p>  这将显示frp的版本信息，确认安装成功。</p>
<h2 id="示例用法"><a href="#示例用法" class="headerlink" title="示例用法"></a>示例用法</h2><p>frp的使用涉及两个主要组件：<code>frps</code>（服务器端）和<code>frpc</code>（客户端）。以下是一些基本的示例用法，帮助你快速开始使用frp。</p>
<h3 id="1-通过SSH访问内网计算机"><a href="#1-通过SSH访问内网计算机" class="headerlink" title="1. 通过SSH访问内网计算机"></a>1. 通过SSH访问内网计算机</h3><h4 id="服务端（frps）配置和启动："><a href="#服务端（frps）配置和启动：" class="headerlink" title="服务端（frps）配置和启动："></a>服务端（frps）配置和启动：</h4><ol>
<li>在拥有公网IP的服务器上配置<code>frps.toml</code>：</li>
</ol>
  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.toml</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动<code>frps</code>：</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.toml</span><br></pre></td></tr></table></figure>
<h4 id="客户端（frpc）配置和启动："><a href="#客户端（frpc）配置和启动：" class="headerlink" title="客户端（frpc）配置和启动："></a>客户端（frpc）配置和启动：</h4><ol start="3">
<li>在内网计算机上配置<code>frpc.toml</code>：</li>
</ol>
  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.toml</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;x.x.x.x&quot;</span>  <span class="comment"># 服务端公网IP</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;ssh&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动<code>frpc</code>：</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.toml</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>通过SSH访问内网计算机：</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 6000 用户名@服务端公网IP</span><br></pre></td></tr></table></figure>
<h3 id="2-使用自定义域名访问内网Web服务"><a href="#2-使用自定义域名访问内网Web服务" class="headerlink" title="2. 使用自定义域名访问内网Web服务"></a>2. 使用自定义域名访问内网Web服务</h3><h4 id="服务端（frps）配置和启动：-1"><a href="#服务端（frps）配置和启动：-1" class="headerlink" title="服务端（frps）配置和启动："></a>服务端（frps）配置和启动：</h4><ol>
<li>配置<code>frps.toml</code>：</li>
</ol>
  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.toml</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhostHTTPPort</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动<code>frps</code>：</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.toml</span><br></pre></td></tr></table></figure>
<h4 id="客户端（frpc）配置和启动：-1"><a href="#客户端（frpc）配置和启动：-1" class="headerlink" title="客户端（frpc）配置和启动："></a>客户端（frpc）配置和启动：</h4><ol start="3">
<li>配置<code>frpc.toml</code>：</li>
</ol>
  <figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.toml</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;x.x.x.x&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;web&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;http&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">customDomains</span> = [<span class="string">&quot;www.example.com&quot;</span>]</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动<code>frpc</code>：</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.toml</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p>配置域名解析：<br>  将<code>www.example.com</code>的A记录指向<code>frps</code>服务器的公网IP。</p>
</li>
<li><p>访问Web服务：<br>  通过浏览器访问<code>http://www.example.com:8080</code>。</p>
</li>
</ol>
<p>这些示例仅展示了frp的一小部分功能。frp的灵活性和强大的功能使其成为内网穿透的有力工具。你可以根据具体需求调整配置，实现更复杂的网络穿透和代理需求。</p>
]]></content>
      <tags>
        <tag>网络</tag>
        <tag>工具</tag>
        <tag>协议</tag>
        <tag>代理服务器</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg 合并视频</title>
    <url>/2022/10/03/ffmpeg-%E5%90%88%E5%B9%B6%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -f concat -i filelist.txt -c copy -y FBF73ED7.mp4</span><br></pre></td></tr></table></figure>

<p>filelist.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file &#x27;FBF73ED7.p701.1.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.2.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.3.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.4.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.5.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.6.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.7.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.8.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.9.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.10.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.11.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.12.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.13.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.14.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.15.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.16.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.17.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.18.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.19.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.20.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.21.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.22.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.23.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.24.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.25.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.26.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.27.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.28.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.29.mp4&#x27;</span><br><span class="line">file &#x27;FBF73ED7.p701.30.mp4&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ffmpeg</tag>
        <tag>视频合并</tag>
        <tag>命令行工具</tag>
      </tags>
  </entry>
  <entry>
    <title>grafana 通过自定义API获取数据</title>
    <url>/2025/04/30/grafana-%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89API%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="安装infinity插件"><a href="#安装infinity插件" class="headerlink" title="安装infinity插件"></a>安装infinity插件</h2><p>在插件页面中搜索 <code>infinity</code>，进入 infinity 插件页面点击 <code>install</code>,等待安装完成。</p>
<p><img src="/images/pasted-79.png" alt="安装infinity插件"></p>
<h2 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h2><p>进入数据源页面，点击 <code>Add new data source</code> 按钮，搜索 <code>infinity</code>。</p>
<p><img src="/images/pasted-80.png" alt="搜索数据源"></p>
<p>进入 infinity 数据源页面，输入 数据源 名称点击 <code>Save &amp; test</code></p>
<p><img src="/images/pasted-81.png" alt="添加数据源"></p>
<h2 id="使用数据源"><a href="#使用数据源" class="headerlink" title="使用数据源"></a>使用数据源</h2><p>在仪表板中添加可视化，在 <code>Data source</code> 选项中选择刚刚新增的数据源。</p>
<p>在 <code>URL</code> 中填写你的接口地址。根据要求返回对应的格式即可呈现到面板上。</p>
<p><img src="/images/pasted-82.png" alt="使用数据源"></p>
]]></content>
      <tags>
        <tag>grafana</tag>
        <tag>plugins</tag>
        <tag>api集成</tag>
        <tag>data source</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>js人民币转换大写</title>
    <url>/2016/12/23/js%E4%BA%BA%E6%B0%91%E5%B8%81%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%86%99/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*****************************************</span></span><br><span class="line"><span class="comment">     Copyright (c) 2004, Laser Lu      </span></span><br><span class="line"><span class="comment">          http://www.idow.net           </span></span><br><span class="line"><span class="comment"> *****************************************/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convertCurrency</span>(<span class="params">currencyDigits</span>) &#123;</span><br><span class="line"><span class="comment">// Constants:</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">MAXIMUM_NUMBER</span> = <span class="number">99999999999.99</span>;</span><br><span class="line">    <span class="comment">// Predefine the radix characters and currency symbols for output:</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_ZERO</span> = <span class="string">&quot;零&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_ONE</span> = <span class="string">&quot;壹&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_TWO</span> = <span class="string">&quot;贰&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_THREE</span> = <span class="string">&quot;叁&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_FOUR</span> = <span class="string">&quot;肆&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_FIVE</span> = <span class="string">&quot;伍&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_SIX</span> = <span class="string">&quot;陆&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_SEVEN</span> = <span class="string">&quot;柒&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_EIGHT</span> = <span class="string">&quot;捌&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_NINE</span> = <span class="string">&quot;玖&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_TEN</span> = <span class="string">&quot;拾&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_HUNDRED</span> = <span class="string">&quot;佰&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_THOUSAND</span> = <span class="string">&quot;仟&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_TEN_THOUSAND</span> = <span class="string">&quot;万&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_HUNDRED_MILLION</span> = <span class="string">&quot;亿&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_SYMBOL</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_DOLLAR</span> = <span class="string">&quot;元&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_TEN_CENT</span> = <span class="string">&quot;角&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_CENT</span> = <span class="string">&quot;分&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">CN_INTEGER</span> = <span class="string">&quot;整&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Variables:</span></span><br><span class="line">    <span class="keyword">var</span> integral;    <span class="comment">// Represent integral part of digit number.</span></span><br><span class="line">    <span class="keyword">var</span> decimal;    <span class="comment">// Represent decimal part of digit number.</span></span><br><span class="line">    <span class="keyword">var</span> outputCharacters;    <span class="comment">// The output result.</span></span><br><span class="line">    <span class="keyword">var</span> parts;</span><br><span class="line">    <span class="keyword">var</span> digits, radices, bigRadices, decimals;</span><br><span class="line">    <span class="keyword">var</span> zeroCount;</span><br><span class="line">    <span class="keyword">var</span> i, p, d;</span><br><span class="line">    <span class="keyword">var</span> quotient, modulus;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Validate input string:</span></span><br><span class="line">    currencyDigits = currencyDigits.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (currencyDigits == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">		<span class="variable constant_">PUT</span>.<span class="title function_">alert</span>(<span class="string">&quot;不能为空。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currencyDigits.<span class="title function_">match</span>(<span class="regexp">/[^,.\d]/</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="variable constant_">PUT</span>.<span class="title function_">alert</span>(<span class="string">&quot;请输入数字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((currencyDigits).<span class="title function_">match</span>(<span class="regexp">/^((\d&#123;1,3&#125;(,\d&#123;3&#125;)*(.((\d&#123;3&#125;,)*\d&#123;1,3&#125;))?)|(\d+(.\d+)?))$/</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="variable constant_">PUT</span>.<span class="title function_">alert</span>(<span class="string">&quot;请输入正确数字。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Normalize the format of input digits:</span></span><br><span class="line">    currencyDigits = currencyDigits.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;&quot;</span>);    <span class="comment">// Remove comma delimiters.</span></span><br><span class="line">    currencyDigits = currencyDigits.<span class="title function_">replace</span>(<span class="regexp">/^0+/</span>, <span class="string">&quot;&quot;</span>);    <span class="comment">// Trim zeros at the beginning.</span></span><br><span class="line">    <span class="comment">// Assert the number is not greater than the maximum number.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>(currencyDigits) &gt; <span class="variable constant_">MAXIMUM_NUMBER</span>) &#123;</span><br><span class="line">		<span class="variable constant_">PUT</span>.<span class="title function_">alert</span>(<span class="string">&quot;超出了最大数字转换。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Process the coversion from currency digits to characters:</span></span><br><span class="line">    <span class="comment">// Separate integral and decimal parts before processing coversion:</span></span><br><span class="line">    parts = currencyDigits.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (parts.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        integral = parts[<span class="number">0</span>];</span><br><span class="line">        decimal = parts[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// Cut down redundant decimal digits that are after the second.</span></span><br><span class="line">        decimal = decimal.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        integral = parts[<span class="number">0</span>];</span><br><span class="line">        decimal = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Prepare the characters corresponding to the digits:</span></span><br><span class="line">    digits = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="variable constant_">CN_ZERO</span>, <span class="variable constant_">CN_ONE</span>, <span class="variable constant_">CN_TWO</span>, <span class="variable constant_">CN_THREE</span>, <span class="variable constant_">CN_FOUR</span>, <span class="variable constant_">CN_FIVE</span>, <span class="variable constant_">CN_SIX</span>, <span class="variable constant_">CN_SEVEN</span>, <span class="variable constant_">CN_EIGHT</span>, <span class="variable constant_">CN_NINE</span>);</span><br><span class="line">    radices = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;&quot;</span>, <span class="variable constant_">CN_TEN</span>, <span class="variable constant_">CN_HUNDRED</span>, <span class="variable constant_">CN_THOUSAND</span>);</span><br><span class="line">    bigRadices = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;&quot;</span>, <span class="variable constant_">CN_TEN_THOUSAND</span>, <span class="variable constant_">CN_HUNDRED_MILLION</span>);</span><br><span class="line">    decimals = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="variable constant_">CN_TEN_CENT</span>, <span class="variable constant_">CN_CENT</span>);</span><br><span class="line">    <span class="comment">// Start processing:</span></span><br><span class="line">    outputCharacters = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// Process integral part if it is larger than 0:</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>(integral) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        zeroCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; integral.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            p = integral.<span class="property">length</span> - i - <span class="number">1</span>;</span><br><span class="line">            d = integral.<span class="title function_">substr</span>(i, <span class="number">1</span>);</span><br><span class="line">            quotient = p / <span class="number">4</span>;</span><br><span class="line">            modulus = p % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                zeroCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (zeroCount &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    outputCharacters += digits[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                zeroCount = <span class="number">0</span>;</span><br><span class="line">                outputCharacters += digits[<span class="title class_">Number</span>(d)] + radices[modulus];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modulus == <span class="number">0</span> &amp;&amp; zeroCount &lt; <span class="number">4</span>) &#123;</span><br><span class="line">                outputCharacters += bigRadices[quotient];</span><br><span class="line">                zeroCount = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        outputCharacters += <span class="variable constant_">CN_DOLLAR</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Process decimal part if there is:</span></span><br><span class="line">    <span class="keyword">if</span> (decimal != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; decimal.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            d = decimal.<span class="title function_">substr</span>(i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (d != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">                outputCharacters += digits[<span class="title class_">Number</span>(d)] + decimals[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Confirm and return the final output string:</span></span><br><span class="line">    <span class="keyword">if</span> (outputCharacters == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        outputCharacters = <span class="variable constant_">CN_ZERO</span> + <span class="variable constant_">CN_DOLLAR</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (decimal == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        outputCharacters += <span class="variable constant_">CN_INTEGER</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    outputCharacters = <span class="variable constant_">CN_SYMBOL</span> + outputCharacters;</span><br><span class="line">    <span class="keyword">return</span> outputCharacters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">convertCurrency</span>(<span class="number">123.45</span>)</span><br><span class="line"><span class="string">&quot;壹佰贰拾叁元肆角伍分&quot;</span></span><br><span class="line"><span class="title function_">convertCurrency</span>(<span class="number">123000.45</span>)</span><br><span class="line"><span class="string">&quot;壹拾贰万叁仟元肆角伍分&quot;</span></span><br><span class="line"><span class="title function_">convertCurrency</span>(<span class="number">123456.78</span>)</span><br><span class="line"><span class="string">&quot;壹拾贰万叁仟肆佰伍拾陆元柒角捌分&quot;</span> </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Currency Conversion</tag>
        <tag>Number Formatting</tag>
        <tag>Chinese Characters</tag>
        <tag>String Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT分支模型的策略与发布</title>
    <url>/2020/01/13/git%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>本文用于介绍 GIT分支模型的策略与发布。</p>
<p><img src="https://nvie.com/img/git-model@2x.png" alt="img"></p>
<p>在git分支模型中我们一般会用到如下四种分支:</p>
<ul>
<li><strong>主分支</strong></li>
<li><strong>特性分支</strong></li>
<li><strong>release分支</strong></li>
<li><strong>hotFix分支</strong></li>
</ul>
<p>分别使用4个种类的分支来进行开发的。</p>
<h2 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h2><p><img src="https://nvie.com/img/main-branches@2x.png" alt="img"></p>
<p>主分支有两种：master分支和develop分支</p>
<ul>
<li><strong>master</strong><br>master分支只负责管理发布的状态。在提交时使用标签记录发布版本号。</li>
<li><strong>develop</strong><br>develop分支是针对发布的日常开发分支。刚才我们已经讲解过有合并分支的功用。</li>
</ul>
<h2 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h2><p>特性分支就是我们在前面讲解过的topic分支的功用。</p>
<p>这个分支是针对新功能的开发，在bug修正的时候从develop分支分叉出来的。基本上不需要共享特性分支的操作，所以不需要远端控制。完成开发后，把分支合并回develop分支后发布。</p>
<p><img src="https://nvie.com/img/fb@2x.png" alt="img"></p>
<h2 id="release分支"><a href="#release分支" class="headerlink" title="release分支"></a>release分支</h2><p>release分支是为release做准备的。通常会在分支名称的最前面加上release-。release前需要在这个分支进行最后的调整，而且为了下一版release开发用develop分支的上游分支。</p>
<p>一般的开发是在develop分支上进行的，到了可以发布的状态时再创建release分支，为release做最后的bug修正。</p>
<p>到了可以release的状态时，把release分支合并到master分支，并且在合并提交里添加release版本号的标签。</p>
<p>要导入在release分支所作的修改，也要合并回develop分支。</p>
<h2 id="hotFix分支"><a href="#hotFix分支" class="headerlink" title="hotFix分支"></a>hotFix分支</h2><p>hotFix分支是在发布的产品需要紧急修正时，从master分支创建的分支。通常会在分支名称的最前面加上 <code>hotfix-</code>。</p>
<p>例如，在develop分支上的开发还不完整时，需要紧急修改。这个时候在develop分支创建可以发布的版本要花许多的时间，所以最好选择从master分支直接创建分支进行修改，然后合并分支。</p>
<p>修改时创建的hotFix分支要合并回develop分支。</p>
<p><img src="https://nvie.com/img/hotfix-branches@2x.png" alt="img"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9udmllLmNvbS9wb3N0cy9hLXN1Y2Nlc3NmdWwtZ2l0LWJyYW5jaGluZy1tb2RlbC8=">A successful Git branching model<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <tags>
        <tag>GIT分支模型</tag>
        <tag>主分支</tag>
        <tag>特性分支</tag>
        <tag>release分支</tag>
        <tag>hotFix分支</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-admin插件在windows系统插入图片地址错误</title>
    <url>/2022/01/25/hexo-admin%E6%8F%92%E4%BB%B6%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在使用hexo-admin插入图片时，我发现插入的图片显示错误，并且链接也有问题。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">预期</span><br><span class="line">![<span class="string">upload successful</span>](<span class="link">/images/pasted-32.png</span>)</span><br><span class="line">实际</span><br><span class="line">![<span class="string">upload successful</span>](<span class="link">\\images\pasted-32.png\</span>)</span><br></pre></td></tr></table></figure>

<h4 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h4><p>修改 <code>blog/node_modules/hexo-admin/api.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filename = path.join(imagePath, filename)</span></span><br><span class="line">filename = imagePath + <span class="string">&#x27;/&#x27;</span> + filename	<span class="comment">// 修改点</span></span><br><span class="line"><span class="keyword">var</span> outpath = path.<span class="title function_">join</span>(hexo.<span class="property">source_dir</span>, filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataURI = req.<span class="property">body</span>.<span class="property">data</span>.<span class="title function_">slice</span>(<span class="string">&#x27;data:image/png;base64,&#x27;</span>.<span class="property">length</span>)</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="title class_">Buffer</span>(dataURI, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">hexo.<span class="property">log</span>.<span class="title function_">d</span>(<span class="string">`saving image to <span class="subst">$&#123;outpath&#125;</span>`</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(outpath, buf, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    hexo.<span class="property">source</span>.<span class="title function_">process</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        res.<span class="title function_">done</span>(&#123;</span><br><span class="line">            <span class="comment">// src: path.join(hexo.config.root + filename),</span></span><br><span class="line">            <span class="attr">src</span>: filename,	<span class="comment">// 修改点</span></span><br><span class="line">            <span class="attr">msg</span>: msg</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo-admin</tag>
        <tag>图片管理</tag>
        <tag>Windows系统</tag>
      </tags>
  </entry>
  <entry>
    <title>js简单实现60秒倒计时</title>
    <url>/2017/04/11/js%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B060%E7%A7%92%E5%80%92%E8%AE%A1%E6%97%B6/</url>
    <content><![CDATA[<p>html代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取验证码&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setTime(this)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>js代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countdown = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setTime</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (countdown === <span class="number">0</span>) &#123;</span><br><span class="line">        val.<span class="title function_">removeAttribute</span>(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">        val.<span class="property">value</span> = <span class="string">&quot;免费获取验证码&quot;</span>;</span><br><span class="line">        countdown = <span class="number">60</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val.<span class="title function_">setAttribute</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        val.<span class="property">value</span> = <span class="string">&quot;重新发送(&quot;</span> + countdown + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        countdown--;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">setTime</span>(val)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<script async src="//jsrun.net/SxXKp/embed/all/dark/"></script>]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>倒计时</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>layer打开自动最大化</title>
    <url>/2019/04/12/layer%E6%89%93%E5%BC%80%E8%87%AA%E5%8A%A8%E6%9C%80%E5%A4%A7%E5%8C%96/</url>
    <content><![CDATA[<p>使用layer时候 想在弹出层 在打开的时候默认就是最大值</p>
<p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> index = layer.<span class="title function_">open</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">area</span>: [<span class="string">&#x27;420px&#x27;</span>, <span class="string">&#x27;240px&#x27;</span>], <span class="comment">// 宽高</span></span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;html内容&#x27;</span>,</span><br><span class="line">  <span class="attr">maxmin</span>:<span class="literal">true</span>  <span class="comment">// 最大最小化</span></span><br><span class="line">&#125;);</span><br><span class="line">layer.<span class="title function_">full</span>(index);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>JavaScript</tag>
        <tag>Layer.js</tag>
        <tag>弹出窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>mathjax数学公式</title>
    <url>/2017/11/22/mathjax%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>有时候，我们还需要一些高级功能，比如在网页上显示数学公式。</p>
<p>新建一个文件themes&#x2F;pacman&#x2F;layout&#x2F;_partial&#x2F;mathjax.ejs，找到mathjax的调用代码复制到文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- mathjax config similar to math.stackexchange --></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tex2jax</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">inlineMath</span>: [ [<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;$&#x27;</span>], [<span class="string">&quot;\\(&quot;</span>,<span class="string">&quot;\\)&quot;</span>] ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">processEscapes</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">tex2jax</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">skipTags</span>: [<span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;noscript&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;textarea&#x27;</span>, <span class="string">&#x27;pre&#x27;</span>, <span class="string">&#x27;code&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-mathjax-config&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title class_">Queue</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> all = <span class="title class_">MathJax</span>.<span class="property">Hub</span>.<span class="title function_">getAllJax</span>(), i;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; all.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            all[i].<span class="title class_">SourceElement</span>().<span class="property">parentNode</span>.<span class="property">className</span> += <span class="string">&#x27; has-jax&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在themes&#x2F;pacman&#x2F;layout&#x2F;_partial&#x2F;after_footer.ejs 的最后一行，增加对mathjax的引用，详细内容请查看源代码。</p>
<p>我们修改文章：source&#x2F;_posts&#x2F;新的开始.md</p>
<p>增加公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 公式</span><br><span class="line">$$J\_\alpha(x)=\sum _&#123;m=0&#125;^\infty \frac&#123;(-1)^ m&#125;&#123;m! \, \Gamma (m + \alpha + 1)&#125;&#123;\left(&#123;\frac&#123;x&#125;&#123;2&#125;&#125;\right)&#125;^&#123;2 m + \alpha &#125;$$</span><br></pre></td></tr></table></figure>

<p>查看效果:</p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>$$J_\alpha(x)&#x3D;\sum _{m&#x3D;0}^\infty \frac{(-1)^ m}{m! , \Gamma (m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha }$$</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Hexo</tag>
        <tag>Node.js</tag>
        <tag>MathJax</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>localResizeIMG.js</title>
    <url>/2017/08/24/localResizeIMG-js/</url>
    <content><![CDATA[<p><a href="https://travis-ci.org/think2011/localResizeIMG"><img src="https://travis-ci.org/think2011/localResizeIMG.svg?branch=master" alt="Build Status"></a><br><a href="https://www.npmjs.com/package/lrz"><img src="https://img.shields.io/npm/v/lrz.svg" alt="npm version"></a><br><a href=""><img src="https://img.shields.io/npm/l/express.svg" alt="npm"></a></p>
<h1 id="🚨重要"><a href="#🚨重要" class="headerlink" title="🚨重要!!"></a>🚨重要!!</h1><p>很抱歉，这个项目已不再维护了，可能很长一段时间都不会更新了。<br>如果真的需要，请使用之前请一定留意 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy9pc3N1ZXM/cT1pczppc3N1ZStpczpvcGVuK2xhYmVsOmJ1Zw==">Issues<i class="fa fa-external-link-alt"></i></span> 里已知的问题</p>
<h1 id="演示一下"><a href="#演示一下" class="headerlink" title="演示一下"></a>演示一下</h1><p><img src="http://think2011.github.io/localResizeIMG/test/demo.gif"></p>
<h1 id="自己试试"><a href="#自己试试" class="headerlink" title="自己试试"></a>自己试试</h1><p><img src="https://raw.github.com/think2011/localResizeIMG/master/test/qrcode.png"></p>
<p><span class="exturl" data-url="aHR0cDovL3RoaW5rMjAxMS5naXRodWIuaW8vbG9jYWxSZXNpemVJTUcvdGVzdC8=">点我直接进入演示页面<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在客户端压缩好要上传的图片可以节省带宽更快的发送给后端，特别适合在移动设备上使用。</p>
<h1 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h1><ol>
<li><p>已踩过很多坑，经过几个版本迭代，以及很多很多网友的反馈帮助、机型测试</p>
<ul>
<li>图片扭曲、某些设备不自动旋转图片方向，没有jpeg压缩算法..</li>
<li>不支持new Blob,formData构造的文件size为0..</li>
<li>还有某些机型和浏览器（例如QQX5浏览器）莫名其妙的BUG..</li>
</ul>
</li>
<li><p>按需加载（会根据对应设备自动异步载入JS文件，节省不必要带宽）</p>
</li>
<li><p>原生JS编写，不依赖例如<code>jquery</code>等第三方库，支持AMD or CMD规范。</p>
</li>
</ol>
<blockquote>
<p>尽管如此，在某些 <code>Android</code> 下依然有莫名其妙的问题，在您使用前，请一定大致浏览下 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy9pc3N1ZXM=">issues<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h1 id="如何获取"><a href="#如何获取" class="headerlink" title="如何获取"></a>如何获取</h1><p>通过以下方式都可以下载：</p>
<ol>
<li>执行<code>npm i lrz</code>（推荐）</li>
<li>执行<code>bower install lrz</code></li>
</ol>
<p>接着在页面中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/lrz.bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1:"></a>方式1:</h3><p>如果您的图片来自用户拍摄或者上传的，您需要一个<code>input file</code>来获取图片。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着通过change事件可以得到用户选择的图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">lrz</span>(<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">rst</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理成功会执行</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(rst);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理失败会执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">always</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 不管是成功失败，都会执行</span></span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><p>如果您的图片不是来自用户上传的，那么也可以直接传入图片路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">lrz</span>(<span class="string">&#x27;./xxx/xx/x.png&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">rst</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理成功会执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>)&#123;</span><br><span class="line">            <span class="comment">// 处理失败会执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">always</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 不管是成功失败，都会执行</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy93aWtp">后端处理请查看WIKI。<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy93aWtp">具体参数说明请查看WIKI。<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p>IE10以上及大部分非IE浏览器（chrome、微信什么的）</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy9pc3N1ZXM=">有疑问请直接在 issues 中提问<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请一定记得附上以下内容：💡</span><br><span class="line">请一定记得附上以下内容：🙈</span><br><span class="line">请一定记得附上以下内容：💡</span><br><span class="line"></span><br><span class="line">平台：微信..</span><br><span class="line">设备：iPhone5 IOS7..</span><br><span class="line">问题：问题描述呗..</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Q：能否提供完整的一套UI?</p>
</li>
<li><p>A：暂时定位是作为纯粹的处理插件，或许会考虑开发一整套UI。</p>
</li>
<li><p>Q：有时拍摄完照片后，页面自动刷新或闪退了。</p>
</li>
<li><p>A：虽然已作了优化处理，但内存似乎还是爆掉了，常见于低配android手机，建议每次只处理一张图片。</p>
</li>
<li><p>Q: 怎么批量上传图片?</p>
</li>
<li><p>A: 您可以自己写个循环来传入用户多选的图片，但在移动端上请谨慎处理，原因同上。</p>
</li>
<li><p>Q: 直接传入图片路径的无法生成图片</p>
</li>
<li><p>A: 可能是跨域的问题，具体请看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9DT1JTX2VuYWJsZWRfaW1hZ2U=">CORS_enabled_image<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>Q: 想要商用可以吗？</p>
</li>
<li><p>A: 没问题，但请留意issue里已知的问题。</p>
</li>
</ul>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoaW5rMjAxMS9sb2NhbFJlc2l6ZUlNRy93aWtpLzMuLSVFNiVCQSU5MCVFNyVBMCU4MSVFOSU4MCVCQiVFOCVCRSU5MQ==">想要参与 or 自己定制 or 了解源码请点击这里，逻辑和说明<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ul>
<li>@dwandw</li>
<li>@yourlin</li>
<li>@wxt2005</li>
</ul>
<p>以上在之前的版本帮忙参与维护的朋友，以及提出问题的朋友们，真的真的很感谢你们。：D</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>javascript</tag>
        <tag>图片处理</tag>
        <tag>模块化加载</tag>
        <tag>npm包</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh</title>
    <url>/2017/12/12/oh-my-zsh/</url>
    <content><![CDATA[<p align="center">
  <img src="https://s3.amazonaws.com/ohmyzsh/oh-my-zsh-logo.png" alt="Oh My Zsh">
</p>

<p>Oh My Zsh is an open source, community-driven framework for managing your <span class="exturl" data-url="aHR0cDovL3d3dy56c2gub3JnLw==">zsh<i class="fa fa-external-link-alt"></i></span> configuration.</p>
<p>Sounds boring. Let’s try again.</p>
<p><strong>Oh My Zsh will not make you a 10x developer…but you might feel like one.</strong></p>
<p>Once installed, your terminal shell will become the talk of the town <em>or your money back!</em> With each keystroke in your command prompt, you’ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, <em>“that is amazing! are you some sort of genius?”</em></p>
<p>Finally, you’ll begin to get the sort of attention that you have always felt you deserved. …or maybe you’ll use the time that you’re saving to start flossing more often. 😬</p>
<p>To learn more, visit <span class="exturl" data-url="aHR0cDovL29obXl6LnNoLw==">ohmyz.sh<i class="fa fa-external-link-alt"></i></span> and follow <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9vaG15enNo">@ohmyzsh<i class="fa fa-external-link-alt"></i></span> on Twitter.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><p><strong>Disclaimer:</strong> <em>Oh My Zsh works best on macOS and Linux.</em></p>
<ul>
<li>Unix-like operating system (macOS or Linux)</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy56c2gub3JnLw==">Zsh<i class="fa fa-external-link-alt"></i></span> should be installed (v4.3.9 or more recent). If not pre-installed (<code>zsh --version</code> to confirm), check the following instruction here: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9JbnN0YWxsaW5nLVpTSA==">Installing ZSH<i class="fa fa-external-link-alt"></i></span></li>
<li><code>curl</code> or <code>wget</code> should be installed</li>
<li><code>git</code> should be installed</li>
</ul>
<h3 id="Basic-Installation"><a href="#Basic-Installation" class="headerlink" title="Basic Installation"></a>Basic Installation</h3><p>Oh My Zsh is installed by running one of the following commands in your terminal. You can install this via the command-line with either <code>curl</code> or <code>wget</code>.</p>
<h4 id="via-curl"><a href="#via-curl" class="headerlink" title="via curl"></a>via curl</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="via-wget"><a href="#via-wget" class="headerlink" title="via wget"></a>via wget</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Using-Oh-My-Zsh"><a href="#Using-Oh-My-Zsh" class="headerlink" title="Using Oh My Zsh"></a>Using Oh My Zsh</h2><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>Oh My Zsh comes with a shitload of plugins to take advantage of. You can take a look in the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvdHJlZS9tYXN0ZXIvcGx1Z2lucw==">plugins<i class="fa fa-external-link-alt"></i></span> directory and&#x2F;or the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9QbHVnaW5z">wiki<i class="fa fa-external-link-alt"></i></span> to see what’s currently available.</p>
<h4 id="Enabling-Plugins"><a href="#Enabling-Plugins" class="headerlink" title="Enabling Plugins"></a>Enabling Plugins</h4><p>Once you spot a plugin (or several) that you’d like to use with Oh My Zsh, you’ll need to enable them in the <code>.zshrc</code> file. You’ll find the zshrc file in your <code>$HOME</code> directory. Open it with your favorite text editor and you’ll see a spot to list all the plugins you want to load.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>For example, this might begin to look like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  bundler</span><br><span class="line">  dotenv</span><br><span class="line">  osx</span><br><span class="line">  rake</span><br><span class="line">  rbenv</span><br><span class="line">  ruby</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="Using-Plugins"><a href="#Using-Plugins" class="headerlink" title="Using Plugins"></a>Using Plugins</h4><p>Most plugins (should! we’re working on this) include a <strong>README</strong>, which documents how to use them.</p>
<h3 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h3><p>We’ll admit it. Early in the Oh My Zsh world, we may have gotten a bit too theme happy. We have over one hundred themes now bundled. Most of them have <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmdpdGh1Yi5jb20vcm9iYnlydXNzZWxsL29oLW15LXpzaC90aGVtZXM=">screenshots<i class="fa fa-external-link-alt"></i></span> on the wiki. Check them out!</p>
<h4 id="Selecting-a-Theme"><a href="#Selecting-a-Theme" class="headerlink" title="Selecting a Theme"></a>Selecting a Theme</h4><p><em>Robby’s theme is the default one. It’s not the fanciest one. It’s not the simplest one. It’s just the right one (for him).</em></p>
<p>Once you find a theme that you’d like to use, you will need to edit the <code>~/.zshrc</code> file. You’ll see an environment variable (all caps) in there that looks like:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure>

<p>To use a different theme, simply change the value to match the name of your desired theme. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">see https://github.com/robbyrussell/oh-my-zsh/wiki/Themes#agnoster</span></span><br></pre></td></tr></table></figure>

<p><em>Note: many themes require installing the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==">Powerline Fonts<i class="fa fa-external-link-alt"></i></span> in order to render properly.</em></p>
<p>Open up a new terminal window and your prompt should look something like this:</p>
<p><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt="Agnoster theme"></p>
<p>In case you did not find a suitable theme for your needs, please have a look at the wiki for <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9FeHRlcm5hbC10aGVtZXM=">more of them<i class="fa fa-external-link-alt"></i></span>.</p>
<p>If you’re feeling feisty, you can let the computer select one randomly for you each time you open a new terminal window.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;random&quot; # (...please let it be pie... please be some pie..)</span><br></pre></td></tr></table></figure>

<p>And if you want to pick random theme from a list of your favorite themes:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZSH_THEME_RANDOM_CANDIDATES=(</span><br><span class="line">  &quot;robbyrussell&quot;</span><br><span class="line">  &quot;agnoster&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="Advanced-Topics"><a href="#Advanced-Topics" class="headerlink" title="Advanced Topics"></a>Advanced Topics</h2><p>If you’re the type that likes to get their hands dirty, these sections might resonate.</p>
<h3 id="Advanced-Installation"><a href="#Advanced-Installation" class="headerlink" title="Advanced Installation"></a>Advanced Installation</h3><p>Some users may want to change the default path, or manually install Oh My Zsh.</p>
<h4 id="Custom-Directory"><a href="#Custom-Directory" class="headerlink" title="Custom Directory"></a>Custom Directory</h4><p>The default location is <code>~/.oh-my-zsh</code> (hidden in your home directory)</p>
<p>If you’d like to change the install directory with the <code>ZSH</code> environment variable, either by running <code>export ZSH=/your/path</code> before installing, or by setting it before the end of the install pipeline like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ZSH=&quot;$HOME/.dotfiles/oh-my-zsh&quot;; sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Manual-Installation"><a href="#Manual-Installation" class="headerlink" title="Manual Installation"></a>Manual Installation</h4><h5 id="1-Clone-the-repository"><a href="#1-Clone-the-repository" class="headerlink" title="1. Clone the repository:"></a>1. Clone the repository:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>

<h5 id="2-Optionally-backup-your-existing-zshrc-file"><a href="#2-Optionally-backup-your-existing-zshrc-file" class="headerlink" title="2. Optionally, backup your existing ~/.zshrc file:"></a>2. <em>Optionally</em>, backup your existing <code>~/.zshrc</code> file:</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure>

<h5 id="3-Create-a-new-zsh-configuration-file"><a href="#3-Create-a-new-zsh-configuration-file" class="headerlink" title="3. Create a new zsh configuration file"></a>3. Create a new zsh configuration file</h5><p>You can create a new zsh config file by copying the template that we have included for you.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>

<h5 id="4-Change-your-default-shell"><a href="#4-Change-your-default-shell" class="headerlink" title="4. Change your default shell"></a>4. Change your default shell</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h5 id="5-Initialize-your-new-zsh-configuration"><a href="#5-Initialize-your-new-zsh-configuration" class="headerlink" title="5. Initialize your new zsh configuration"></a>5. Initialize your new zsh configuration</h5><p>Once you open up a new terminal window, it should load zsh with Oh My Zsh’s configuration.</p>
<h3 id="Installation-Problems"><a href="#Installation-Problems" class="headerlink" title="Installation Problems"></a>Installation Problems</h3><p>If you have any hiccups installing, here are a few common fixes.</p>
<ul>
<li>You <em>might</em> need to modify your <code>PATH</code> in <code>~/.zshrc</code> if you’re not able to find some commands after switching to <code>oh-my-zsh</code>.</li>
<li>If you installed manually or changed the install location, check the <code>ZSH</code> environment variable in <code>~/.zshrc</code>.</li>
</ul>
<h3 id="Custom-Plugins-and-Themes"><a href="#Custom-Plugins-and-Themes" class="headerlink" title="Custom Plugins and Themes"></a>Custom Plugins and Themes</h3><p>If you want to override any of the default behaviors, just add a new file (ending in <code>.zsh</code>) in the <code>custom/</code> directory.</p>
<p>If you have many functions that go well together, you can put them as a <code>XYZ.plugin.zsh</code> file in the <code>custom/plugins/</code> directory and then enable this plugin.</p>
<p>If you would like to override the functionality of a plugin distributed with Oh My Zsh, create a plugin of the same name in the <code>custom/plugins/</code> directory and it will be loaded instead of the one in <code>plugins/</code>.</p>
<h2 id="Getting-Updates"><a href="#Getting-Updates" class="headerlink" title="Getting Updates"></a>Getting Updates</h2><p>By default, you will be prompted to check for upgrades every few weeks. If you would like <code>oh-my-zsh</code> to automatically upgrade itself without prompting you, set the following in your <code>~/.zshrc</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DISABLE_UPDATE_PROMPT=true</span><br></pre></td></tr></table></figure>

<p>To disable automatic upgrades, set the following in your <code>~/.zshrc</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DISABLE_AUTO_UPDATE=true</span><br></pre></td></tr></table></figure>

<h3 id="Manual-Updates"><a href="#Manual-Updates" class="headerlink" title="Manual Updates"></a>Manual Updates</h3><p>If you’d like to upgrade at any point in time (maybe someone just released a new plugin and you don’t want to wait a week?) you just need to run:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure>

<p>Magic! 🎉</p>
<h2 id="Uninstalling-Oh-My-Zsh"><a href="#Uninstalling-Oh-My-Zsh" class="headerlink" title="Uninstalling Oh My Zsh"></a>Uninstalling Oh My Zsh</h2><p>Oh My Zsh isn’t for everyone. We’ll miss you, but we want to make this an easy breakup.</p>
<p>If you want to uninstall <code>oh-my-zsh</code>, just run <code>uninstall_oh_my_zsh</code> from the command-line. It will remove itself and revert your previous <code>bash</code> or <code>zsh</code> configuration.</p>
<h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>I’m far from being a <span class="exturl" data-url="aHR0cDovL3d3dy56c2gub3JnLw==">Zsh<i class="fa fa-external-link-alt"></i></span> expert and suspect there are many ways to improve – if you have ideas on how to make the configuration easier to maintain (and faster), don’t hesitate to fork and send pull requests!</p>
<p>We also need people to test out pull-requests. So take a look through <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvaXNzdWVz">the open issues<i class="fa fa-external-link-alt"></i></span> and help where you can.</p>
<h3 id="Do-NOT-send-us-themes"><a href="#Do-NOT-send-us-themes" class="headerlink" title="Do NOT send us themes"></a>Do NOT send us themes</h3><p>We have (more than) enough themes for the time being. Please add your theme to the <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2gvd2lraS9FeHRlcm5hbC10aGVtZXM=">external themes<i class="fa fa-external-link-alt"></i></span> wiki page.</p>
<h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>Oh My Zsh has a vibrant community of happy users and delightful contributors. Without all the time and help from our contributors, it wouldn’t be so awesome.</p>
<p>Thank you so much!</p>
<h2 id="Follow-Us"><a href="#Follow-Us" class="headerlink" title="Follow Us"></a>Follow Us</h2><p>We’re on the social media.</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9vaG15enNo">@ohmyzsh<i class="fa fa-external-link-alt"></i></span> on Twitter. You should follow it.</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL09oLU15LVpzaC0yOTY2MTYyNjM4MTkyOTAv">Oh My Zsh<i class="fa fa-external-link-alt"></i></span> on Facebook.</li>
</ul>
<h2 id="Merchandise"><a href="#Merchandise" class="headerlink" title="Merchandise"></a>Merchandise</h2><p>We have <span class="exturl" data-url="aHR0cHM6Ly9zaG9wLnBsYW5ldGFyZ29uLmNvbS9wcm9kdWN0cy9vaG15enNoLXN0aWNrZXJzLXNldC1vZi0zLXN0aWNrZXJz">stickers<i class="fa fa-external-link-alt"></i></span> and <span class="exturl" data-url="aHR0cDovL3Nob3AucGxhbmV0YXJnb24uY29tL3Byb2R1Y3RzL29obXl6c2gtdC1zaGlydHM=">shirts<i class="fa fa-external-link-alt"></i></span> for you to show off your love of Oh My Zsh. Again, this will help you become the talk of the town!</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Oh My Zsh is released under the <a href="LICENSE.txt">MIT license</a>.</p>
<h2 id="About-Planet-Argon"><a href="#About-Planet-Argon" class="headerlink" title="About Planet Argon"></a>About Planet Argon</h2><p><img src="https://pa-github-assets.s3.amazonaws.com/PARGON_logo_digital_COL-small.jpg" alt="Planet Argon"></p>
<p>Oh My Zsh was started by the team at <span class="exturl" data-url="aHR0cHM6Ly93d3cucGxhbmV0YXJnb24uY29tLz91dG1fc291cmNlPWdpdGh1Yg==">Planet Argon<i class="fa fa-external-link-alt"></i></span>, a <span class="exturl" data-url="aHR0cHM6Ly93d3cucGxhbmV0YXJnb24uY29tL3NraWxscy9ydWJ5LW9uLXJhaWxzLWRldmVsb3BtZW50P3V0bV9zb3VyY2U9Z2l0aHVi">Ruby on Rails development agency<i class="fa fa-external-link-alt"></i></span>.</p>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>github</tag>
        <tag>zsh</tag>
        <tag>系统管理</tag>
      </tags>
  </entry>
  <entry>
    <title>php 最简单的验证码</title>
    <url>/2016/12/17/php%20%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<p>create_code.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//生成验证码图片</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: image/png&quot;</span>);</span><br><span class="line"><span class="comment">// 全数字</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;1,2,3,4,5,6,7,8,9,a,b,c,d,f,g&quot;</span>;      <span class="comment">//要显示的字符，可自己进行增删</span></span><br><span class="line"><span class="variable">$list</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$cmax</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$list</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="variable">$verifyCode</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">      <span class="variable">$randnum</span> = <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="variable">$cmax</span>);</span><br><span class="line">      <span class="variable">$verifyCode</span> .= <span class="variable">$list</span>[<span class="variable">$randnum</span>];           <span class="comment">//取出字符，组合成为我们要的验证码字符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>] = <span class="variable">$verifyCode</span>;        <span class="comment">//将字符放入SESSION中</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreate</span>(<span class="number">58</span>,<span class="number">28</span>);    <span class="comment">//生成图片</span></span><br><span class="line"><span class="variable">$black</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$im</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);     <span class="comment">//此条及以下三条为设置的颜色</span></span><br><span class="line"><span class="variable">$white</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$im</span>, <span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</span><br><span class="line"><span class="variable">$gray</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$im</span>, <span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"><span class="variable">$red</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$im</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">imagefill</span>(<span class="variable">$im</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="variable">$white</span>);     <span class="comment">//给图片填充颜色</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//将验证码绘入图片</span></span><br><span class="line"><span class="title function_ invoke__">imagestring</span>(<span class="variable">$im</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="variable">$verifyCode</span>, <span class="variable">$black</span>);    <span class="comment">//将验证码写入到图片中</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">50</span>;<span class="variable">$i</span>++)  <span class="comment">//加入干扰象素</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$im</span>, <span class="title function_ invoke__">rand</span>()p , <span class="title function_ invoke__">rand</span>()<span class="number">0</span> , <span class="variable">$black</span>);    <span class="comment">//加入点状干扰素</span></span><br><span class="line">     <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$im</span>, <span class="title function_ invoke__">rand</span>()p , <span class="title function_ invoke__">rand</span>()<span class="number">0</span> , <span class="variable">$red</span>);</span><br><span class="line">     <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$im</span>, <span class="title function_ invoke__">rand</span>()p , <span class="title function_ invoke__">rand</span>()<span class="number">0</span> , <span class="variable">$gray</span>);</span><br><span class="line">     <span class="comment">//imagearc($im, rand()p, rand()p, 20, 20, 75, 170, $black);    //加入弧线状干扰素</span></span><br><span class="line">     <span class="comment">//imageline($im, rand()p, rand()p, rand()p, rand()p, $red);    //加入线条状干扰素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$im</span>);</span><br><span class="line"><span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$im</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>引用<br>demo.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN" "http://www.wapforum.org/DTD/xhtml-mobile10.dtd" --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;act.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">src</span>=<span class="string">&quot;create_code.php&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;看不清楚，换一张&quot;</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer; vertical-align:middle;&quot;</span> <span class="attr">onClick</span>=<span class="string">&quot;create_code()&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment"><!--<button type="button" onClick="create_code()">更换</button>--></span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">create_code</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;code&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;create_code.php?&#x27;</span>+<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10000</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;处理，判断是否输入正确<br>act.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>] == <span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>验证码</tag>
        <tag>图像处理</tag>
        <tag>会话管理</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstorm连接mysql出错</title>
    <url>/2018/04/11/phpstorm%E8%BF%9E%E6%8E%A5mysql%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<p>错误代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value &#x27;ÖÐ¹ú±ê×¼Ê±¼ä&#x27; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br><span class="line">  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">  at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">  at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">  at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)</span><br><span class="line">  at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85)</span><br><span class="line">  at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:132)</span><br><span class="line">  at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2241)</span><br><span class="line">  at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2265)</span><br><span class="line">  at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1319)</span><br><span class="line">  at com.mysql.cj.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:868)</span><br><span class="line">  at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:830)</span><br><span class="line">  at com.mysql.cj.jdbc.ConnectionImpl.&amp;lt;init&amp;gt;(ConnectionImpl.java:455)</span><br><span class="line">  at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)</span><br><span class="line">  at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)</span><br><span class="line">  at com.intellij.database.remote.jdbc.impl.RemoteDriverImpl.connect(RemoteDriverImpl.java:41)</span><br><span class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">  at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)</span><br><span class="line">  at sun.rmi.transport.Transport$1.run(Transport.java:200)</span><br><span class="line">  at sun.rmi.transport.Transport$1.run(Transport.java:197)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at sun.rmi.transport.Transport.serviceCall(Transport.java:196)</span><br><span class="line">  at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)</span><br><span class="line">  at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)</span><br><span class="line">  at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)</span><br><span class="line">  at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">  at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">  at java.lang.Thread.run(Thread.java:748) (no stack trace).</span><br><span class="line">com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value &#x27;ÖÐ¹ú±ê×¼Ê±¼ä&#x27; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<p>在 <code>advanced</code> 选项中找到 <code>serverTimezone</code> 设置为 <code>UTC</code></p>
]]></content>
      <tags>
        <tag>配置</tag>
        <tag>PHPStorm</tag>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
        <tag>时区支持</tag>
      </tags>
  </entry>
  <entry>
    <title>php-cs-fixer</title>
    <url>/2022/09/28/php-cs-fixer/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PHP CS Fixer (PHP Coding Standards Fixer)是一款通过编码标准来修复代码的工具。它支持 PSR 编码规范和其他社区驱动（如 Symfony），还可以根据自己（团队）的风格进行自定义配置。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 PHP CS Fixer 推荐使用 Composer 来进行安装。可以进行全局安装或者直接安装到项目中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全局安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">composer global require friendsofphp/php-cs-fixer</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为项目安装</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">composer require --dev friendsofphp/php-cs-fixer</span> </span><br></pre></td></tr></table></figure>

<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="describe-查看规则规则集"><a href="#describe-查看规则规则集" class="headerlink" title="describe 查看规则规则集"></a>describe 查看规则规则集</h3><p><img src="/images/pasted-30.png" alt="upload successful"></p>
<h3 id="fix-修复一个文件或者目录"><a href="#fix-修复一个文件或者目录" class="headerlink" title="fix 修复一个文件或者目录"></a>fix 修复一个文件或者目录</h3><p>使用 <code>fix</code> 命令可以对文件或者目录进行修复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix /path/to/dir</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix /path/to/file</span></span><br></pre></td></tr></table></figure>

<p><code>--path-mode</code> 输出格式选项，支持 txt、json、xml、checkstyle、junit 和 gitlab。（默认txt）</p>
<p><code>--quiet</code> 不输出任何信息。</p>
<p><code>-v --verbose</code> 选项将显示应用的规则。<br><code>-vv</code> 啰嗦<br><code>-vvv</code> 调试</p>
<p><img src="/images/pasted-32.png" alt="upload successful"></p>
<p>出现“修复后 linting 期间报告的错误”，可以使用它来更详细地进行调试</p>
<p><img src="/images/pasted-31.png" alt="upload successful"></p>
<p><code>--rules</code> 指定修复规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix ./ --rules=@PSR12</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix ./ --rules=line_ending,full_opening_tag,indentation_type</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix ./ --rules=-full_opening_tag,-indentation_type</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix ./ --rules=@Symfony,-@PSR1,-blank_line_before_statement,strict_comparison</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php-cs-fixer fix ./ --rules=<span class="string">&#x27;&#123;&quot;concat_space&quot;: &#123;&quot;spacing&quot;: &quot;none&quot;&#125;&#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>

<p><code>--dry-run</code> 运行修复程序但不修改文件</p>
<p><code>--diff</code> 以 udiff 格式输出修改内容</p>
<p><code>--allow-risky</code> 是否运行有风险的修改，传入参数（yes or no）</p>
<p><code>--stop-on-violation</code> 修复一个文件后停止执行</p>
<p><code>--show-progress</code> 显示处理进度</p>
<h3 id="退出代码"><a href="#退出代码" class="headerlink" title="退出代码"></a>退出代码</h3><p>退出代码 fix命令是使用以下位标志构建的：</p>
<ul>
<li>0 - 好的。</li>
<li>1 - 一般错误（或 PHP 最低要求不匹配）。</li>
<li>4 - 某些文件的语法无效（仅在试运行模式下）。</li>
<li>8 - 某些文件需要修复（仅在试运行模式下）。</li>
<li>16 - 应用程序的配置错误。</li>
<li>32 - Fixer 的配置错误。</li>
<li>64 - 应用程序中出现异常。</li>
</ul>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
        <tag>代码修复</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp 后台地址加密</title>
    <url>/2019/11/20/thinkphp-%E5%90%8E%E5%8F%B0%E5%9C%B0%E5%9D%80%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p><code>route.php</code> 文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">array</span> (</span><br><span class="line">  <span class="string">&#x27;l1n6yun$&#x27;</span> =&gt; <span class="string">&#x27;admin/Index/index&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>&#96;&#96;app\admin\controller\AdminBaseController&#96; 类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">initialize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取登陆session</span></span><br><span class="line">    <span class="variable">$sessionAdminId</span> = <span class="title function_ invoke__">session</span>(<span class="string">&#x27;ADMIN_ID&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有登陆跳转到登陆页面</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$sessionAdminId</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">redirect</span>(<span class="title function_ invoke__">url</span>(<span class="string">&quot;admin/Public/login&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app\admin\controller\IndexController</code> 类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 后台设置</span></span><br><span class="line">    <span class="variable">$adminSettings</span> = <span class="title function_ invoke__">cmf_get_option</span>(<span class="string">&#x27;admin_settings&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// $adminSettings[&#x27;admin_password&#x27;] = &quot;l1n6yun&quot; 后台加密地址 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$adminSettings</span>[<span class="string">&#x27;admin_password&#x27;</span>]) || <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">path</span>() == <span class="variable">$adminSettings</span>[<span class="string">&#x27;admin_password&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable">$adminId</span> = <span class="title function_ invoke__">cmf_get_current_admin_id</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$adminId</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">session</span>(<span class="string">&quot;__LOGIN_BY_CMF_ADMIN_PW__&quot;</span>, <span class="number">1</span>);<span class="comment">//设置后台登录加密码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">initialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>app\admin\controller\PublicController</code> 类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublicController</span> <span class="keyword">extends</span> <span class="title">AdminBaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	<span class="comment">// 设置后台登录加密码</span></span><br><span class="line">        <span class="variable">$loginAllowed</span> = <span class="title function_ invoke__">session</span>(<span class="string">&quot;__LOGIN_BY_CMF_ADMIN_PW__&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$loginAllowed</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="title function_ invoke__">cmf_get_root</span>() . <span class="string">&quot;/&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">session</span>(<span class="string">&quot;__SP_ADMIN_LOGIN_PAGE_SHOWED_SUCCESS__&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="string">&quot;:login&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doLogin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       	<span class="comment">// 判断登录页面是否显示成功</span></span><br><span class="line">        <span class="variable">$loginAllowed</span> = <span class="title function_ invoke__">session</span>(<span class="string">&quot;__SP_ADMIN_LOGIN_PAGE_SHOWED_SUCCESS__&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$loginAllowed</span>)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;非法登录!&#x27;</span>, <span class="title function_ invoke__">cmf_get_root</span>() . <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 登陆逻辑 ...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登陆成功</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$result</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title function_ invoke__">session</span>(<span class="string">&#x27;ADMIN_ID&#x27;</span>, <span class="variable">$result</span>[<span class="string">&quot;id&quot;</span>]);</span><br><span class="line">            <span class="title function_ invoke__">session</span>(<span class="string">&#x27;name&#x27;</span>, <span class="variable">$result</span>[<span class="string">&quot;user_login&quot;</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="title function_ invoke__">session</span>(<span class="string">&quot;__LOGIN_BY_CMF_ADMIN_PW__&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="title function_ invoke__">session</span>(<span class="string">&quot;__SP_ADMIN_LOGIN_PAGE_SHOWED_SUCCESS__&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="title function_ invoke__">lang</span>(<span class="string">&#x27;LOGIN_SUCCESS&#x27;</span>), <span class="title function_ invoke__">url</span>(<span class="string">&quot;admin/Index/index&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>后端开发</tag>
        <tag>ThinkPHP</tag>
        <tag>会话管理</tag>
        <tag>加密</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>wget命令整站下载做网站镜像</title>
    <url>/2017/07/07/wget%E5%91%BD%E4%BB%A4%E6%95%B4%E7%AB%99%E4%B8%8B%E8%BD%BD%E5%81%9A%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>在 linux 下完整的用 wget 命令整站采集网站做镜像的命令是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -m -e robots=off -U &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6&quot; &quot;http://www.example.com/&quot;</span><br></pre></td></tr></table></figure>

<p>wget命令参数注释：</p>
<p><code>-e robots=off</code> #让 wget 耍流氓无视 robots.txt 协议</p>
<p><code>-U &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6&quot;</code>	#伪造 agent 信息</p>
]]></content>
      <tags>
        <tag>网络</tag>
        <tag>wget</tag>
        <tag>Linux 命令行</tag>
        <tag>Web Crawling</tag>
        <tag>Software Development</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 下 git 运行出现 fatal: open /dev/null or dup failed: No such file or directory</title>
    <url>/2018/06/19/win10-%E4%B8%8B-git-%E8%BF%90%E8%A1%8C%E5%87%BA%E7%8E%B0-fatal-open-dev-null-or-dup-failed-No-such-file-or-directory/</url>
    <content><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>以管理员运行 <code>CMD</code> ，输入命令 <code>sfc /scannow</code> 进行修复操作，然后重启就可以用了。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>下载 <a href="/file/null.rar">null.sys</a> 文件替换到 <code>C:\Windows\System32\drivers\null.sys</code></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>windows10</tag>
        <tag>null.sys</tag>
        <tag>系统修复</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下右键菜单添加“打开cmd”</title>
    <url>/2019/08/08/win10%E4%B8%8B%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%89%93%E5%BC%80cmd%E2%80%9D/</url>
    <content><![CDATA[<blockquote>
<p>最近使用cmd比较多，就想在某个文件夹下右键打开cmd，这样不用每次都在默认情况下切换目录。无奈win10 1703版本下shift+右键不能打开cmd，只能打开powershell。</p>
</blockquote>
<p>好，那就自己整一个吧。</p>
<p>首先，在桌面新建一个文本文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here]</span><br><span class="line">@=&quot;在此处打开命令行&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command]</span><br><span class="line">@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt]</span><br><span class="line">@=&quot;在此处打开命令行&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command]</span><br><span class="line">@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot; \&quot;cd %1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here]</span><br><span class="line">@=&quot;在此处打开命令行&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command]</span><br><span class="line">@=&quot;\&quot;C:\\Windows\\System32\\cmd.exe\&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>然后、将上面内容粘贴到该文本文档中，保存。<strong>并将该文本文档以.reg结尾即可，名字可以随意取。</strong>（PS：<code>@=&quot;此处打开命令行&quot;</code>  该引号内文字可以随意修改成你想要显示的文字）</p>
<p>最后，双击注册一下就可以了，结果右键菜单中就有了。</p>
]]></content>
      <tags>
        <tag>Windows 10</tag>
        <tag>Registry编辑</tag>
        <tag>右键菜单</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>windows mysql 自动备份的几种方法</title>
    <url>/2017/02/07/windows%20mysql%20%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>基于之前的文章方法，加入批处理命令即可实现自动备份。只是由于批处理命令中对于备份文件的名字按照时间命名比较特别，所以特别整理一文。</p>
</blockquote>
<h3 id="复制date文件夹备份"><a href="#复制date文件夹备份" class="headerlink" title="复制date文件夹备份"></a>复制date文件夹备份</h3><p>假想环境：<br>MySQL   安装位置：C:\MySQL<br>论坛数据库名称为：bbs<br>数据库备份目的地：C:\db_bak\</p>
<p>新建db_bak.bat，写入以下代码</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop mysql</span><br><span class="line"><span class="built_in">xcopy</span> c:\mysql\data\bbs\*.* c:\db_bak\bbs\<span class="variable">%date:~0,10%</span>\ /S /I</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql</span><br></pre></td></tr></table></figure>

<p>然后使用Windows的“计划任务”定时执行该批处理脚本即可。（例如：每天凌晨3点执行back_db.bat）</p>
<p>解释：备份和恢复的操作都比较简单，完整性比较高，控制备份周期比较灵活，例如，用%date:<del>0,10%。此方法适合有独立主机但对mysql没有管理经验的用户。缺点是占用空间比较多，备份期间mysql会短时间断开（例如：针对30M左右的数据库耗时5s左右）,针对%date:</del>0,10%的用法参考           。</p>
<h3 id="mysqldump备份成sql文件"><a href="#mysqldump备份成sql文件" class="headerlink" title="mysqldump备份成sql文件"></a>mysqldump备份成sql文件</h3><p>假想环境：</p>
<p>MySQL   安装位置：C:\MySQL<br>论坛数据库名称为：bbs<br>MySQL root   密码：123456<br>数据库备份目的地：D:\db_backup\</p>
<p>脚本：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> &quot;Ymd=<span class="variable">%date:~,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span>&quot;</span><br><span class="line"><span class="function">C:\<span class="title">MySQL</span>\<span class="title">bin</span>\<span class="title">mysqldump</span> --<span class="title">opt</span> -<span class="title">u</span> <span class="title">root</span> --<span class="title">password</span>=123456 <span class="title">bbs</span> &gt; <span class="title">D</span>:\<span class="title">db_backup</span>\<span class="title">bbs_</span>%<span class="title">Ymd</span>%.<span class="title">sql</span></span></span><br><span class="line"><span class="function">@<span class="title">echo</span> <span class="title">on</span></span></span><br></pre></td></tr></table></figure>

<p>将以上代码保存为backup_db.bat</p>
<p>然后使用Windows的“计划任务”定时执行该脚本即可。（例如：每天凌晨5点执行back_db.bat）</p>
<p>说明：此方法可以不用关闭数据库，并且可以按每一天的时间来名称备份文件。</p>
<p>通过%date:<del>5,2%来组合得出当前日期，组合的效果为yyyymmdd,date命令得到的日期格式默认为yyyy-mm-dd(**如果不是此格式可以通过pause命令来暂停命令行窗口看通过%date:</del>,20%得到的当前计算机日期格式**)，所以通过%date:<del>5,2%即可得到日期中的第五个字符开始的两个字符，例如今天为2009-02-05,通过%date:</del>5,2%则可以得到02。（日期的字符串的下标是从0开始的）</p>
<h3 id="利用WinRAR对MySQL数据库进行定时备份。"><a href="#利用WinRAR对MySQL数据库进行定时备份。" class="headerlink" title="利用WinRAR对MySQL数据库进行定时备份。"></a>利用WinRAR对MySQL数据库进行定时备份。</h3><p>对于MySQL的备份，最好的方法就是直接备份MySQL数据库的Data目录。下面提供了一个利用WinRAR来对Data目录进行定时备份的方法。</p>
<p>首先当然要把WinRAR安装到计算机上。</p>
<p>将下面的命令写入到一个文本文件里</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop mysql</span><br><span class="line"><span class="function">c:\<span class="title">progra</span>~1\<span class="title">winrar</span>\<span class="title">winrar</span> <span class="title">a</span> -<span class="title">ag</span> -<span class="title">k</span> -<span class="title">r</span> -<span class="title">s</span> <span class="title">d</span>:\<span class="title">mysql.rar</span> <span class="title">d</span>:\<span class="title">mysql</span>\<span class="title">data</span></span></span><br><span class="line"><span class="function"><span class="title">net</span> <span class="title">start</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure>

<p>保存，然后将文本文件的扩展名修改成CMD。进入控制面版，打开计划任务，双击“添加计划任务”。在计划任务向导中找到刚才的CMD文件，接着为这个任务指定一个运行时间和运行时使用的账号密码就可以了。</p>
<p>这种方法缺点是占用时间比较多，备份期间压缩需要时间，mysql断开比第一种方法更多的时间，但是对于文件命名很好。</p>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>github</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 10 界面优化</title>
    <url>/2019/09/19/windows-10-%E7%95%8C%E9%9D%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="字体修改软件-noMeiryoUI"><a href="#字体修改软件-noMeiryoUI" class="headerlink" title="字体修改软件 - noMeiryoUI"></a>字体修改软件 - noMeiryoUI</h2><p>noMeiryoUI 官方版是Windows 7&#x2F;8&#x2F;8.1&#x2F;10中画面的各部分的字体设定工具。<br>何故Windows 7&#x2F;8&#x2F;8.1&#x2F;10上标准的画面的各部分的字体的设定是不行的事，所以作成了这个。<br>软件只是对主题字体风格设置进行修改，而不是对系统字体本身的渲染、修改，所以无风险，无占用。<br>软件可以修改不同的字体，辅助 win 10 第三方主题文件应用字体。</p>
<h2 id="字体渲染软件-MacType"><a href="#字体渲染软件-MacType" class="headerlink" title="字体渲染软件 - MacType"></a>字体渲染软件 - MacType</h2><p>MacType 是一个开源项目，能接管Windows系统的 GDI 字体渲染功能，实现比Mac系统更华丽的字体渲染效果！ MacType 支持 WinXP 、Win7 、Win8 、Win10 等操作系统。安装过程十分简单，到最后，它才会让我们在四种加载方式之间进行选择，对于一般用户来说，最好选择 MacTray 方式加载（ MacTray 也有两种方式，建议采用独立加载模式）。这种方式会在系统托盘中显示一个控制图标，方便配置。</p>
<h2 id="开始菜单程序-StartIsBack"><a href="#开始菜单程序-StartIsBack" class="headerlink" title="开始菜单程序 - StartIsBack"></a>开始菜单程序 - StartIsBack</h2><p>StartIsBack 是一款 Win8 和 Win10 开始菜单辅助工具,可以让 Win8 和 Win10 能够使用跟 Win7 中一样的经典开始菜单，此款软件小巧且不需要繁琐的设置，在同类软件中应该是最好的，推荐大家使用。</p>
<h2 id="个性化桌面定制工具-Rainmeter"><a href="#个性化桌面定制工具-Rainmeter" class="headerlink" title="个性化桌面定制工具 - Rainmeter"></a>个性化桌面定制工具 - Rainmeter</h2><p>Rainmeter 可以在你的桌面上显示包含内存，电池，RSS，天气等信息的可定制皮肤,许多皮肤还具有一定的功能：它们能帮你记录下你即将要做的事，把你的微博发布出去，控制媒体播放器等。它还能美化你的桌面，你可以完全按照自己的意愿去定制一款你想要皮肤，让你的桌面与众不同。 Rainmeter 是一款能够发挥你想象力和创新力的工具.</p>
<h2 id="资源管理器调整工具-OldNewExplorer"><a href="#资源管理器调整工具-OldNewExplorer" class="headerlink" title="资源管理器调整工具 - OldNewExplorer"></a>资源管理器调整工具 - OldNewExplorer</h2><p>OldNewExplorer 是一款资源管理器调整工具，可以在系统中调整资源管理器的软件，使用这款软件用户可以隐藏“这台电脑”中的菜单，按钮或文件夹。</p>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>Windows 10</tag>
        <tag>资源管理器调整</tag>
        <tag>Rainmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>windows7登陆界面背景修改</title>
    <url>/2016/11/25/windows7%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%E8%83%8C%E6%99%AF%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="执行reg"><a href="#执行reg" class="headerlink" title="执行reg"></a>执行reg</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\Background]</span><br><span class="line">&quot;OEMBackground&quot;=dword:00000001</span><br></pre></td></tr></table></figure>
<h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>打开文件夹<code>C:\Windows\System32\oobe\info\backgrounds</code>(如果没有这个文件夹的请自行创建)。</p>
<p>添加自己选择好的图片，文件名修改成<code>backgroundDefault.jpg</code>.</p>
<p><strong>注：我们编辑好的登录界面的背景图片<code>backgroundDefault.jpg</code>，其体积一定控制在250KB以内；否则，我们修改后的登录界面的背景图片就无法了.</strong></p>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>系统配置</tag>
        <tag>Windows自定义</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下安装php真正的多线程扩展pthreads教程</title>
    <url>/2017/10/16/windows%E4%B8%8B%E5%AE%89%E8%A3%85php%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A9%E5%B1%95pthreads%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>扩展地址：<span class="exturl" data-url="aHR0cDovL2RvY3MucGhwLm5ldC9tYW51YWwvemgvYm9vay5wdGhyZWFkcy5waHA=">http://docs.php.net/manual/zh/book.pthreads.php<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>php5.3 或以上，且为线程安全版本。apache 和 php 使用的编译器必须一致。</p>
<p>通过 <code>phpinfo()</code> 查看 <code>Thread Safety</code> 为 <code>enabled</code> 则为线程安全版。</p>
<p>通过 <code>phpinfo()</code> 查看 <code>Compiler</code> 项可以知道使用的编译器。本人的为：MSVC9 (Visual C++ 2008)。</p>
<h2 id="本人使用环境"><a href="#本人使用环境" class="headerlink" title="本人使用环境"></a>本人使用环境</h2><p>32位 windows xp sp3 ，wampserver2.2d（php5.3.10-vc9 + apache2.2.21-vc9）。</p>
<h2 id="一、下载-pthreads-扩展"><a href="#一、下载-pthreads-扩展" class="headerlink" title="一、下载 pthreads 扩展"></a>一、下载 pthreads 扩展</h2><p>下载地址：<span class="exturl" data-url="aHR0cDovL3dpbmRvd3MucGhwLm5ldC9kb3dubG9hZHMvcGVjbC9yZWxlYXNlcy9wdGhyZWFkcw==">http://windows.php.net/downloads/pecl/releases/pthreads<i class="fa fa-external-link-alt"></i></span></p>
<p>根据本人环境，我下载的是 pthreads-2.0.8-5.3-ts-vc9-x86 。</p>
<pre><code>2.0.8 代表 pthreads 的版本。
5.3 代表 php 的版本。
ts 表示 php 要线程安全版本的。
vc9 表示 php 要 Visual C++ 2008 编译器编译的。
x86 则表示32位的
</code></pre>
<h2 id="二、安装-pthreads-扩展"><a href="#二、安装-pthreads-扩展" class="headerlink" title="二、安装 pthreads 扩展"></a>二、安装 pthreads 扩展</h2><p>复制 <code>php_pthreads.dll</code> 到目录 <code>bin\php\ext\</code> 下面。（本人路径D:\wamp\bin\php\php5.3.10\ext）</p>
<p>复制 <code>pthreadVC2.dll</code> 到目录 <code>bin\php\</code> 下面。（本人路径D:\wamp\bin\php\php5.3.10）</p>
<p>复制 <code>pthreadVC2.dll</code> 到目录 <code>C:\windows\system32</code> 下面。</p>
<p>打开 php 配置文件 <code>php.ini</code>。在后面加上 <code>extension=php_pthreads.dll</code></p>
<p>提示！Windows系统需要将 <code>pthreadVC2.dll</code> 所在路径加入到 <code>PATH</code> 环境变量中。</p>
<p>我的电脑—&gt;鼠标右键—&gt;属性—&gt;高级—&gt;环境变量—&gt;系统变量—&gt;找到名称为 Path 的—&gt;编辑—&gt;在变量值最后面加上 pthreadVC2.dll 的完整路径（本人的为C:\WINDOWS\system32\pthreadVC2.dll）。</p>
<h2 id="三、测试-pthreads-扩展"><a href="#三、测试-pthreads-扩展" class="headerlink" title="三、测试 pthreads 扩展"></a>三、测试 pthreads 扩展</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncOperation</span> <span class="keyword">extends</span> \<span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;arg = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;arg)&#123;</span><br><span class="line">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, <span class="variable">$this</span>-&gt;arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$thread</span> = <span class="keyword">new</span> <span class="title class_">AsyncOperation</span>(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$thread</span>-&gt;<span class="title function_ invoke__">start</span>())</span><br><span class="line">    <span class="variable">$thread</span>-&gt;<span class="title function_ invoke__">join</span>();</span><br></pre></td></tr></table></figure>

<p>运行以上代码出现 Hello World ，说明 pthreads 扩展安装成功！ </p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>多线程</tag>
        <tag>Windows</tag>
        <tag>PECL</tag>
        <tag>pthreads</tag>
      </tags>
  </entry>
  <entry>
    <title>一款开源指纹识别工具</title>
    <url>/2017/07/07/%E4%B8%80%E6%AC%BE%E5%BC%80%E6%BA%90%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>一款开源指纹识别工具。</p>
<hr>
<hr>
<p> 开源工具使用说明：<br>      -u 一个域名或IP,如果输入更多域名或IP使用‘,’分隔；<br>      -r  读取本地域名或IP文件地址；<br>      -t  输入一个线程数量，默认线程为50；<br>      -p  设置一个请求端口，默认端口为80；<br>      -s  设置一个请求协议，默认请求协议为http.(http、https)；<br>      -h  查看使用帮助；<br>      -o  输出识别结果到本地文件；<br>      -m  选择一个常规识别模式，默认使用模式为1；（1：快速识别一条指纹 2：获取命中率高的指纹 3：得到所有匹配的指纹）<br>      –http-request 设置一个自定义请求URL；<br>      –http-response 设置一个自定义关键字符。(支持正则表达式字符，自定义枚举指纹字符)<br>      注：自定义识别模式参数为 –http-request &#x2F;robots.txt –http-response discuz；不能和-m 常规识别模式一起使用。-u和-r参数不能同时使用。<br>	<br>	  1. 使用-m参数选择常规识别模式，有3种可选模式。下面具体说明：<br>	     -m 1：快速识别一条指纹，请求设置的url，获取相应识别方式的响应信息，进行数据库指纹遍历匹配，匹配到一条则跳出程序，显示识别结果。（速度较快）<br>		 -m 2: 获取命中率高的指纹，例如请求url,进行指纹库全部遍历匹配，比如一个网址，命中了1个dedecms，2个 phpcms，1个discuz，那么显示的识别结果为phpcms程序。<br>		 -m 3: 获取匹配识别所有的指纹信息，请求url获取响应信息，进行指纹库全部遍历匹配，最后获取指纹识别所有结果。（速度较慢、数据最全）<br>	  2. 使用–http-request、–http-response参数自定义识别模式，下面具体说明：<br>	     使用自定义识别模式应同时使用–http-request、–http-response两个参数，第一个参数设置为请求路径，第二个参数设置响应信息关键字符（支持正则表达式、不过注意大小写问题）<br>	<br>	  例：java -jar Dayu.jar -r d:\1.txt -t 100 –http-request &#x2F; –http-response tomcat<br>	      java -jar Dayu.jar -u <span class="exturl" data-url="aHR0cDovL3d3dy5kaXNjdXoubmV0LHd3dy5kZWRlY21zLmNvbS8=">www.discuz.net,www.dedecms.com<i class="fa fa-external-link-alt"></i></span> -o d:\result.txt<br>		  java -jar Dayu.jar -u cn.wordpress.org -s https -p 443  -m 3<br>		<br> Dayu.jar程序说明：<br>      Feature.json指纹文件放到D盘根目录(d:\Feature.json),如无D磁盘，请自行下载源码更改org.secbug.conf下Context.java文件中的currpath常量。<br>	<br> 在此说明：<br>      指纹识别离不开指纹库的强大。希望用户多多在我们平台 <span class="exturl" data-url="aHR0cDovL3d3dy5zZWNidWcub3JnOjgwODAv">http://www.secbug.org:8080/<i class="fa fa-external-link-alt"></i></span> 提交指纹，我们一起进步。<br>	<br>	  ☆☆ 本版本为第二版，第一版基于数据库sql文件，可保存指纹识别结果。如有需要，请联系QQ212125278所取。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01zMHgwL0RheXUx">https://github.com/Ms0x0/Dayu1<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>指纹识别</tag>
        <tag>网络安全</tag>
        <tag>开源</tag>
        <tag>命令行工具</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>一键批量ping任意ip段的存活主机</title>
    <url>/2017/04/11/%E4%B8%80%E9%94%AE%E6%89%B9%E9%87%8Fping%E4%BB%BB%E6%84%8Fip%E6%AE%B5%E7%9A%84%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<p>先来看下面写好的批处理代码，有木有眼花缭乱的感觉，不要害怕哦，其实核心代码只有一行而已！准确的说应该是将一些最基本的DOS命令组合在了一起。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">color</span> e</span><br><span class="line"><span class="built_in">title</span> 批处理扫网段主机</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line">@<span class="keyword">for</span> /f &quot;tokens=<span class="number">1</span>-<span class="number">4</span> delims=.&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (ip.txt) <span class="keyword">do</span> (@<span class="keyword">for</span> /l <span class="variable">%%n</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">255</span>) <span class="keyword">do</span> @<span class="built_in">ping</span> -w <span class="number">600</span> -n <span class="number">1</span> -l <span class="number">1</span> <span class="variable">%%i</span>.<span class="variable">%%j</span>.<span class="variable">%%k</span>.<span class="variable">%%n</span>|<span class="built_in">find</span>  /i &quot;ttl&quot;)</span><br><span class="line"><span class="built_in">echo</span>.&amp;<span class="built_in">echo</span> 扫描完毕,按任意键退出...&amp;<span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure>

<p>复制以上代码粘贴到记事本文档里，然后另存为 <code>批量ping.bat</code> ，再新建一个空白的文本文档，重命名为 <code>ip.txt</code> 。一切准备完事儿，就可以将你要批量扫描的ip段的地址放入 <code>ip.txt</code> 里（比如要扫自己对应的内网IP段就可以在 <code>ip.txt</code> 里输入 <code>192.168.0.1</code> 后保存），然后双击一键运行 <code>批量ping.bat</code> 批处理脚本就可以看到返回的结果了。格式类似于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">来自 192.168.0.1 的回复: 字节=1 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.0.101 的回复: 字节=1 时间=31ms TTL=64</span><br><span class="line">来自 192.168.0.103 的回复: 字节=1 时间=326ms TTL=64</span><br><span class="line">来自 192.168.0.104 的回复: 字节=1 时间=26ms TTL=64</span><br><span class="line">来自 192.168.0.108 的回复: 字节=1 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.0.162 的回复: 字节=1 时间&lt;1ms TTL=128</span><br><span class="line">……此处省略余下的所有可能的结果……</span><br></pre></td></tr></table></figure>
<p>下面我就来解读一下介个看起来有点儿吃力的批处理命令吧。我们分拆来看一下，<code>ping -w 600 -n 1  -l 1</code> 表示对指定ip地址ping一次，等待超时的时间为600毫秒；<code>|find  /i &quot;ttl&quot;</code> 指的是仅显示ping返回结果中带“ttl”字符串的结果，也就是将指定网段内不存活的主机过滤掉了。而前面的 <code>@for /f &quot;tokens=1-4 delims=.&quot; %%i in (ip.txt)</code>  意思是将“ip.txt”里的字符串（也就是我们要查找的ip段的地址）以“.”为界分割为四部分，分别赋予后面的变量 %%i、%%j、%%k 。最后剩下的 <code>@for /l %%n in (1,1,255)</code> 则表示从1开始循环+1递增一直到255停止，然后赋予变量 %%n 。不知道这样说同学能否看懂呢？看不懂滴可以在cmd窗口里输入 <code>for /?</code> 查看一下命令详解吧。</p>
]]></content>
      <tags>
        <tag>批处理脚本</tag>
        <tag>系统管理员工具</tag>
        <tag>IP扫描</tag>
        <tag>Windows批处理</tag>
        <tag>CMD技巧</tag>
        <tag>Network诊断工具</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ffmpeg 下载 m3u8 视频</title>
    <url>/2022/10/05/%E4%BD%BF%E7%94%A8-ffmpeg-%E4%B8%8B%E8%BD%BD-m3u8-%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>下载视频，并将m3u8格式转为mp4格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8 playlist.mp4</span><br><span class="line">或者</span><br><span class="line">ffmpeg -i https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8 -c copy playlist.mp4</span><br></pre></td></tr></table></figure>

<p>下载中。。。由于视频很大，下载需要很长长长时间(1个G的视频可能需下载几小时…)。<br> 可以通过如下指令进行下载提速（下载速度大约能提升到几到十几分钟，很棒了哦，起码比百度云快）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8 -c copy -bsf:a aac_adtstoasc playlist_1.mp4</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>FFmpeg</tag>
        <tag>m3u8</tag>
        <tag>视频处理</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Snipaste 提高您的工作效率</title>
    <url>/2022/02/09/%E4%BD%BF%E7%94%A8-Snipaste-%E6%8F%90%E9%AB%98%E6%82%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</url>
    <content><![CDATA[<h2 id="Boost-your-productivity-with-Snipaste"><a href="#Boost-your-productivity-with-Snipaste" class="headerlink" title="Boost your productivity with Snipaste"></a>Boost your productivity with Snipaste</h2><p>Snipaste is a simple but powerful snipping tool, and also<br>allows you to pin the screenshot back onto the screen.<br>Download and start the application, press <kbd>F1</kbd> to start snipping,<br>then press <kbd>F3</kbd> to paste it as a floating window. That’s it!</p>
<p>You can also convert text or color info in the clipboard into a floating image window.<br>Such windows can be zoomed, rotated, flipped, made translucent, and even made click-through!<br>If you are a programmer, a designer or whoever works much time before the computer,<br>you will be surprised how it can help you get your work done more efficiently!</p>
<p>Snipaste is easy and intuitive to use,<br>but there are also many hidden features that can make your life even more efficient.<br>Read the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNuaXBhc3RlLmNvbQ==">manual<i class="fa fa-external-link-alt"></i></span><br>if you are interested.</p>
<h3 id="Intuitive-snipping"><a href="#Intuitive-snipping" class="headerlink" title="Intuitive snipping"></a>Intuitive snipping</h3><p><img src="/images/pasted-8.png" alt="upload successful"></p>
<ul>
<li>Auto detect UI elements</li>
<li>Pixel-level control</li>
<li>Color picker (try <code>F1</code>, <code>C</code>, <code>F3</code>)</li>
<li><strong>History play back</strong> (<code>,</code>&#x2F;<code>.</code>)</li>
<li>Multi-screen support</li>
<li>HiDPI (retina display) support</li>
</ul>
<h3 id="Paste-images-as-topmost-floating-windows"><a href="#Paste-images-as-topmost-floating-windows" class="headerlink" title="Paste images as topmost floating windows"></a>Paste images as topmost floating windows</h3><p><img src="/images/pasted-9.png" alt="upload successful"></p>
<ul>
<li>The source (in the clipboard) could be                            <ul>
<li>Image</li>
<li>Plain text</li>
<li>HTML text</li>
<li>Color info text</li>
<li>Image files: PNG, JPG, BMP, TGA, ICO, TIFF and <strong>GIF</strong></li>
</ul>
</li>
<li>Supported operations<ul>
<li>Zoom (<code>mouse scroll</code> or <code>+</code>&#x2F;<code>-</code>) or set speed for GIF </li>
<li>Rotate (<code>1</code>&#x2F;<code>2</code>) or jump to previous&#x2F;next frame for GIF</li>
<li>Flip (<code>3</code>&#x2F;<code>4</code>)</li>
<li>Set transparency (<code>Ctrl</code> + <code>mouse scroll</code> or <code>Ctrl</code> + <code>+</code>&#x2F;<code>-</code>)</li>
<li>Mouse click-through (<code>X</code>, and use <code>F4</code> to cancel)</li>
<li>Image editing (<code>Space</code>)</li>
<li>Thumbnail mode (<code>Shift</code> + <code>Double click</code>)</li>
<li>Hide (<code>Double click</code>)</li>
<li>…</li>
</ul>
</li>
<li>Color picker (<code>Alt</code>)</li>
<li>Drag &amp; drop</li>
<li><strong>Grouping</strong></li>
<li><strong>Auto backup &amp; restore</strong></li>
</ul>
<h3 id="Easy-image-annotation"><a href="#Easy-image-annotation" class="headerlink" title="Easy image annotation"></a>Easy image annotation</h3><p><img src="/images/pasted-10.png" alt="upload successful"></p>
<ul>
<li>Rich shapes                            <ul>
<li>Rectangle</li>
<li>Ellipse</li>
<li>Linestrip</li>
<li>Arrow</li>
<li>Pencil</li>
<li>Marker pen</li>
<li>Text</li>
</ul>
</li>
<li>Advanced annotation tools                            <ul>
<li>Mosaic</li>
<li>Gaussian blur</li>
<li>Eraser</li>
</ul>
</li>
<li>Undo &amp; redo</li>
</ul>
<h3 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h3><p><img src="/images/pasted-11.png" alt="upload successful"></p>
<ul>
<li>Theme color, interface font, tray icon, and more</li>
<li>Hot keys</li>
<li>Detailed functionality options</li>
</ul>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>Snipaste</tag>
        <tag>效率工具</tag>
        <tag>颜色选择器</tag>
        <tag>截图工具</tag>
      </tags>
  </entry>
  <entry>
    <title>书签脚本 - 简单编辑Cookie</title>
    <url>/2017/03/12/%E4%B9%A6%E7%AD%BE%E8%84%9A%E6%9C%AC-%E7%AE%80%E5%8D%95%E7%BC%96%E8%BE%91Cookie/</url>
    <content><![CDATA[<ol>
<li>将一下代码保存为浏览器书签</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;Linx Edit cookie:&quot;</span>,<span class="variable language_">document</span>.<span class="property">cookie</span>);<span class="title function_">void</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>打开需要查询或编辑的网站</li>
<li>点击书签即可对Cookie进行操作</li>
</ol>
<blockquote>
<p>Linx 是作者的名称</p>
</blockquote>
]]></content>
      <tags>
        <tag>界面优化</tag>
        <tag>JavaScript</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 PHP 文件中的 Shebang 行错误</title>
    <url>/2024/11/02/%E4%BF%AE%E5%A4%8D-PHP-%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84-Shebang-%E8%A1%8C%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 Linux 系统中，我们经常使用 Shebang（<code>#!</code>）行来指定脚本的解释器。对于 PHP 脚本，我们通常会在文件开头写上 <code>#!/usr/bin/env php</code>。然而，有时候即使命令行能够识别<code>php</code> 指令，使用 Shebang 行时却会报错 “No such file or directory”。这通常是因为文件的编码格式问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="步骤-1-检查文件编码"><a href="#步骤-1-检查文件编码" class="headerlink" title="步骤 1: 检查文件编码"></a>步骤 1: 检查文件编码</h3><p>首先，我们需要检查文件的编码格式。在 Linux 系统中，我们可以使用 <code>vim</code> 编辑器来查看和修改文件的编码格式。</p>
<ol>
<li>打开终端。</li>
<li>输入 <code>vim yourfile.php</code> 命令来打开你的 PHP 文件。</li>
<li>在 <code>vim</code> 中，输入 <code>:set ff</code> 命令来查看文件的格式。</li>
</ol>
<h3 id="步骤-2-修改文件编码"><a href="#步骤-2-修改文件编码" class="headerlink" title="步骤 2: 修改文件编码"></a>步骤 2: 修改文件编码</h3><p>如果 <code>:set ff</code> 命令的输出显示 <code>fileformat=dos</code>，那么你需要将文件格式更改为 <code>unix</code>。</p>
<ol>
<li>在 <code>vim</code> 中，输入 <code>:set ff=unix</code> 命令来更改文件格式。</li>
<li>按下 Esc 键退出命令模式。</li>
<li>输入 <code>:wq</code> 命令保存更改并退出 <code>vim</code>。</li>
</ol>
<h3 id="步骤-3-验证更改"><a href="#步骤-3-验证更改" class="headerlink" title="步骤 3: 验证更改"></a>步骤 3: 验证更改</h3><p>更改文件编码后，再次尝试运行你的 PHP 脚本。如果 Shebang 行不再报错，那么问题已经解决。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Shebang</tag>
        <tag>Linux-shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭Superfetch服务：系统性能的双刃剑？</title>
    <url>/2025/07/24/%E5%85%B3%E9%97%ADSuperfetch%E6%9C%8D%E5%8A%A1%EF%BC%9A%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9A%84%E5%8F%8C%E5%88%83%E5%89%91%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="Superfetch-服务是什么"><a href="#Superfetch-服务是什么" class="headerlink" title="Superfetch 服务是什么"></a>Superfetch 服务是什么</h2><p>Superfetch，直译为 “超级预取” ，是 Windows 系统中的一项智能服务，最早在 Windows Vista 系统中引入，后续的 Windows 7、Windows 8 以及 Windows 10 等系统版本也都沿用了这一功能，其核心作用在于提升系统和应用程序的运行速度。</p>
<p>它的运行原理基于对用户使用习惯的深度学习与分析。当我们日常使用电脑时，Superfetch 会在后台默默监控我们频繁开启的各类程序。一旦它 “熟悉” 了我们的使用模式，就会将这些常用程序运行时所依赖的数据和代码，提前加载到内存之中。就好比你每天早上出门前，会提前把当天要用的文件准备好放在包里，等真正需要的时候，就能迅速拿出来使用，无需再临时翻找。</p>
<p>举个简单的例子，假如你每天上班打开电脑后的第一件事就是启动微信与同事沟通工作，那么 Superfetch 服务就会 “记住” 这个习惯。在你下次开机时，它会提前将微信运行所需的关键文件和数据从硬盘读取到内存里。这样一来，当你点击微信图标时，程序便能从内存中快速获取所需内容，实现几乎瞬间启动，大大节省了等待时间，让你的工作衔接更加顺畅高效。又或者你经常使用 Photoshop 处理图片，Superfetch 也会将 Photoshop 运行时可能用到的图像算法库、常用滤镜数据等提前加载，使得你在启动 Photoshop 以及使用各种功能时，响应速度明显加快，创作过程更加流畅。</p>
<p>不过，Superfetch 在发挥作用的过程中，也会对系统资源产生一定的占用。它需要消耗一定的 CPU 运算资源来分析用户行为模式，同时还会占用一部分内存空间用于存放预读取的数据，这也是我们在考虑是否禁用它时需要权衡的因素。</p>
<h2 id="为什么有人想禁用-Superfetch-服务"><a href="#为什么有人想禁用-Superfetch-服务" class="headerlink" title="为什么有人想禁用 Superfetch 服务"></a>为什么有人想禁用 Superfetch 服务</h2><p>尽管 Superfetch 服务出发点是好的，旨在提升系统性能，但在实际使用中，不少用户却萌生出禁用它的想法，这背后有着多方面的原因。</p>
<h3 id="占用过多系统资源"><a href="#占用过多系统资源" class="headerlink" title="占用过多系统资源"></a>占用过多系统资源</h3><p>Superfetch 服务在运行过程中，对系统资源有着较高的需求。它需要持续分析用户的使用习惯，这一过程会占用一定的 CPU 资源，尤其是在系统刚刚启动或者用户使用习惯发生较大变化时，CPU 的占用率会明显上升，导致电脑在这段时间内反应迟缓，打开其他程序时也会出现卡顿现象。比如，当你早上开机后，想要快速打开多个办公软件开始一天的工作，却发现电脑变得异常迟钝，很可能就是 Superfetch 服务在后台大量占用 CPU 资源，使得其他程序无法及时获取足够的运算资源来启动。</p>
<p>同时，Superfetch 会将预读取的数据存储在内存中，这无疑会占用相当一部分内存空间。对于那些内存容量本身就不大的电脑来说，这可能会导致系统内存紧张。当内存不足时，系统会频繁地进行内存与硬盘之间的数据交换，也就是我们常说的 “虚拟内存” 操作，这会大大降低系统的运行效率，使电脑整体变得卡顿，严重影响用户体验。</p>
<h3 id="对-SSD-优化作用小"><a href="#对-SSD-优化作用小" class="headerlink" title="对 SSD 优化作用小"></a>对 SSD 优化作用小</h3><p>在固态硬盘（SSD）普及之前，Superfetch 服务对于提升机械硬盘的读取速度效果显著。因为机械硬盘的读写速度相对较慢，通过预读取数据到内存，可以有效减少等待时间。然而，随着 SSD 的广泛应用，情况发生了变化。SSD 采用闪存芯片作为存储介质，其随机读写速度比机械硬盘快了数倍甚至数十倍，能够在极短的时间内读取大量数据。在这种情况下，Superfetch 服务提前预取数据的优势就不再那么明显，其对系统性能的提升效果变得微乎其微。许多用户发现，即使禁用了 Superfetch 服务，使用 SSD 的电脑在程序启动速度和系统响应速度上依然表现出色，并没有因为缺少了 Superfetch 的预取功能而受到明显影响。</p>
<h3 id="导致硬盘占用率高"><a href="#导致硬盘占用率高" class="headerlink" title="导致硬盘占用率高"></a>导致硬盘占用率高</h3><p>有时候，Superfetch 服务可能会出现异常情况，导致硬盘占用率居高不下。这是因为它在预取数据时，可能会频繁地对硬盘进行读写操作。当硬盘的读写任务过于繁重时，就会出现 100% 占用的情况，此时电脑会变得异常卡顿，几乎无法进行正常操作。比如，你正在使用电脑进行视频剪辑或者玩大型游戏，突然发现电脑变得反应迟缓，打开文件或者切换程序都要等待很长时间，查看任务管理器后发现硬盘占用率达到了 100%，而罪魁祸首很可能就是 Superfetch 服务。这种异常情况不仅会影响当前正在进行的工作和娱乐，还可能对硬盘的寿命产生一定的影响。</p>
<h2 id="禁用-Superfetch-服务的详细步骤"><a href="#禁用-Superfetch-服务的详细步骤" class="headerlink" title="禁用 Superfetch 服务的详细步骤"></a>禁用 Superfetch 服务的详细步骤</h2><p>不同版本的 Windows 系统，禁用 Superfetch 服务的方法略有差异，下面分别为大家介绍 Windows 7、Windows 10 和 Windows 11 系统下的具体操作步骤。</p>
<h3 id="Windows-7-系统"><a href="#Windows-7-系统" class="headerlink" title="Windows 7 系统"></a>Windows 7 系统</h3><ol>
<li><p><strong>打开服务管理器</strong>：同时按下键盘上的<code>Win + R</code>组合键，调出 “运行” 对话框，在对话框中输入<code>services.msc</code>，然后按下回车键<code>Enter</code>，即可打开服务管理器窗口。</p>
</li>
<li><p><strong>找到 Superfetch 服务</strong>：在服务管理器窗口中，会显示出众多系统服务，这些服务按照字母顺序排列。我们需要在列表中仔细查找名为 “Superfetch” 的服务。</p>
</li>
<li><p><strong>停止 Superfetch 服务</strong>：找到 “Superfetch” 服务后，双击该服务，打开其属性窗口。在属性窗口的 “常规” 标签页中，将 “启动类型” 从原来的 “自动” 设置为 “已禁用”。设置完成后，点击 “停止” 按钮，此时 Superfetch 服务就会停止运行。</p>
</li>
<li><p><strong>保存设置</strong>：点击 “确定” 按钮，保存我们所做的更改设置。这样，在下次系统启动时，Superfetch 服务就不会自动运行了。</p>
</li>
</ol>
<h3 id="Windows-10-系统"><a href="#Windows-10-系统" class="headerlink" title="Windows 10 系统"></a>Windows 10 系统</h3><ol>
<li><p><strong>打开计算机管理</strong>：在 Windows 10 桌面，右键点击 “此电脑” 图标，在弹出的菜单中选择 “管理” 菜单项，即可打开计算机管理窗口。</p>
</li>
<li><p><strong>进入服务选项</strong>：在打开的计算机管理窗口中，点击左侧列表中的 “服务和应用程序” 一项，展开该项后，再点击 “服务” 菜单项 ，此时在窗口右侧会显示出所有的系统服务列表。</p>
</li>
<li><p><strong>找到并设置 Superfetch 服务</strong>：在服务列表中找到 “superfetch” 一项，双击它打开 “superfetch” 的属性窗口。首先点击 “停止” 按钮，关闭当前正在运行的 superfetch 服务。然后为了防止下次开机时该服务自动启动，点击 “启动类型” 下拉菜单，在弹出的菜单中选择 “禁用” 菜单项。</p>
</li>
<li><p><strong>确认保存</strong>：完成上述设置后，点击 “确定” 按钮保存设置，关闭属性窗口即可。</p>
</li>
</ol>
<h3 id="Windows-11-系统"><a href="#Windows-11-系统" class="headerlink" title="Windows 11 系统"></a>Windows 11 系统</h3><ol>
<li><p><strong>使用服务应用程序</strong>：按下<code>Windows+S</code>组合键启动 “搜索” 菜单，在顶部的文本字段中输入 “服务”，然后单击相关搜索结果。在打开的服务窗口中找到 “SysMain” 条目（在 Windows 11 中 Superfetch 服务改名为 SysMain ），右键单击它，然后从上下文菜单中选择 “属性”，或者直接双击该服务。在弹出的属性窗口中，单击 “启动类型” 下拉菜单，然后从选项列表中选择 “禁用”。接下来，如果当前服务正在运行，请单击 “服务状态” 下的 “停止” 按钮，最后单击底部的 “确定” 以保存更改。完成后重新启动计算机，以使更改生效。</p>
</li>
<li><p><strong>使用命令提示符</strong>：按下<code>Windows+S</code>组合键启动搜索菜单，在文本字段中输入 “终端”，右键单击相关搜索结果，然后从上下文菜单中选择 “以管理员身份运行”。在弹出的用户帐户控制（UAC）提示中单击 “是”。单击顶部的向下箭头，然后选择 “Command Prompt”（命令提示符）。或者，也可以按下<code>Ctrl+Shift+2</code>组合键在新选项卡中启动命令提示符。在命令提示符窗口中，粘贴以下命令并点击<code>Enter</code>键停止服务：<code>net.exe stop sysmain</code>。接着，执行以下命令以禁用 Superfetch 在启动时加载：<code>sc config sysmain start=disabled</code>。</p>
</li>
<li><p><strong>使用注册表编辑器</strong>：按下<code>Windows+R</code>组合键启动运行命令，在文本字段中输入<code>regedit</code>，然后单击 “确定” 或点击<code>Enter</code>键启动注册表编辑器。在弹出的 UAC 提示中单击 “是”。在注册表编辑器中，将以下路径粘贴到顶部的地址栏中，然后点击<code>Enter</code>键，或者也可以使用左侧的导航窗格依次展开路径：<code>Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters</code>。在该路径下，右键单击空白区域，将光标悬停在 “新建” 上，然后从上下文菜单中选择 “DWORD（32 位）值”。将该条目命名为 “EnableSuperfetch”，然后双击它以修改属性。在 “数值数据” 下的文本字段中输入 “0” ，然后单击 “确定” 以保存更改。进行更改后，重新启动计算机以使更改生效。不过使用注册表编辑器时需格外小心，错误的修改可能会导致系统出现严重问题。</p>
</li>
</ol>
<h2 id="禁用-Superfetch-服务后的影响"><a href="#禁用-Superfetch-服务后的影响" class="headerlink" title="禁用 Superfetch 服务后的影响"></a>禁用 Superfetch 服务后的影响</h2><p>禁用 Superfetch 服务，犹如在电脑的系统生态中做出一次关键的 “调整”，这一操作会带来多方面的影响，既可能有性能提升的惊喜，也可能伴随着一些负面效应，需要我们全面客观地去看待。</p>
<h3 id="可能的性能提升"><a href="#可能的性能提升" class="headerlink" title="可能的性能提升"></a>可能的性能提升</h3><ol>
<li><p><strong>释放系统资源</strong>：正如前文所提到的，Superfetch 服务在运行时会占用一定的 CPU 和内存资源。当我们禁用它后，这些被占用的资源将被释放出来，可供其他程序使用。对于那些配置相对较低的电脑而言，这无疑是个好消息。例如，一台只有 4GB 内存的笔记本电脑，在禁用 Superfetch 服务后，原本被其占用的几百 MB 内存得以释放，电脑在运行多个程序时，内存不再那么紧张，程序之间的切换也变得更加流畅，不容易出现因内存不足而导致的卡顿现象。</p>
</li>
<li><p><strong>减少硬盘读写</strong>：Superfetch 服务为了实现预取功能，会频繁地对硬盘进行读写操作。尤其是在系统启动和程序运行初期，这种读写操作更为明显。禁用该服务后，硬盘的读写负担将大大减轻。对于使用机械硬盘的电脑来说，这可以有效减少硬盘的磨损，延长硬盘的使用寿命；而对于固态硬盘，虽然其读写速度快，但减少不必要的读写操作也有助于降低固态硬盘的写入放大效应，从而延长其寿命，同时也能减少因硬盘读写而产生的热量。</p>
</li>
<li><p><strong>特定场景下的性能提升</strong>：在某些特定场景中，禁用 Superfetch 服务能够显著提升系统性能。比如，对于一些追求极致游戏性能的玩家来说，在玩大型游戏时，禁用 Superfetch 服务可以避免其在后台占用资源，使游戏能够获得更多的系统资源，从而提升游戏的帧率和稳定性，减少游戏过程中的卡顿现象，让玩家能够更加流畅地享受游戏带来的乐趣。又或者对于从事视频剪辑、3D 建模等对系统性能要求较高的专业用户来说，禁用 Superfetch 服务后，他们在使用这些专业软件时，软件的响应速度会更快，操作更加流畅，能够大大提高工作效率。</p>
</li>
</ol>
<h3 id="潜在的负面影响"><a href="#潜在的负面影响" class="headerlink" title="潜在的负面影响"></a>潜在的负面影响</h3><ol>
<li><p><strong>系统启动和程序加载变慢</strong>：Superfetch 服务的核心作用是提前预取系统和程序运行所需的数据，从而加快系统启动和程序加载速度。一旦禁用它，系统在启动时就无法提前将常用程序的数据加载到内存中，程序在启动时也需要从硬盘中实时读取数据，这必然会导致系统启动时间变长，程序的首次加载速度明显变慢。例如，原本开机后几秒钟就能快速启动的微信，在禁用 Superfetch 服务后，可能需要等待十几秒甚至更长时间才能打开，这对于那些追求高效、希望能够快速进入工作或娱乐状态的用户来说，无疑是一种困扰。</p>
</li>
<li><p><strong>内存管理可能受影响</strong>：Superfetch 服务在一定程度上参与了系统的内存管理，它通过分析用户的使用习惯，合理地将数据预加载到内存中，使得内存的使用更加高效。当禁用该服务后，系统的内存管理可能会受到一定影响。内存中可能无法及时存放常用程序的数据，导致程序在运行过程中频繁地进行内存与硬盘之间的数据交换，增加了系统的负担，进而可能影响到系统的整体性能和稳定性，使电脑在运行多个程序时容易出现卡顿现象。</p>
</li>
<li><p><strong>影响用户体验</strong>：从整体用户体验的角度来看，禁用 Superfetch 服务带来的启动和加载变慢问题，可能会让用户在日常使用电脑的过程中感到烦躁和不便。尤其是在当今快节奏的生活和工作环境下，时间的碎片化使得用户希望每一次使用电脑都能够快速、高效地完成任务，而这种等待时间的增加无疑与用户的期望背道而驰，可能会降低用户对电脑使用的满意度 。</p>
</li>
</ol>
<h2 id="如何判断是否适合禁用-Superfetch-服务"><a href="#如何判断是否适合禁用-Superfetch-服务" class="headerlink" title="如何判断是否适合禁用 Superfetch 服务"></a>如何判断是否适合禁用 Superfetch 服务</h2><p>禁用 Superfetch 服务并非适用于所有用户和所有电脑，在决定是否禁用之前，我们需要综合多方面因素进行判断，找到最适合自己电脑的设置方案 。</p>
<h3 id="依据电脑配置判断"><a href="#依据电脑配置判断" class="headerlink" title="依据电脑配置判断"></a>依据电脑配置判断</h3><ol>
<li><p><strong>低配置电脑</strong>：如果你的电脑配置较低，例如 CPU 性能较弱、内存容量较小（4GB 及以下），且使用的是机械硬盘，那么禁用 Superfetch 服务可能会为你带来一定的性能提升。因为这类电脑本身资源有限，Superfetch 服务占用的资源可能会对其他程序的运行产生较大影响。禁用它后，可以释放出更多的系统资源，让电脑运行更加流畅。</p>
</li>
<li><p><strong>高配置电脑</strong>：对于高配置电脑，如配备高性能 CPU、大容量内存（16GB 及以上）以及快速的固态硬盘，Superfetch 服务所占用的资源相对来说对系统整体性能的影响较小。在这种情况下，保留 Superfetch 服务可能会使系统和程序的启动速度更快，用户体验更好，因此不一定需要禁用它。</p>
</li>
</ol>
<h3 id="根据使用习惯判断"><a href="#根据使用习惯判断" class="headerlink" title="根据使用习惯判断"></a>根据使用习惯判断</h3><ol>
<li><p><strong>固定使用场景</strong>：如果你每天使用电脑的场景比较固定，总是运行相同的几个程序，那么 Superfetch 服务能够很好地发挥其预取作用，提前加载常用程序，减少等待时间。这种情况下，保留该服务会更符合你的使用需求。比如，你是一名上班族，每天主要使用办公软件（Word、Excel、PPT）、通讯工具（微信、QQ）以及浏览器进行工作，Superfetch 服务能够根据你的使用习惯，提前将这些程序所需的数据加载到内存中，让你能够快速进入工作状态。</p>
</li>
<li><p><strong>频繁切换使用场景</strong>：然而，如果你经常在不同的使用场景之间切换，运行各种不同类型的程序，Superfetch 服务可能无法及时准确地预取到你需要的数据。因为它需要一定的时间来分析你的新使用习惯并进行预取，在这种频繁变化的情况下，其预取效果可能并不理想，此时禁用它可能不会对你的使用造成太大影响。</p>
</li>
</ol>
<h3 id="参考系统性能表现判断"><a href="#参考系统性能表现判断" class="headerlink" title="参考系统性能表现判断"></a>参考系统性能表现判断</h3><ol>
<li><p><strong>系统卡顿明显</strong>：如果你在日常使用电脑的过程中，经常遇到系统卡顿、反应迟缓的情况，并且通过任务管理器等工具发现 Superfetch 服务占用了大量的 CPU、内存或硬盘资源，那么可以尝试禁用该服务，观察系统性能是否有所改善。例如，在打开多个程序时，电脑出现长时间无响应，查看任务管理器发现 Superfetch 服务占用了较高的 CPU 资源，此时禁用它可能会使系统恢复流畅。</p>
</li>
<li><p><strong>系统运行流畅</strong>：相反，如果你的电脑在运行过程中一直表现得很流畅，系统和程序的启动速度也能满足你的需求，那么就没有必要冒险去禁用 Superfetch 服务，以免带来不必要的负面影响。</p>
</li>
</ol>
<h2 id="总结与建议"><a href="#总结与建议" class="headerlink" title="总结与建议"></a>总结与建议</h2><p>禁用 Superfetch 服务，是一把双刃剑，有着明显的利弊两面。从积极的方面来看，它能够释放系统资源，减少对 CPU、内存和硬盘的占用，尤其对于低配置电脑以及机械硬盘，在一定程度上可提升系统运行的流畅度，降低硬盘的读写负担，延长硬盘使用寿命。同时，在特定的使用场景下，比如追求极致游戏性能或专业软件运行效率时，能让电脑将更多资源集中于关键任务，带来更好的性能表现。</p>
<p>然而，我们也不能忽视其负面效应。禁用 Superfetch 服务后，系统启动和程序加载速度会明显变慢，这会在日常使用中增加等待时间，降低工作和娱乐的效率。而且，它还可能影响系统的内存管理机制，导致内存使用不够合理，进而影响系统的整体稳定性和性能。</p>
<p>对于不同用户群体，建议如下：如果你的电脑配置较低，且使用场景较为单一，日常主要运行少数几个固定程序，那么可以尝试禁用 Superfetch 服务，通过释放系统资源来提升电脑的运行流畅度。但在操作之前，务必备份好重要数据，以防万一。</p>
<p>而对于高配置电脑用户，若电脑在运行过程中没有出现明显的资源不足或卡顿问题，保留 Superfetch 服务通常能获得更便捷、高效的使用体验，因为它可以让系统和程序的启动更加迅速。</p>
<p>总之，是否禁用 Superfetch 服务，需要我们根据自身电脑的实际配置、使用习惯以及系统性能表现等多方面因素，进行全面、谨慎的考虑和权衡。在操作过程中，一定要谨慎行事，尤其是涉及到修改系统服务和注册表等关键设置时，以免因不当操作导致系统出现严重问题，影响正常使用。</p>
]]></content>
  </entry>
  <entry>
    <title>利用 Rust 构建轻量级多端桌面应用：Pake 介绍</title>
    <url>/2024/11/09/%E5%88%A9%E7%94%A8-Rust-%E6%9E%84%E5%BB%BA%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%A4%9A%E7%AB%AF%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%EF%BC%9APake-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>Pake 是一个基于 Rust 的工具，它允许开发者轻松构建轻量级的多平台桌面应用。以其小巧的体积和卓越的性能，Pake 成为了许多开发者的首选工具。本文将详细介绍 Pake 的特性、安装方法、使用指南以及如何进行定制开发，并特别强调快捷键的使用。</p>
</blockquote>
<h2 id="Pake-的特性"><a href="#Pake-的特性" class="headerlink" title="Pake 的特性"></a>Pake 的特性</h2><p>Pake 的核心特性包括：</p>
<ul>
<li><strong>体积小</strong>：相比传统的 Electron 套壳打包，Pake 的体积小将近 20 倍，大约在 5M 左右。</li>
<li><strong>性能优异</strong>：Pake 的底层使用的是 Rust Tauri 框架，相较于 JavaScript 框架，它提供了更轻快的性能体验和更小的内存占用。</li>
<li><strong>功能丰富</strong>：Pake 不仅能打包应用，还实现了快捷键透传、沉浸式窗口、拖动、样式改写、去广告等功能，并支持产品的极简风格定制。</li>
<li><strong>简单易用</strong>：Pake 被描述为一个简单的小玩具，使用 Tauri 替代了传统的套壳网页打包思路，同时推荐使用 PWA（Progressive Web Apps）。</li>
</ul>
<h2 id="开始使用-Pake"><a href="#开始使用-Pake" class="headerlink" title="开始使用 Pake"></a>开始使用 Pake</h2><h3 id="安装-Pake-CLI"><a href="#安装-Pake-CLI" class="headerlink" title="安装 Pake CLI"></a>安装 Pake CLI</h3><p>Pake 提供了命令行工具，可以通过 npm 进行安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g pake-cli</span><br></pre></td></tr></table></figure>

<h3 id="命令行一键打包"><a href="#命令行一键打包" class="headerlink" title="命令行一键打包"></a>命令行一键打包</h3><p>使用 Pake 进行一键打包非常简单，以下是基本的命令使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pake url [OPTIONS]...</span><br></pre></td></tr></table></figure>

<p>例如，如果你想打包 <span class="exturl" data-url="aHR0cHM6Ly93ZWVrbHkudHc5My5mdW4v">Weekly<i class="fa fa-external-link-alt"></i></span> 应用，并隐藏标题栏，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pake https://weekly.tw93.fun --name Weekly --hide-title-bar</span><br></pre></td></tr></table></figure>

<h3 id="快捷键说明"><a href="#快捷键说明" class="headerlink" title="快捷键说明"></a>快捷键说明</h3><p>Pake 支持快捷键，以提高用户的工作效率。以下是 Pake 支持的快捷键及其功能：</p>
<table>
<thead>
<tr>
<th>Mac</th>
<th>Windows&#x2F;Linux</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>⌘ + [</td>
<td>Ctrl + ←</td>
<td>返回上一个页面</td>
</tr>
<tr>
<td>⌘ + ]</td>
<td>Ctrl + →</td>
<td>去下一个页面</td>
</tr>
<tr>
<td>⌘ + ↑</td>
<td>Ctrl + ↑</td>
<td>自动滚动到页面顶部</td>
</tr>
<tr>
<td>⌘ + ↓</td>
<td>Ctrl + ↓</td>
<td>自动滚动到页面底部</td>
</tr>
<tr>
<td>⌘ + r</td>
<td>Ctrl + r</td>
<td>刷新页面</td>
</tr>
<tr>
<td>⌘ + w</td>
<td>Ctrl + w</td>
<td>隐藏窗口，非退出</td>
</tr>
<tr>
<td>⌘ + -</td>
<td>Ctrl + -</td>
<td>缩小页面</td>
</tr>
<tr>
<td>⌘ + +</td>
<td>Ctrl + +</td>
<td>放大页面</td>
</tr>
<tr>
<td>⌘ + &#x3D;</td>
<td>Ctrl + &#x3D;</td>
<td>放大页面</td>
</tr>
<tr>
<td>⌘ + 0</td>
<td>Ctrl + 0</td>
<td>重置页面缩放</td>
</tr>
</tbody></table>
<h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>Pake 的代码结构和高级用法可以在其官方文档中找到。以下是一些关键点：</p>
<ul>
<li>修改 src-tauri 目录下的 pake.json 中的 url 和 productName 字段，并同步修改 tauri.config.json 中的 domain 字段。</li>
<li>修改 tauri.xxx.conf.json 中的 icon 和 identifier 字段，图标可以从 icons 目录选择，或者从 macOSicons 下载。</li>
<li>在 pake.json 中修改窗口属性，如 width&#x2F;height、fullscreen、resizable 等。</li>
<li>适配 Mac 沉浸式头部，可以将 hideTitleBar 设置为 true，并为 Header 元素添加 padding-top 样式。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Pake 是一个强大的工具，它让构建轻量级多端桌面应用变得简单快捷。无论是小白用户、开发用户还是折腾用户，都能在 Pake 中找到适合自己的使用方式。希望这篇文章能帮助你更好地了解和使用 Pake，享受构建桌面应用的乐趣。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
        <tag>桌面应用</tag>
        <tag>Tauri</tag>
        <tag>PWA</tag>
        <tag>轻量级</tag>
      </tags>
  </entry>
  <entry>
    <title>前端加密神器Crypto.js：从入门到实战</title>
    <url>/2019/03/12/%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%A5%9E%E5%99%A8Crypto-js%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="引言：走进-Crypto-js-的加密世界"><a href="#引言：走进-Crypto-js-的加密世界" class="headerlink" title="引言：走进 Crypto.js 的加密世界"></a>引言：走进 Crypto.js 的加密世界</h2><p>在当今数字化时代，数据安全至关重要。无论是个人隐私信息，还是企业的商业机密，都面临着被窃取或篡改的风险。在前端开发中，保护数据在传输和存储过程中的安全是我们不可忽视的任务。而 Crypto.js，正是一款强大的 JavaScript 加密库，它为前端开发者提供了丰富的加密算法和工具，帮助我们轻松实现数据的加密和解密，在客户端层面为数据安全筑起一道坚实的防线。接下来，就让我们一起深入探索 Crypto.js 的使用方法。</p>
<h2 id="Crypto-js-初相识"><a href="#Crypto-js-初相识" class="headerlink" title="Crypto.js 初相识"></a>Crypto.js 初相识</h2><p>Crypto.js 是一个用纯 JavaScript 编写的加密库，它提供了一系列丰富的加密算法和工具，涵盖了哈希算法（如 MD5、SHA-1、SHA-256 等）、对称加密算法（如 AES、DES ）、非对称加密算法（如 RSA ）以及消息认证码（HMAC ）等。这些算法在前端开发中有着广泛的应用，比如当用户在网页上输入密码时，在将密码发送到服务器之前，可以使用 Crypto.js 进行加密，确保密码在传输过程中的安全性；又或者在前端对一些敏感的用户信息进行加密存储，防止数据被窃取。 它就像是一个加密工具箱，开发者可以根据不同的安全需求，从这个工具箱中选择合适的工具来保障数据的安全。 而且，由于它是纯 JavaScript 实现，所以既可以在浏览器环境中使用，也能在 Node.js 服务器端运行，具备出色的跨平台性。</p>
<h2 id="快速上手-Crypto-js"><a href="#快速上手-Crypto-js" class="headerlink" title="快速上手 Crypto.js"></a>快速上手 Crypto.js</h2><h3 id="（一）安装与引入"><a href="#（一）安装与引入" class="headerlink" title="（一）安装与引入"></a>（一）安装与引入</h3><p>在开始使用 Crypto.js 之前，我们需要先将其安装到项目中，并引入到我们的代码文件里。如果是在 Node.js 项目中，我们可以借助 npm（Node 包管理器）来完成安装。首先，确保你已经安装了 Node.js 和 npm，打开终端，进入你的项目目录，然后执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure>

<p>安装完成后，在需要使用 Crypto.js 的 JavaScript 文件中，使用<code>require</code>语句引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果你使用的是 ES6 的模块系统，也可以这样引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>对于在 HTML 页面中直接使用的情况，有多种引入方式。可以通过 CDN 链接来引入，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样在页面的 JavaScript 代码中就可以直接使用<code>CryptoJS</code>对象了。你还可以从 Crypto.js 的 GitHub 仓库下载源码，将下载的<code>crypto-js.js</code>文件放置在你的项目文件夹中，例如<code>my-project/libs/crypto-js/</code>，然后在 HTML 文件中这样引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;libs/crypto-js/crypto-js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（二）基本加密示例"><a href="#（二）基本加密示例" class="headerlink" title="（二）基本加密示例"></a>（二）基本加密示例</h3><p>下面我们通过一个简单的字符串加密示例，来初步感受一下 Crypto.js 的使用。这里我们使用 AES（高级加密标准）对称加密算法，它是一种被广泛应用的加密算法，具有较高的安全性和效率。假设我们有一个需要加密的字符串<code>message</code>和一个密钥<code>secretKey</code> ，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入CryptoJS库</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"><span class="comment">// 待加密的字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, Crypto.js!&#x27;</span>;</span><br><span class="line"><span class="comment">// 加密密钥，实际应用中请妥善保管</span></span><br><span class="line"><span class="keyword">const</span> secretKey =<span class="string">&#x27;mySecretKey12345&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用AES算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> encryptedMessage = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(message, secretKey).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密后的密文:&#x27;</span>, encryptedMessage);</span><br><span class="line"><span class="comment">// 使用相同的密钥进行解密</span></span><br><span class="line"><span class="keyword">const</span> bytes = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedMessage, secretKey);</span><br><span class="line"><span class="keyword">const</span> decryptedMessage = bytes.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密后的明文:&#x27;</span>, decryptedMessage);</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们首先引入了 Crypto.js 库。接着定义了要加密的字符串<code>message</code>和加密密钥<code>secretKey</code> 。然后使用<code>CryptoJS.AES.encrypt</code>方法对<code>message</code>进行加密，该方法接受两个参数，第一个是要加密的字符串，第二个是加密密钥，加密后的结果通过<code>toString()</code>方法转换为字符串形式进行存储或传输。在解密时，使用<code>CryptoJS.AES.decrypt</code>方法，传入加密后的密文和相同的密钥，解密后的结果是一个<code>WordArray</code>对象，再通过<code>toString(CryptoJS.enc.Utf8)</code>方法将其转换为 UTF - 8 编码的字符串，这样就得到了原始的明文。运行这段代码，你会在控制台看到加密后的密文和解密后的明文，明文与原始的<code>message</code>字符串一致，这表明我们成功地完成了一次加密和解密操作。</p>
<h2 id="深入探究常用加密算法"><a href="#深入探究常用加密算法" class="headerlink" title="深入探究常用加密算法"></a>深入探究常用加密算法</h2><p>在 Crypto.js 中，涵盖了多种类型的加密算法，每种算法都有其独特的特点和适用场景。下面我们将深入探究哈希算法和对称加密算法这两类常用算法在 Crypto.js 中的使用方法。</p>
<h3 id="（一）哈希算法"><a href="#（一）哈希算法" class="headerlink" title="（一）哈希算法"></a>（一）哈希算法</h3><p>哈希算法，也被称为散列算法或摘要算法，它能够将任意长度的数据转换为固定长度的哈希值。哈希值就像是数据的 “指纹”，具有唯一性和不可逆性，即从哈希值几乎无法反推出原始数据。不同的哈希算法在哈希值长度、安全性和计算效率等方面存在差异，适用于不同的应用场景。</p>
<h4 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1. MD5"></a>1. MD5</h4><p>MD5（Message - Digest Algorithm 5）是一种经典的哈希算法，生成 128 位（16 字节）的哈希值，通常以 32 位十六进制字符串的形式呈现。它具有计算速度极快的特点，在早期被广泛应用于文件校验和数字签名等场景 。例如，在文件传输过程中，发送方可以计算文件的 MD5 值并随文件一同发送，接收方在收到文件后重新计算文件的 MD5 值，若两者一致，则说明文件在传输过程中未被篡改。在一些低安全性要求的系统中，也会使用 MD5 对用户密码进行简单加密存储。然而，MD5 存在安全漏洞，研究人员已能够找到不同的输入产生相同的 MD5 哈希值，即存在碰撞现象，这使得它在安全性要求较高的场景中不再适用，如数字签名和加密证书等领域已逐渐弃用 MD5。</p>
<p>在 Crypto.js 中使用 MD5 进行加密非常简单，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"><span class="comment">// 待加密的字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, MD5!&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用MD5算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> hash = <span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(message).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;MD5加密后的哈希值:&#x27;</span>, hash);</span><br></pre></td></tr></table></figure>

<p>运行上述代码，控制台将输出类似<code>5d41402abc4b2a76b9719d911017c592</code>的 MD5 哈希值。这里<code>CryptoJS.MD5(message)</code>计算出<code>message</code>的 MD5 哈希值，它返回的是一个<code>WordArray</code>对象，通过<code>toString()</code>方法将其转换为十六进制字符串形式以便展示和存储。</p>
<h4 id="2-SHA-系列"><a href="#2-SHA-系列" class="headerlink" title="2. SHA 系列"></a>2. SHA 系列</h4><p>SHA（Secure Hash Algorithm）系列是美国国家安全局（NSA）设计的一组加密哈希函数，在数据完整性和身份验证方面发挥着至关重要的作用。SHA 系列包括 SHA - 1、SHA - 224、SHA - 256、SHA - 384、SHA - 512 等多个版本 ，不同版本生成的哈希值长度不同，安全性和计算复杂度也有所差异。</p>
<p><strong>SHA - 1</strong>：生成 160 位（20 字节）的哈希值 。它曾经在数字签名、证书等领域广泛应用，计算速度较快，适用于低性能设备。但由于存在碰撞漏洞，攻击者能够找到两个不同的输入产生相同的哈希值，因此已被认为不再安全，近年来在密码学上逐渐被淘汰，特别是在 TLS、SSL 和加密证书中，已逐步被更安全的哈希算法所取代。</p>
<p><strong>SHA - 256</strong>：属于 SHA - 2 家族，生成 256 位（32 字节）的哈希值，是目前最常用的哈希算法之一。它具有高安全性，抗碰撞能力强，计算复杂度较高，已被广泛应用和审计，不易被破解。在区块链领域，比特币等数字货币就使用 SHA - 256 算法来生成交易数据的加密哈希，从而创建安全且不可更改的交易记录，确保区块链系统的可信度；在数字签名、文件完整性校验等场景中也有广泛应用，例如在软件下载网站，会提供软件文件的 SHA - 256 哈希值，用户下载后可以通过计算文件的 SHA - 256 哈希值来验证文件是否完整、未被篡改。</p>
<p><strong>SHA - 512</strong>：同样是 SHA - 2 家族的一部分，生成 512 位（64 字节）的哈希值。它的安全性更高，生成的哈希值更长，更难以受到碰撞攻击。对于 64 位系统，在处理较长输入时，SHA - 512 的性能可能优于 SHA - 256 。不过，由于其输出的哈希值较长，会占用更多存储空间，并且计算速度比 SHA - 256 稍慢，尤其在 32 位系统上性能表现较差。因此，SHA - 512 适用于对数据完整性和安全性要求极高的场景，如一些对安全性要求苛刻的密码学应用，但在大多数普通应用中，SHA - 256 已足够满足需求，所以 SHA - 512 的使用相对较少。</p>
<p>在 Crypto.js 中使用 SHA 系列算法的示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"><span class="comment">// 待加密的字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, SHA!&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用SHA - 1算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> sha1Hash = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA1</span>(message).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;SHA - 1加密后的哈希值:&#x27;</span>, sha1Hash);</span><br><span class="line"><span class="comment">// 使用SHA - 256算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> sha256Hash = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA256</span>(message).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;SHA - 256加密后的哈希值:&#x27;</span>, sha256Hash);</span><br><span class="line"><span class="comment">// 使用SHA - 512算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> sha512Hash = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA512</span>(message).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;SHA - 512加密后的哈希值:&#x27;</span>, sha512Hash);</span><br></pre></td></tr></table></figure>

<p>运行上述代码，控制台会分别输出<code>message</code>的 SHA - 1、SHA - 256 和 SHA - 512 哈希值。这里<code>CryptoJS.SHA1(message)</code>、<code>CryptoJS.SHA256(message)</code>和<code>CryptoJS.SHA512(message)</code>分别计算出对应算法的哈希值，再通过<code>toString()</code>方法转换为十六进制字符串展示。</p>
<h3 id="（二）对称加密算法"><a href="#（二）对称加密算法" class="headerlink" title="（二）对称加密算法"></a>（二）对称加密算法</h3><p>对称加密算法是指加密和解密使用相同密钥的加密方式。发送方使用密钥对明文进行加密，生成密文，接收方使用相同的密钥对密文进行解密，还原出明文。这种加密方式的优点是加密和解密速度快，效率高，适用于对大量数据进行加密处理；缺点是密钥的管理和分发比较困难，因为通信双方需要安全地共享同一个密钥，如果密钥在传输过程中被窃取，那么数据的安全性就无法得到保障。</p>
<h4 id="1-AES"><a href="#1-AES" class="headerlink" title="1. AES"></a>1. AES</h4><p>AES（Advanced Encryption Standard）即高级加密标准，是一种被广泛应用的对称加密算法。它的原理基于置换和代替操作，将明文按照固定大小（通常为 128 位，即 16 字节）进行分组，然后对每一分组进行多轮加密。每一轮加密都包含 SubBytes（字节替换）、ShiftRows（行移位）、MixColumns（列混淆）和 AddRoundKey（轮密钥加）这四种操作，通过这些操作对数据进行充分混淆和扩散，从而实现高效且安全的加密。AES 支持三种密钥长度：128 比特、192 比特和 256 比特 ，对于不同长度的密钥，加密轮数也不同，128 比特密钥对应 10 轮加密，192 比特密钥对应 12 轮加密，256 比特密钥对应 14 轮加密。</p>
<p>在使用 AES 加密时，涉及到一些重要参数：</p>
<p><strong>密钥（Key）</strong>：用于加密和解密的关键信息，长度可以是 128 位、192 位或 256 位，密钥的安全性直接影响加密的安全性，务必妥善保管。</p>
<p><strong>初始向量（Initialization Vector，IV）</strong>：在某些加密模式（如 CBC 模式）下需要使用初始向量，它是一个随机值，与密钥一起用于加密过程，目的是增加加密的随机性和安全性，防止相同的明文加密后产生相同的密文。</p>
<p><strong>加密模式（Mode）</strong>：AES 支持多种加密模式，常见的有 ECB（电子密码本模式）、CBC（密码块链模式）、CTR（计数器模式）等。不同的加密模式具有不同的特点和适用场景。例如，ECB 模式简单直接，每个明文块独立加密，但如果明文存在重复块，加密后的密文也会有重复，容易被攻击者分析，适用于对安全性要求不高且数据块之间独立性较强的场景；CBC 模式引入了初始向量，使得每个密文块的生成不仅依赖于当前明文块和密钥，还依赖于前一个密文块，增强了安全性，适用于一般的加密场景；CTR 模式将加密转换为流密码，通过计数器生成密钥流与明文异或，加密和解密速度快，且可以并行处理，适用于对速度要求较高的场景。</p>
<p><strong>填充方式（Padding）</strong>：当明文长度不是分组长度（128 位，16 字节）的整数倍时，需要进行填充。常见的填充方式有 PKCS7（在 JavaScript 中对应 PKCS5，两者在填充逻辑上对于 AES - 128 是一致的）、ZeroPadding 等。PKCS7 填充是在明文末尾填充一定数量的字节，填充字节的值等于需要填充的字节数，例如，如果需要填充 5 个字节，则填充的字节都是 0x05；ZeroPadding 则是在明文末尾填充 0 字节，使其满足分组长度要求。</p>
<p>下面通过一个详细的代码示例展示 AES 在 Crypto.js 中的加密和解密过程，使用 CBC 模式和 PKCS7 填充方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"><span class="comment">// 待加密的字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, AES!&#x27;</span>;</span><br><span class="line"><span class="comment">// 加密密钥，长度必须是16字节（128位）、24字节（192位）或32字节（256位）</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;mySecretKey123456&#x27;</span>);</span><br><span class="line"><span class="comment">// 初始向量，长度必须是16字节</span></span><br><span class="line"><span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;1234567890123456&#x27;</span>);</span><br><span class="line"><span class="comment">// 使用AES - CBC模式和PKCS7填充方式进行加密</span></span><br><span class="line"><span class="keyword">const</span> encryptedMessage = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(message, secretKey, &#123;</span><br><span class="line">     <span class="attr">iv</span>: iv,</span><br><span class="line">     <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">     <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密后的密文:&#x27;</span>, encryptedMessage);</span><br><span class="line"><span class="comment">// 使用相同的密钥和初始向量进行解密</span></span><br><span class="line"><span class="keyword">const</span> bytes = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedMessage, secretKey, &#123;</span><br><span class="line">     <span class="attr">iv</span>: iv,</span><br><span class="line">     <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">     <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> decryptedMessage = bytes.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密后的明文:&#x27;</span>, decryptedMessage);</span><br></pre></td></tr></table></figure>

<p>在上述代码中，首先定义了待加密的字符串<code>message</code>、加密密钥<code>secretKey</code>和初始向量<code>iv</code> 。然后使用<code>CryptoJS.AES.encrypt</code>方法进行加密，传入三个参数：要加密的字符串<code>message</code>、加密密钥<code>secretKey</code>以及一个配置对象，在配置对象中指定了初始向量<code>iv</code>、加密模式<code>CryptoJS.mode.CBC</code>和填充方式<code>CryptoJS.pad.Pkcs7</code> ，加密后的结果通过<code>toString()</code>方法转换为字符串形式。在解密时，使用<code>CryptoJS.AES.decrypt</code>方法，传入加密后的密文<code>encryptedMessage</code>、相同的密钥<code>secretKey</code>和配置对象，解密后的结果是一个<code>WordArray</code>对象，再通过<code>toString(CryptoJS.enc.Utf8)</code>方法将其转换为 UTF - 8 编码的字符串，得到原始的明文。运行代码后，控制台将输出加密后的密文和解密后的明文，明文应与原始的<code>message</code>字符串一致。</p>
<h4 id="2-DES"><a href="#2-DES" class="headerlink" title="2. DES"></a>2. DES</h4><p>DES（Data Encryption Standard）是一种早期的对称加密算法，它将 64 位的明文块加密成 64 位的密文块 。DES 的特点是加密和解密过程相对简单，计算速度较快，在早期的计算机系统和网络通信中得到了广泛应用。然而，随着计算机技术的发展，DES 逐渐暴露出一些缺点。由于其密钥长度较短，只有 56 位（实际使用 64 位密钥，但其中 8 位用于奇偶校验），在现代计算机的计算能力下，已经可以通过暴力破解的方式在较短时间内找到密钥，安全性较低。相比之下，AES 具有更强大的安全性，支持更长的密钥长度（128 位、192 位、256 位），加密轮数更多，加密过程更加复杂，能够有效抵御各种攻击，因此在大多数场景下，AES 已经取代了 DES 成为更常用的对称加密算法。</p>
<p>在 Crypto.js 中使用 DES 进行加密和解密的代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"><span class="comment">// 待加密的字符串</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, DES!&#x27;</span>;</span><br><span class="line"><span class="comment">// 加密密钥，长度必须是8字节（64位，实际有效位56位）</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;12345678&#x27;</span>);</span><br><span class="line"><span class="comment">// 使用DES算法进行加密</span></span><br><span class="line"><span class="keyword">const</span> encryptedMessage = <span class="title class_">CryptoJS</span>.<span class="property">DES</span>.<span class="title function_">encrypt</span>(message, secretKey, &#123;</span><br><span class="line">     <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">     <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;).<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DES加密后的密文:&#x27;</span>, encryptedMessage);</span><br><span class="line"><span class="comment">// 使用相同的密钥进行解密</span></span><br><span class="line"><span class="keyword">const</span> bytes = <span class="title class_">CryptoJS</span>.<span class="property">DES</span>.<span class="title function_">decrypt</span>(encryptedMessage, secretKey, &#123;</span><br><span class="line">     <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">     <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> decryptedMessage = bytes.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DES解密后的明文:&#x27;</span>, decryptedMessage);</span><br></pre></td></tr></table></figure>

<p>上述代码定义了待加密字符串<code>message</code>和 8 字节的加密密钥<code>secretKey</code> 。使用<code>CryptoJS.DES.encrypt</code>方法进行加密，采用 ECB 模式和 PKCS7 填充方式，加密结果转换为字符串。解密时使用<code>CryptoJS.DES.decrypt</code>方法，传入密文、相同密钥和配置对象，最后将解密结果转换为 UTF - 8 编码字符串输出。运行代码后，可在控制台看到加密和解密的结果。不过，由于 DES 的安全性问题，在实际应用中，若非特殊需求，应优先选择更安全的 AES 等加密算法。</p>
<h2 id="实际应用案例剖析"><a href="#实际应用案例剖析" class="headerlink" title="实际应用案例剖析"></a>实际应用案例剖析</h2><h3 id="（一）数据传输加密"><a href="#（一）数据传输加密" class="headerlink" title="（一）数据传输加密"></a>（一）数据传输加密</h3><p>在 Web 应用开发中，前端向后端发送敏感数据的场景极为常见。例如，在一个在线银行系统中，用户进行转账操作时，需要将转账金额、收款账号等敏感信息发送到后端服务器进行处理。如果这些数据在传输过程中未加密，一旦被黑客截获，后果不堪设想。</p>
<p>我们可以使用 Crypto.js 中的 AES 加密算法来保障数据传输的安全。假设我们的前端使用 Vue 框架开发，代码示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;sendData&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>转账金额:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;recipientAccount&quot;</span>&gt;</span>收款账号:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recipientAccount&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;recipientAccount&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">amount</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">recipientAccount</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;;</span></span><br><span class="line"><span class="language-javascript">   &#125;,</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">sendData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 模拟后端的公钥，实际应用中应从服务器获取</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> publicKey = <span class="string">&#x27;publicKey12345&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">amount</span>: <span class="variable language_">this</span>.<span class="property">amount</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">recipientAccount</span>: <span class="variable language_">this</span>.<span class="property">recipientAccount</span></span></span><br><span class="line"><span class="language-javascript">       &#125;;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 使用AES加密数据</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> encryptedData = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), publicKey).<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 发送加密后的数据到后端</span></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">fetch</span>(<span class="string">&#x27;/transfer&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">         &#125;,</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; encryptedData &#125;)</span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript">       .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">       .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后端返回结果:&#x27;</span>, result);</span></span><br><span class="line"><span class="language-javascript">         &#125;)</span></span><br><span class="line"><span class="language-javascript">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">         &#125;);</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述代码中，当用户在表单中输入转账金额和收款账号并点击提交按钮时，<code>sendData</code>方法被触发。该方法首先定义了一个模拟的后端公钥（实际应用中，应通过安全的方式从服务器获取公钥），然后将用户输入的数据对象转换为 JSON 字符串，使用 AES 算法和公钥对其进行加密，得到加密后的密文。最后，通过<code>fetch</code> API 将加密后的密文发送到后端的<code>/transfer</code>接口。在后端接收到加密数据后，使用相应的私钥进行解密，从而确保数据在传输过程中的安全性，有效防止数据被窃取或篡改。</p>
<h3 id="（二）用户密码加密"><a href="#（二）用户密码加密" class="headerlink" title="（二）用户密码加密"></a>（二）用户密码加密</h3><p>在用户注册和登录功能中，用户密码的安全存储至关重要。如果将用户密码以明文形式存储在数据库中，一旦数据库泄露，用户的账号安全将受到严重威胁。利用 Crypto.js 对用户密码进行加密存储是一种有效的解决方案。</p>
<p>以 React 应用为例，在用户注册页面，当用户输入密码并提交注册信息时，我们可以使用 Crypto.js 对密码进行哈希处理，然后将哈希值存储到数据库中。代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span><span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Register</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> [username, setUsername] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   <span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">     e.<span class="title function_">preventDefault</span>();</span><br><span class="line">     <span class="comment">// 使用SHA - 256算法对密码进行哈希处理</span></span><br><span class="line">     <span class="keyword">const</span> hashedPassword = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA256</span>(password).<span class="title function_">toString</span>();</span><br><span class="line">     <span class="comment">// 模拟将用户名和哈希后的密码发送到后端进行注册</span></span><br><span class="line">     <span class="keyword">const</span> registerData = &#123;</span><br><span class="line">       username,</span><br><span class="line">       <span class="attr">password</span>: hashedPassword</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">// 这里可以使用fetch或其他HTTP库将registerData发送到后端</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册数据:&#x27;</span>, registerData);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">value</span>=<span class="string">&#123;username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setUsername(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">       /&gt;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">value</span>=<span class="string">&#123;password&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setPassword(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">       /&gt;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">   );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Register</span>;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，当用户在注册表单中输入用户名和密码并点击注册按钮时，<code>handleSubmit</code>函数被调用。该函数使用<code>CryptoJS.SHA256</code>方法对用户输入的密码进行哈希处理，得到密码的哈希值。然后将用户名和哈希后的密码组成一个对象<code>registerData</code>，模拟将其发送到后端进行注册操作（实际应用中，应使用<code>fetch</code>或其他 HTTP 库将数据发送到后端服务器）。在用户登录时，同样对用户输入的密码进行哈希处理，然后将哈希值与数据库中存储的哈希值进行比对，如果一致，则验证用户身份成功，这样就避免了密码明文存储带来的安全风险，极大地提高了用户账号的安全性。</p>
<h2 id="使用技巧与注意事项"><a href="#使用技巧与注意事项" class="headerlink" title="使用技巧与注意事项"></a>使用技巧与注意事项</h2><h3 id="（一）密钥管理"><a href="#（一）密钥管理" class="headerlink" title="（一）密钥管理"></a>（一）密钥管理</h3><p>密钥是加密和解密过程中的核心要素，其安全性直接决定了加密数据的安全性。在使用 Crypto.js 时，务必高度重视密钥的管理。首先，密钥的生成应采用安全可靠的方式，避免使用简单易猜测的字符串作为密钥，比如不要使用生日、电话号码等常见信息。对于对称加密算法，如 AES，建议使用足够长度的密钥，以增强加密的强度。例如，AES 支持 128 位、192 位和 256 位的密钥长度，在安全性要求较高的场景中，应优先选择 256 位的密钥。可以借助 Crypto.js 提供的工具函数来生成随机的高强度密钥，如<code>CryptoJS.lib.WordArray.random(256 / 8)</code>可以生成一个 256 位的随机密钥。其次，密钥的存储也至关重要，绝不能将密钥以明文形式存储在客户端或服务器端易被访问的位置。一种常见的做法是将密钥存储在安全的密钥管理系统中，或者使用硬件安全模块（HSM）来保护密钥。在前端应用中，也可以考虑将密钥与用户的某些唯一标识（如指纹、面部识别等生物特征，需在合法合规且用户授权的前提下）相结合，进一步提高密钥的安全性。总之，妥善管理密钥是保障数据加密安全的基础，任何疏忽都可能导致加密体系的崩溃，使数据面临被破解的风险。</p>
<h3 id="（二）加密模式与填充方式选择"><a href="#（二）加密模式与填充方式选择" class="headerlink" title="（二）加密模式与填充方式选择"></a>（二）加密模式与填充方式选择</h3><p>不同的加密模式和填充方式在加密效果和安全性上存在差异，开发者需要根据具体的应用需求来合理选择。在加密模式方面，以 AES 加密算法为例，常见的加密模式有 ECB（电子密码本模式）、CBC（密码块链模式）、CTR（计数器模式）等。ECB 模式简单直接，每个明文块独立加密，加密速度相对较快，但如果明文存在重复块，加密后的密文也会有重复，容易被攻击者分析和利用，因此它适用于对安全性要求不高且数据块之间独立性较强的场景，比如一些对数据保密性要求较低的内部测试数据加密。CBC 模式引入了初始向量（IV），每个密文块的生成不仅依赖于当前明文块和密钥，还依赖于前一个密文块，这使得加密后的密文具有更好的随机性和扩散性，安全性较高，适用于一般的加密场景，如用户敏感信息的传输加密。CTR 模式将加密转换为流密码，通过计数器生成密钥流与明文异或，具有加密和解密速度快、可以并行处理的优点，适用于对速度要求较高的场景，像实时视频流加密传输。在填充方式上，当明文长度不是加密算法分组长度的整数倍时，就需要进行填充。常见的填充方式有 PKCS7（在 JavaScript 中对应 PKCS5，两者在填充逻辑上对于 AES - 128 是一致的）、ZeroPadding 等。PKCS7 填充是在明文末尾填充一定数量的字节，填充字节的值等于需要填充的字节数，这种填充方式应用广泛，能够保证加密数据的完整性和正确性；ZeroPadding 则是在明文末尾填充 0 字节，虽然简单，但在某些情况下可能会导致安全性问题，比如当解密时无法准确判断填充的 0 是原始数据中的 0 还是填充的 0，所以在选择填充方式时，应优先考虑 PKCS7 填充方式，除非有特殊的需求。</p>
<h3 id="（三）兼容性问题"><a href="#（三）兼容性问题" class="headerlink" title="（三）兼容性问题"></a>（三）兼容性问题</h3><p>在不同的环境中使用 Crypto.js，可能会遇到一些兼容性问题。在浏览器环境中，不同浏览器对 JavaScript 的支持存在差异，可能会导致 Crypto.js 的某些功能无法正常运行。例如，一些旧版本的浏览器可能不支持某些加密算法或特性，在使用之前，需要通过特性检测来判断浏览器是否支持所需的功能。可以使用<code>if (&#39;CryptoJS&#39; in window)</code>来检测浏览器是否已经成功引入了 Crypto.js 库。对于不支持的浏览器，可以考虑提供降级方案，比如提示用户升级浏览器，或者使用其他兼容的加密方式。在 Node.js 环境中，不同的 Node.js 版本对 Crypto.js 的兼容性也可能不同。随着 Node.js 的不断更新，一些底层的加密模块和 API 可能会发生变化，这可能会影响 Crypto.js 的运行。在使用时，要确保所使用的 Node.js 版本与 Crypto.js 库兼容，可以查看 Crypto.js 的官方文档或社区论坛，了解其支持的 Node.js 版本范围。如果遇到兼容性问题，可以尝试升级或降级 Node.js 版本，或者查找相关的解决方案和补丁。此外，在一些特殊的环境中，如 Web Workers、React Native 等，使用 Crypto.js 也可能会遇到一些问题，需要根据具体的环境特点进行针对性的调整和配置，以确保 Crypto.js 能够正常工作，保障数据加密功能的稳定运行。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>网络安全</tag>
        <tag>加密</tag>
        <tag>数据保护</tag>
        <tag>隐私</tag>
      </tags>
  </entry>
  <entry>
    <title>利用WebHook实现PHP自动部署git代码</title>
    <url>/2019/11/12/%E5%88%A9%E7%94%A8WebHook%E5%AE%9E%E7%8E%B0PHP%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2GIT%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<ol>
<li><p>生成公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -Hu www ssh-keygen -t rsa</span><br><span class="line">sudo cat /var/www/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure>
</li>
<li><p>修改GIT配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -Hu www git config --global user.name &quot;l1n6yun&quot;</span><br><span class="line">sudo -Hu www git config --global user.email &quot;l1n6yun@gmail.com&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -Hu www git clone git@github.com:you/project.git /www/wwwroot/project --depth=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加钩子文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;/www/wwwroot/project&#x27;</span>;</span><br><span class="line"><span class="variable">$token</span> = <span class="string">&#x27;Your hook token&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$json</span>[<span class="string">&#x27;token&#x27;</span>]) || <span class="variable">$json</span>[<span class="string">&#x27;token&#x27;</span>] !== <span class="variable">$token</span>) &#123;</span><br><span class="line">	<span class="keyword">exit</span>(<span class="string">&#x27;error request&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;sudo -Hu www cd <span class="subst">$target</span> &amp;&amp; git pull&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在托管平台上添加 <code>hook</code></p>
</li>
<li><p>测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -am &quot;test hook&quot; --allow-empty</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p> OK，稍微一几秒，正常的话你在代码里配置的目标目录里就会有你的项目文件了。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Git代码管理</tag>
        <tag>WebHook</tag>
        <tag>自动部署</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>去除快捷方式上面的小箭头</title>
    <url>/2017/01/11/%E5%8E%BB%E9%99%A4%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%B0%8F%E7%AE%AD%E5%A4%B4/</url>
    <content><![CDATA[<p>一些代码保存为 <code>清除桌面快捷方式小箭头.reg</code> 文件运行后，重启 <code>explorer.exe</code> 进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons]</span><br><span class="line">&quot;29&quot;=&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>注册表</tag>
        <tag>快捷方式小箭头</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建自己的 composer 包</title>
    <url>/2022/03/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-composer-%E5%8C%85/</url>
    <content><![CDATA[<blockquote>
<p>composer 是 PHP 的依赖管理工具，本篇文章就来说明如何构建一个包，并提交到 Packagist ，这样别人就可以方便地通过 composer 使用你的包了。</p>
</blockquote>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">composer init</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Welcome to the Composer config generator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This command will guide you through creating your composer.json config.</span><br><span class="line"></span><br><span class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [l1n6yun/hello]: l1n6yun/hello</span><br><span class="line">Description []: This is a demo package</span><br><span class="line">Author [l1n6yun &lt;l1n6yun@gmail.com&gt;, n to skip]:</span><br><span class="line">Minimum Stability []: dev</span><br><span class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []: library</span><br><span class="line">License []: MIT</span><br><span class="line"></span><br><span class="line">Define your dependencies.</span><br><span class="line"></span><br><span class="line">Would you like to define your dependencies (require) interactively [yes]? no</span><br><span class="line">Would you like to define your dev dependencies (require-dev) interactively [yes]? no</span><br><span class="line">Add PSR-4 autoload mapping? Maps namespace &quot;L1n6yun\Hello&quot; to the entered relative path. [src/, n to skip]:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;l1n6yun/hello&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;This is a demo package&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;psr-4&quot;: &#123;</span><br><span class="line">            &quot;L1n6yun\\Hello\\&quot;: &quot;src/&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;authors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;l1n6yun&quot;,</span><br><span class="line">            &quot;email&quot;: &quot;l1n6yun@gmail.com&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Do you confirm generation [yes]?</span><br><span class="line">Generating autoload files</span><br><span class="line">Generated autoload files</span><br><span class="line">PSR-4 autoloading configured. Use &quot;namespace L1n6yun\Hello;&quot; in src/</span><br><span class="line">Include the Composer autoloader with: require &#x27;vendor/autoload.php&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="Package-name"><a href="#Package-name" class="headerlink" title="Package name"></a>Package name</h3><p>包的名称。它是由供应商名称和项目名称组成，由 <code>/</code> 隔开。</p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>包的简短描述。用来告诉使用者这个包是干什么用的。</p>
<h3 id="Author"><a href="#Author" class="headerlink" title="Author"></a>Author</h3><p>包的作者名。</p>
<h3 id="Minimum-Stability"><a href="#Minimum-Stability" class="headerlink" title="Minimum Stability"></a>Minimum Stability</h3><p>最小稳定版本。越往下，稳定性越高，BUG越少。</p>
<ul>
<li>dev</li>
<li>alpha</li>
<li>beta</li>
<li>RC（补丁）</li>
<li>stable</li>
</ul>
<h3 id="Package-Type"><a href="#Package-Type" class="headerlink" title="Package Type"></a>Package Type</h3><p>包的类型。用于自定义安装逻辑。</p>
<ul>
<li><strong>library</strong>：这个是默认设置。它会将文件复制到 <code>vendor</code> 目录</li>
<li><strong>project</strong>：项目。注意这里的项目不是库。</li>
<li><strong>metapackage</strong>：一个包含需求的空包，会触发  他们的安装，但不包含文件，不会向  文件系统。 因此，它不需要 dist 或 source 键  可安装。 </li>
<li><strong>composer-plugin</strong>：类型的包 <code>composer-plugin</code>可以提供一个  具有自定义类型的其他软件包的安装程序。</li>
</ul>
<h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>包的许可证。  这可以是字符串或字符串数组。 </p>
<p>最常见许可证</p>
<ul>
<li>Apache-2.0</li>
<li>BSD-2-Clause</li>
<li>BSD-3-Clause</li>
<li>BSD-4-Clause</li>
<li>GPL-2.0-only &#x2F; GPL-2.0-or-later</li>
<li>GPL-3.0-only &#x2F; GPL-3.0-or-later</li>
<li>LGPL-2.1-only &#x2F; LGPL-2.1-or-later</li>
<li>LGPL-3.0-only &#x2F; LGPL-3.0-or-later</li>
<li>MIT</li>
</ul>
<blockquote>
<p>闭源项目可以使用 <code>proprietary</code></p>
</blockquote>
<h2 id="撸码"><a href="#撸码" class="headerlink" title="撸码"></a>撸码</h2><p>在项目的 <code>src</code> 目录下创建 <code>Tools</code> 类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">L1n6yun</span>\<span class="title class_">Hello</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># php -a</span></span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; <span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line">php &gt; <span class="title class_">L1n6yun\Hello\Tools</span>::<span class="title function_ invoke__">hello</span>();</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>添加 <code>.gitignore</code> 文件，来忽略不需要的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">/vendor/</span><br><span class="line">composer.lock</span><br></pre></td></tr></table></figure>

<p>自行上传到自己的 GitHub 上</p>
<h3 id="提交包"><a href="#提交包" class="headerlink" title="提交包"></a>提交包</h3><p>Packagist 上的 <span class="exturl" data-url="aHR0cHM6Ly9wYWNrYWdpc3Qub3JnL3BhY2thZ2VzL3N1Ym1pdA==">提交页面<i class="fa fa-external-link-alt"></i></span> 填写自己的仓库地址，点击 <code>Check</code> ，然后点击 <code>Submit</code> 不出意外的话就发布成功了。</p>
<p><img src="/images/pasted-7.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>开源软件</tag>
        <tag>composer</tag>
        <tag>php</tag>
        <tag>packagist</tag>
      </tags>
  </entry>
  <entry>
    <title>告别输入法切换焦虑！Smart Input Pro 让编码体验丝滑起飞</title>
    <url>/2025/10/30/%E5%91%8A%E5%88%AB%E8%BE%93%E5%85%A5%E6%B3%95%E5%88%87%E6%8D%A2%E7%84%A6%E8%99%91%EF%BC%81Smart-Input-Pro-%E8%AE%A9%E7%BC%96%E7%A0%81%E4%BD%93%E9%AA%8C%E4%B8%9D%E6%BB%91%E8%B5%B7%E9%A3%9E/</url>
    <content><![CDATA[<p><img alt="Image" data-src="/images/pasted-86.png" width="200px"></p>

<h2 id="一、插件简介：重新定义编码输入体验"><a href="#一、插件简介：重新定义编码输入体验" class="headerlink" title="一、插件简介：重新定义编码输入体验"></a>一、插件简介：重新定义编码输入体验</h2><h3 id="1-1-开发者专属智能助手"><a href="#1-1-开发者专属智能助手" class="headerlink" title="1.1 开发者专属智能助手"></a>1.1 开发者专属智能助手</h3><p>身为开发者，日常在编码时，是不是常被输入法切换问题困扰？写代码时得用英文输入法，添加注释又得切换成中文输入法。反复按 Shift 键或使用组合快捷键，不仅麻烦，还容易打断思路。有时候，因为没注意输入法状态，输入一半才发现错了，只能删除重新输入 ，实在让人抓狂。</p>
<p>Smart Input Pro 就是一款专为解决这些痛点而生的插件，基于 IntelliJ 平台，在 IDEA、WebStorm、PyCharm 等这些大家日常开发常用的工具中，都可以安装使用。它就像一个贴心的智能助手，时刻监控你的输入场景，然后自动帮你在中英文输入法之间进行切换，从此你再也不用手动频繁切换输入法了。</p>
<h3 id="1-2-核心设计理念"><a href="#1-2-核心设计理念" class="headerlink" title="1.2 核心设计理念"></a>1.2 核心设计理念</h3><p>Smart Input Pro 之所以能实现如此智能的切换，得益于其 “场景感知 + 智能决策” 的先进架构。它就像一个聪明的观察者，会实时分析多个关键因素：</p>
<ul>
<li><p><strong>光标位置</strong>：精确判断你当前输入的位置是在代码区、注释区，还是字符串内。</p>
</li>
<li><p><strong>代码上下文</strong>：理解代码的语法结构，知道哪些地方应该是英文代码，哪些地方是中文注释 。比如，当它检测到你在注释区域（单行注释<code>//</code>、多行注释<code>/* */</code>、文档注释<code>/** */</code> ）时，就会自动切换至中文输入法，方便你撰写说明；而在代码区域，则自动切换至英文输入法，确保代码语法正确。</p>
</li>
<li><p><strong>操作行为</strong>：留意你的操作动作，比如当你打开 Git 提交框准备填写提交信息时，它能识别提交框焦点，自动切换为中文输入法；当你使用 IdeaVim 模式时，在 NORMAL 模式下自动切换英文，确保命令正确执行。</p>
</li>
</ul>
<p>通过综合分析这些因素，插件能够动态匹配最优输入法，整个过程自然流畅，让你在不知不觉中完成输入状态的切换，将全部的注意力都集中在代码逻辑本身，极大地提升了编码效率和专注度 。</p>
<h2 id="二、核心功能：全场景覆盖的智能输入方案"><a href="#二、核心功能：全场景覆盖的智能输入方案" class="headerlink" title="二、核心功能：全场景覆盖的智能输入方案"></a>二、核心功能：全场景覆盖的智能输入方案</h2><h3 id="2-1-场景化自动切换：精准捕捉输入需求"><a href="#2-1-场景化自动切换：精准捕捉输入需求" class="headerlink" title="2.1 场景化自动切换：精准捕捉输入需求"></a>2.1 场景化自动切换：精准捕捉输入需求</h3><p>Smart Input Pro 的场景化自动切换功能十分强大，能精准识别各种输入场景，自动帮你切换到最合适的输入法 。</p>
<p>在代码编辑区，当你进入代码编写区域时，插件会迅速反应，自动切换为英文输入法，杜绝中文输入法下误输入全角符号（如 “，”“。”）导致的编译错误，为代码的准确性提供保障。它支持 JavaScript、Java、Vue 等主流语言，对字符串字面量还能进行智能识别。比如，当你输入<code>nameEn=&quot;Tom&quot;</code> 时，它能判断这里应保持英文；而当输入<code>nameCn=&quot;小明&quot;</code> ，则会自动唤醒中文 ，就像一个熟悉你代码习惯的伙伴，默默帮你处理好输入法的细节。</p>
<p>来到注释与文档区，当你输入单行注释（&#x2F;&#x2F;）、多行注释（&#x2F;**&#x2F;）或 Markdown 文档时，它又会贴心地自动切换为中文输入法，而且完美兼容中英文混合输入场景，让注释撰写无比流畅。以编写 Javadoc 为例，中文描述与英文代码符号能在它的帮助下无缝衔接，你可以专注于内容表达，无需再为输入法切换分神 。</p>
<p>除了上述区域，在工具窗口与特殊场景中，它也能发挥作用。比如在 Git 提交框，当你输入 Commit Message 时，它自动切为中文，方便你规范地撰写中文提交说明；在终端（Terminal）&#x2F;Project 窗口，它会强制英文输入，避免命令行中混入中文字符，保证命令执行顺畅；如果你使用 IdeaVim 模式，在 NORMAL 模式它自动切换为英文，INSERT 模式则按当前编辑场景智能切换，让 Vim 操作与输入法切换配合默契 。</p>
<h3 id="2-2-可视化状态反馈：光标即输入状态指示器"><a href="#2-2-可视化状态反馈：光标即输入状态指示器" class="headerlink" title="2.2 可视化状态反馈：光标即输入状态指示器"></a>2.2 可视化状态反馈：光标即输入状态指示器</h3><p>为了让你随时了解当前的输入状态，Smart Input Pro 还提供了可视化状态反馈功能。</p>
<p>其中，三色光标提示十分直观，蓝色光标代表英文小写，紫色光标表示英文大写，红色光标则意味着中文输入 。在编码过程中，你无需将视线移至系统状态栏，只要看一眼光标颜色，就能快速确认输入状态，大大减少了误操作的概率。比如，当你看到红色光标时，就知道当前是中文输入法状态，可以放心输入中文内容；而看到蓝色光标，就明白现在适合输入英文代码 。</p>
<p>此外，还有轻量浮动标签，它会在光标附近显示 “EN” 或 “中文” 微型标签，这个标签支持自定义位置与透明度。你可以根据自己的习惯，将它调整到既不遮挡视线，又能轻松看到的位置，还能根据个人喜好设置透明度，兼顾提示性与无干扰性，让你在编码时随时掌握输入状态 。</p>
<h3 id="2-3-高度可定制化：打造个人专属输入规则"><a href="#2-3-高度可定制化：打造个人专属输入规则" class="headerlink" title="2.3 高度可定制化：打造个人专属输入规则"></a>2.3 高度可定制化：打造个人专属输入规则</h3><p>每个人的编码习惯和项目需求都有所不同，Smart Input Pro 充分考虑到这一点，提供了高度可定制化的功能。</p>
<p>通过自定义正则匹配，你可以轻松定义特殊场景。例如，针对 i18n 相关文件（*.zh-CN.vue），你可以通过正则表达式让插件强制中文输入，确保国际化文件中的中文内容输入顺畅；或者在 SQL 脚本中，识别中文注释块并自动切为中文，满足特定的编程需求 。只需要简单编写正则表达式，就能让插件按照你的想法工作 。</p>
<p>它还有强大的输入法记忆机制。当你手动切换输入法后，插件会自动学习你的习惯。比如，在特定文件类型中，你偏好某种输入状态，它就会记住这个习惯，逐步优化切换策略，随着使用时间的增加，它会越来越 “懂你” ，让输入法的切换更加贴合你的使用习惯，为你打造个性化的编码输入环境 。</p>
<h2 id="三、使用指南：三步开启智能输入之旅"><a href="#三、使用指南：三步开启智能输入之旅" class="headerlink" title="三、使用指南：三步开启智能输入之旅"></a>三、使用指南：三步开启智能输入之旅</h2><h3 id="3-1-快速安装与初始化"><a href="#3-1-快速安装与初始化" class="headerlink" title="3.1 快速安装与初始化"></a>3.1 快速安装与初始化</h3><p>安装 Smart Input Pro 的过程非常简单，无论你是在线安装还是离线安装，都能轻松完成。</p>
<p>如果你选择在线安装，在 IDE 内打开插件市场，这就好比是一个插件的大超市，里面摆满了各种各样的插件 。在搜索框中输入 “Smart Input Pro”，就像在超市里寻找特定的商品一样，很快就能找到它。找到后，点击安装按钮，插件就会自动下载并安装到你的 IDE 中。安装完成后，按照提示重启 IDE，整个过程无需手动配置，就像拿到一个新的电子产品，打开就能用，真正做到了开箱即用 。</p>
<p>要是你处于网络受限的环境，也不用担心，还可以选择离线安装。你可以从 JetBrains 插件市场下载对应版本的 ZIP 文件，这个文件就像是一个装满插件的包裹 。下载好后，通过 “Install Plugin from Disk”（从磁盘安装插件）选项将下载的 ZIP 文件导入到 IDE 中，就像把包裹里的东西放进你的电脑里一样简单，轻松解决网络问题带来的困扰 。</p>
<h3 id="3-2-基础配置优化"><a href="#3-2-基础配置优化" class="headerlink" title="3.2 基础配置优化"></a>3.2 基础配置优化</h3><p>安装完成后，还需要进行一些基础配置，让插件更好地适应你的使用习惯 。</p>
<p>首先是选择默认中文输入法，在插件设置中，你可以指定自己常用的中文输入法，比如大家常用的搜狗输入法、百度输入法等 。这就像是给插件设定一个语言助手，让它知道你平时喜欢用哪种中文输入法，这样它就能在需要的时候精准地帮你切换，确保输入法的切换符合你的习惯 。</p>
<p>对于不同系统的用户，它还有一些专属的跨平台适配设置。Windows 用户可以启用 “离开 IDE 恢复系统输入法” 功能，当你离开 IDE 去做其他事情，再回到 IDE 时，输入法会自动恢复到你离开前在 IDE 中的设置，就像 IDE 记住了你离开时的输入法状态一样 。而 Mac 用户则更方便，插件支持全局输入法状态记忆，当你在不同应用之间切换时，它会自动还原你的输入环境，比如你从 IDE 切换到浏览器，再切回 IDE，输入法还是你在 IDE 中使用时的状态，让你的输入体验更加流畅 。</p>
<h3 id="3-3-进阶设置：释放插件潜力"><a href="#3-3-进阶设置：释放插件潜力" class="headerlink" title="3.3 进阶设置：释放插件潜力"></a>3.3 进阶设置：释放插件潜力</h3><p>如果你想要进一步发挥插件的强大功能，还可以进行进阶设置 。</p>
<p>通过自定义场景规则，你可以打造适合自己的输入逻辑。进入 “Settings&gt; Smart Input Pro &gt; Custom Rules”（设置 &gt; Smart Input Pro &gt; 自定义规则），在这里，你可以针对特定的文件路径、代码块结构添加专属的切换逻辑 。比如，在一个 Vue 项目中，你希望 Vue 模板中的中文文案区域始终保持中文输入，就可以在这里进行设置。通过编写规则，让插件识别 Vue 模板文件，当光标进入中文文案区域时，自动切换并保持中文输入法状态，让你的代码编写更加高效 。</p>
<p>对于使用低配设备的开发者，为了平衡智能度与流畅度，还可以开启 “轻量模式” 。开启后，插件会降低资源占用，就像给插件 “瘦身” 一样，让它在低配设备上也能轻松运行，不会因为占用过多资源而导致设备卡顿，让你在享受智能输入的同时，也能保证设备的流畅运行 。</p>
<h2 id="四、实战案例：从低效切换到丝滑编码"><a href="#四、实战案例：从低效切换到丝滑编码" class="headerlink" title="四、实战案例：从低效切换到丝滑编码"></a>四、实战案例：从低效切换到丝滑编码</h2><h3 id="4-1-典型开发场景对比"><a href="#4-1-典型开发场景对比" class="headerlink" title="4.1 典型开发场景对比"></a>4.1 典型开发场景对比</h3><p>为了让大家更直观地感受到 Smart Input Pro 带来的效率提升，我们来看一下实际开发场景中使用插件前后的对比 。</p>
<p>在未使用插件之前，开发过程中充满了各种因输入法切换带来的困扰。就拿编写代码来说，平均每 5 分钟，我就会因为输入法的问题而出现 1 次输入状态错误。比如在定义变量名时，本应使用英文输入法输入字母，却因为疏忽还停留在中文输入法状态，结果输入了全角字符，导致代码出现语法错误 。在添加注释时，也经常会因为没有及时切换输入法，使得注释中混入英文符号，或者在代码中出现中文标点，这不仅影响了代码的可读性，还需要花费额外的时间去反复检查修正 。</p>
<p>而使用 Smart Input Pro 插件后，情况就大不一样了 。在代码区，它会自动切换为英文输入法，确保我输入的代码准确无误；在注释区，又会自动切换为中文输入法，让我可以流畅地撰写注释 。就连在 Git 提交时，也无需手动切换输入法，直接就能用中文输入提交信息 。根据我的统计，使用插件后，日均减少了 200 + 次无效切换操作，编码时的专注度也提升了 30% ，真正实现了从低效到高效的转变 。</p>
<h3 id="4-2-具体操作演示（以-Vue-开发为例）"><a href="#4-2-具体操作演示（以-Vue-开发为例）" class="headerlink" title="4.2 具体操作演示（以 Vue 开发为例）"></a>4.2 具体操作演示（以 Vue 开发为例）</h3><p>接下来，以 Vue 开发为例，为大家详细演示一下 Smart Input Pro 插件的具体使用过程 。</p>
<p>在<code>&lt;template&gt;</code>标签内编写代码时，当我输入<code>v-model</code>，准备补全变量名，此时插件会保持英文输入法状态，让我可以毫无干扰地输入英文变量名 。比如输入<code>v-model=&quot;userName&quot;</code> ，整个输入过程非常流畅，不用担心输入法的问题 。</p>
<p>当切换到<code>&lt;script&gt;</code>的注释区域，我输入<code>// 按钮点击事件</code> ，插件会自动切换为中文输入法，我可以直接输入中文描述，快速完成注释内容的编写 。像<code>// 点击按钮后，调用接口获取数据</code> ，轻松就能完成输入 。</p>
<p>当打开 Git 提交窗口，准备输入提交信息时，比如输入 “修复表单验证逻辑” ，此时无需手动切换输入法，因为插件已经自动将输入法切换为中文，直接输入即可，大大提高了提交效率 。</p>
<p>进入终端输入<code>npm run dev</code>时，插件会强制将输入法切换为英文，避免因为误输入中文而导致命令错误 。即使我不小心按下了中文输入法快捷键，插件也能迅速调整回来，确保命令的正确执行 。</p>
<h2 id="五、优缺点分析：客观评估插件价值"><a href="#五、优缺点分析：客观评估插件价值" class="headerlink" title="五、优缺点分析：客观评估插件价值"></a>五、优缺点分析：客观评估插件价值</h2><h3 id="5-1-核心优势"><a href="#5-1-核心优势" class="headerlink" title="5.1 核心优势"></a>5.1 核心优势</h3><ul>
<li><p><strong>效率提升显著</strong>：在日常开发中，我们常常会因为频繁切换输入法而打断思路，降低编码效率 。而 Smart Input Pro 的自动切换功能十分强大，它能够覆盖 90% 以上的常规场景，让我们无需手动切换输入法，从而将更多的时间和精力投入到代码的编写中。以我个人的使用体验为例，在使用该插件之前，我每天需要花费大量的时间在输入法切换上，而使用之后，这些时间被节省了下来，我可以更加专注地思考代码逻辑，编码效率得到了大幅提升 。</p>
</li>
<li><p><strong>错误预防能力</strong>：在代码编写过程中，因符号错误导致的编译问题是我们经常会遇到的困扰 。而 Smart Input Pro 通过场景化输入法控制，能够有效地避免这类问题的发生。它会在我们输入代码时，自动切换为英文输入法，确保我们输入的符号都是正确的；而在输入注释时，又会自动切换为中文输入法，方便我们撰写注释 。根据实际使用情况统计，使用该插件后，因符号错误导致的编译问题降低了 80%+，大大提高了代码的质量和开发效率 。</p>
</li>
<li><p><strong>学习成本极低</strong>：对于开发者来说，学习新工具的成本是一个重要的考虑因素 。而 Smart Input Pro 的默认配置即满足多数需求，即使是初次使用的用户，也能快速上手。对于一些进阶功能，它还提供了图形化界面操作，我们只需要通过简单的设置，就能轻松实现个性化的需求，无需编写复杂的规则 。这使得我们能够在短时间内熟练掌握插件的使用方法，快速提升编码效率 。</p>
</li>
</ul>
<h3 id="5-2-改进空间"><a href="#5-2-改进空间" class="headerlink" title="5.2 改进空间"></a>5.2 改进空间</h3><ul>
<li><p><strong>硬件兼容性</strong>：在配置较低的电脑上，当我们处理复杂项目时，Smart Input Pro 可能会出现轻微光标延迟的情况 。这是因为插件在运行过程中需要占用一定的系统资源，而配置较低的电脑可能无法满足其需求 。不过，我们可以通过开启轻量模式来缓解这一问题。轻量模式下，插件会降低对系统资源的占用，从而提高运行的流畅度 。虽然开启轻量模式后，插件的一些智能功能可能会受到一定影响，但对于配置较低的电脑用户来说，这仍然是一个不错的解决方案 。</p>
</li>
<li><p><strong>高级功能付费</strong>：Smart Input Pro 的高级功能，如自定义正则匹配、多设备同步等，需要订阅专业版才能使用 。对于一些对功能要求较高的用户来说，这可能会增加一定的使用成本 。专业版的月费约 10 元，虽然价格不算高，但对于一些个人开发者或小型团队来说，可能还是会有些犹豫 。不过，免费版已经包含了核心切换功能，能够满足大多数用户的日常需求 。如果用户对高级功能的需求不是很迫切，那么使用免费版也完全可以 。</p>
</li>
</ul>
<h2 id="六、总结与推荐：谁该拥有这款神器？"><a href="#六、总结与推荐：谁该拥有这款神器？" class="headerlink" title="六、总结与推荐：谁该拥有这款神器？"></a>六、总结与推荐：谁该拥有这款神器？</h2><h3 id="6-1-适合人群"><a href="#6-1-适合人群" class="headerlink" title="6.1 适合人群"></a>6.1 适合人群</h3><ul>
<li><p><strong>中文开发者</strong>：如果你是一位中文开发者，日常开发中需要频繁在代码与中文注释、文档间切换，那么 Smart Input Pro 绝对是你的得力助手。它能自动识别输入场景，在代码区自动切换为英文输入法，在注释和文档区自动切换为中文输入法，让你无需手动切换，专注于代码的编写和逻辑的实现 。尤其是对于 Java、前端、全栈等领域的开发者，这款插件的实用性更强，能够有效提高你的开发效率 。</p>
</li>
<li><p><strong>效率敏感型开发者</strong>：对于那些追求高效开发，希望减少重复性操作，将更多精力聚焦于逻辑实现而非工具切换的人群来说，Smart Input Pro 无疑是一个绝佳的选择 。它的自动切换功能能够极大地减少无效操作，让你在编码过程中保持流畅的思路，将更多的时间和精力投入到真正有价值的工作中 。</p>
</li>
<li><p><strong>Vim&#x2F;Emacs 用户</strong>：如果你是 Vim&#x2F;Emacs 用户，在使用 IDEA 等开发工具时，常常被 IDE 快捷键与输入法切换间的频繁冲突所困扰，那么 Smart Input Pro 可以完美解决你的问题 。它能够与 IdeaVim 等模式完美适配，在 NORMAL 模式下自动切换英文，确保命令正确执行；在 INSERT 模式下则按当前编辑场景智能切换，让你的 Vim 操作与输入法切换配合得更加默契 。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>小程序之封装请求 </title>
    <url>/2020/01/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>实现了 promise 的封装，支持GET、POST、PUT 和DELELE这里设计的时候就确定为仅满足单项目通用即可，所以实现的时候融入了部分业务层面的逻辑：</p>
<ul>
<li>接口首次格式化，兼容标准的json和var形式接口（内部有大量var形式的接口）</li>
<li>直判断返回值在逻辑上是成功还是失败</li>
<li>针对返回未登录的情况，自动跳转登录流程</li>
</ul>
<p>所以省去了业务调用侧的反复判断处理通用逻辑，使用更简洁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> host = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showLoading = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">HOST</span>: host,</span><br><span class="line">  <span class="attr">API_ROOT</span>: host + <span class="string">&#x27;/api/&#x27;</span>,</span><br><span class="line">  <span class="attr">API_VERSION</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    options.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">post</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    options.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    options.<span class="property">method</span> = <span class="string">&#x27;DELETE&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">put</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    options.<span class="property">method</span> = <span class="string">&#x27;PUT&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(options);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">request</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">var</span> apiRoot = <span class="variable language_">this</span>.<span class="property">API_ROOT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> token = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      token = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> requireLogin = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">login</span> == <span class="string">&#x27;undefined&#x27;</span> || options.<span class="property">login</span> == <span class="literal">true</span>) &#123;</span><br><span class="line">      requireLogin = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      requireLogin = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options.<span class="property">loading</span> != <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; options.<span class="property">loading</span> == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(showLoading)</span><br><span class="line">      showLoading = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;加载中&quot;</span>,</span><br><span class="line">          <span class="attr">icon</span>: <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">1e4</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: apiRoot + options.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">data</span>: options.<span class="property">data</span>,</span><br><span class="line">        <span class="attr">method</span>: options.<span class="property">method</span> ? options.<span class="property">method</span> : <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">header</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;XX-Token&#x27;</span>: token,</span><br><span class="line">          <span class="string">&#x27;XX-Device-Type&#x27;</span>: <span class="string">&#x27;wxapp&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;XX-Api-Version&#x27;</span>: that.<span class="property">API_VERSION</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(showLoading)</span><br><span class="line">          wx.<span class="title function_">hideToast</span>()</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">10001</span> &amp;&amp; requireLogin) &#123;</span><br><span class="line">            <span class="comment">// 执行登陆</span></span><br><span class="line">            <span class="keyword">let</span> currentPages = <span class="title function_">getCurrentPages</span>();</span><br><span class="line">            <span class="keyword">let</span> currentRoute = currentPages.<span class="title function_">pop</span>()[<span class="string">&#x27;__route__&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (currentRoute != <span class="string">&#x27;pages/login/login&#x27;</span>) &#123;</span><br><span class="line">              wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/pages/login/login&#x27;</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(showLoading)</span><br><span class="line">          wx.<span class="title function_">hideToast</span>()</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">&#x27;../utils/ajax.js&#x27;</span></span><br><span class="line"></span><br><span class="line">ajax.<span class="title function_">get</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: url,</span><br><span class="line">  <span class="attr">login</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript Promise</tag>
        <tag>微信小程序</tag>
        <tag>请求封装</tag>
        <tag>网络请求</tag>
        <tag>授权与认证</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序之模型实现 </title>
    <url>/2020/01/18/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>model层就不用多说了，主要是把数据处理部分独立出来，便于统一服务和维护，这里重点强调下model内部的实现细节，这里有一个实现技巧可以用在其它别的地方。下面直接上代码部分。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cache <span class="keyword">from</span> <span class="string">&#x27;../utils/cache.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ajax <span class="keyword">from</span> <span class="string">&#x27;../utils/ajax.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一的接口地址，一般一个controller下面多个action是一致的</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化请求参数，根据不同的接口自行处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> params 键值对对象,形如&#123;&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 格式化后的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> formatParams = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化返回结果，根据不同的接口自行处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> data 对象 数组等任何合法的JS数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 格式化后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> formatResult = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取可用游戏业务列表</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@params</span> params 参数,本接口用不到</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125; 返回 Promise 对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getList</span>(<span class="params">params</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果接口地址不一致，这里重写</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有特殊的参数处理逻辑，这里重写</span></span><br><span class="line">    <span class="keyword">let</span> formatParams = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有特殊的格式处理，这里重写</span></span><br><span class="line">    <span class="keyword">let</span> formatResult = <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要自己先判断缓存或者别的处理，这里手动使用Promise封装一下即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> goods_list = cache.<span class="title function_">get</span>(<span class="string">&quot;goods_list&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> == goods_list) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(goods_list)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ajax.<span class="title function_">get</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: url,</span><br><span class="line">          <span class="attr">data</span>: <span class="title function_">formatParams</span>(params),</span><br><span class="line">          <span class="attr">login</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> data = <span class="title function_">formatResult</span>(res.<span class="property">data</span>)</span><br><span class="line">          cache.<span class="title function_">set</span>(<span class="string">&quot;goods_list&quot;</span>, data, <span class="number">86400</span>)</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> goods <span class="keyword">from</span> <span class="string">&#x27;../../models/goods.js&#x27;</span></span><br><span class="line"></span><br><span class="line">goods.<span class="title function_">getList</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>, res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li>把参数处理和返回结果处理拆出来放到单独的处理方法里，方法名称保持统一： <code>formatParams</code> ， <code>formatResult</code> </li>
<li>同时最外层定义好默认的 <code>formatParams</code> ， <code>formatResult</code> ，如果不做特殊处理，直接使用默认即可（建议不处理也调用下默认方法，规范流程）</li>
<li>还有一点，model里方法命令有统一规范都是已 <code>get</code> ， <code>add</code> ， <code>update</code> ， <code>del</code> 开头</li>
</ol>
<p>这个思路其实可以运用到任何场景，特别是在没有任何限定框架的场景，我们只需要按照这个模式去实现，代码一样很清晰漂亮。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>小程序开发</tag>
        <tag>缓存</tag>
        <tag>数据管理</tag>
        <tag>模型层</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序之缓存类 </title>
    <url>/2020/01/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E7%BC%93%E5%AD%98%E7%B1%BB/</url>
    <content><![CDATA[<p>其实，小程序自带了缓存接口，有同步 <code>wx.setStorageSync</code> ，异步 <code>wx.setStorage</code> 的方法，但是实际在使用缓存的场景里，我们一般都是需要设置缓存有效时间的，本cache工具就是对小程序缓存接口的封装，实现了对缓存有效期的支持。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;JDC_TEST&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">      wx.<span class="title function_">removeStorageSync</span>(<span class="string">&quot;JDC_TEST&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;提示&quot;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;小程序缓存出现问题,请稍后使用&quot;</span>,</span><br><span class="line">        <span class="attr">showCancel</span>: !<span class="number">1</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(e.<span class="property">confirm</span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户点击确定&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">name, value, expire</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expire == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      expire = expire * <span class="number">1e3</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      expire = <span class="number">2592e5</span></span><br><span class="line">    &#125;</span><br><span class="line">    wx.<span class="title function_">removeStorageSync</span>(name);</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      wx.<span class="title function_">setStorageSync</span>(name, &#123;</span><br><span class="line">        <span class="attr">_value</span>: value,</span><br><span class="line">        <span class="attr">_time</span>: time,</span><br><span class="line">        <span class="attr">_age</span>: time + expire</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="title function_">_isExpire</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (data !== <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data.<span class="property">_value</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">del</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      wx.<span class="title function_">removeStorageSync</span>(name);</span><br><span class="line">      <span class="keyword">return</span> !<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">_isExpire</span>: <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = wx.<span class="title function_">getStorageSync</span>(name);</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">if</span> (data &amp;&amp; time &lt; data.<span class="property">_age</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cache <span class="keyword">from</span> <span class="string">&#x27;../utils/cache.js&#x27;</span></span><br><span class="line"></span><br><span class="line">cache.<span class="title function_">set</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>,<span class="number">7200</span>);</span><br><span class="line">cache.<span class="title function_">get</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">cache.<span class="title function_">del</span>(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>性能优化</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用 Dark Reader 破解阅读全文</title>
    <url>/2022/09/30/%E5%B7%A7%E7%94%A8-Dark-Reader-%E7%A0%B4%E8%A7%A3%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</url>
    <content><![CDATA[<p>在阅读一些网站文章时，时常会遇到文章内容只展示一部分，用户需要 关注博主、或者关注公众号 的一系列障碍。</p>
<p><img src="/images/pasted-33.png" alt="upload successful"></p>
<p><img src="/images/pasted-34.png" alt="upload successful"></p>
<p>于是使用“开发者工具”分析了一下前端代码发现。大多数实现逻辑基本上都是将文章内容元素设置一个较小高度，超出的部分隐藏掉。再在后追加一个“查看全文”的元素。</p>
<p>想起 Dark Reader （暗黑）插件的自定义CSS功能，因为在使用通用暗黑方案后不能满足所有网站，所以要对一些不能完美适配的网站添加亿点自定义代码。在这正好派到了用场。（当然你也可以使用其他插件）</p>
<p>打开 Dark Reader 插件，点击开发者工具</p>
<p><img src="/images/pasted-35.png" alt="upload successful"></p>
<p>在 主题编辑器 中添加一下代码：（这里用了IT屋和CSDN做演示）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">================================</span><br><span class="line"></span><br><span class="line">it1352<span class="selector-class">.com</span></span><br><span class="line"></span><br><span class="line">CSS</span><br><span class="line"><span class="selector-class">.arc-body-main-more</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arc-body-main</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">================================</span><br><span class="line"></span><br><span class="line">blog<span class="selector-class">.csdn</span><span class="selector-class">.net</span></span><br><span class="line"></span><br><span class="line">CSS</span><br><span class="line"><span class="selector-class">.article_content</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.hide-article-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-36.png" alt="upload successful"></p>
<p>点击 Apply，刷新网站，就可以清除全文阅读限制了</p>
<p>实现原理很简单：隐藏关注元素，清除文章内容元素的高度限制。</p>
<p>注：此方法只能用于前端限制，后端限制是不行的。</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>浏览器插件</tag>
        <tag>开发者工具</tag>
      </tags>
  </entry>
  <entry>
    <title>当script中的type等于text/html时，我们可以做很多事件！</title>
    <url>/2017/07/15/%E5%BD%93script%E4%B8%AD%E7%9A%84type%E7%AD%89%E4%BA%8Etext_html%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%BE%88%E5%A4%9A%E4%BA%8B%E4%BB%B6%EF%BC%81/</url>
    <content><![CDATA[<p>我们可以在 <code>&lt;script&gt;</code> 片断中定义一个被JS调用的代码，但代码又不在页面上显示，这时，我们可以使用下面的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;commentTemplate&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;photo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;[UserImg]&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>[UserName]：<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>[CreateDate]<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comment_ul_2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;addFun&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click me&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\[([^\\[\\]]*?)\\]&quot;</span>, <span class="string">&#x27;igm&#x27;</span>); <span class="comment">//i g m是指分别用于指定区分大小写的匹配、全局匹配和多行匹配。</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#addFun&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;commentTemplate&quot;</span>).<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> source = html.<span class="title function_">replace</span>(reg, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123; <span class="keyword">return</span> &#123; <span class="string">&#x27;UserImg&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;UserName&#x27;</span>: <span class="string">&#x27;zhang&#x27;</span>, <span class="string">&#x27;CreateDate&#x27;</span>: <span class="string">&#x27;2011-1-1&#x27;</span>&#125;[key]; &#125;);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#comment_ul_2&quot;</span>).<span class="title function_">append</span>(source);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> zzl = <span class="string">&quot;name:[name]&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    zzl = zzl.<span class="title function_">replace</span>(reg, <span class="keyword">function</span> (<span class="params">node, key</span>) &#123; <span class="keyword">return</span> &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;占占&#x27;</span>&#125;[key]; &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(zzl);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>OK，这个意思是说，当你单击按钮时，可以把 <code>commentTemplate</code> 的内容追到 <code>comment_ul_2</code> 里，这很有意思吧，呵呵！</p>
<p>而其中有一个 <code>replace</code> ，也很有意思，向在替换时，可以接受一个 json 字符串，然后根据 json 的 <code>key</code> 来对比 js 模块里的 <code>key</code> ，进行赋值！</p>
<p>真的很有意思！</p>
]]></content>
      <tags>
        <tag>text/html</tag>
        <tag>jQuery</tag>
        <tag>正则表达式</tag>
        <tag>模板引擎</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手配置 PhpStorm + WSL2（Alpine Linux）+ XDebug 调试环境</title>
    <url>/2025/10/10/%E6%89%8B%E6%8A%8A%E6%89%8B%E9%85%8D%E7%BD%AE-PhpStorm-WSL2%EF%BC%88Alpine-Linux%EF%BC%89-XDebug-%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>在 Windows 11 下使用 WSL2 开发 PHP 项目时，断点调试是提升效率的关键。本文将详细讲解如何基于 <strong>Alpine Linux v3.18</strong> 配置 PhpStorm + XDebug 环境，解决版本兼容、路径映射、调试连接等核心问题，适用于 Hyperf、Laravel 等主流 PHP 框架。</p>
<h2 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a>一、环境说明</h2><p>先明确本地开发环境的核心信息，避免后续配置因版本不匹配导致失败：</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>版本&#x2F;信息</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>宿主机系统</td>
<td>Windows 11</td>
<td>需已启用 WSL2（需先开启虚拟机平台功能）</td>
</tr>
<tr>
<td>WSL2 发行版</td>
<td>Alpine Linux v3.18</td>
<td>已更换阿里云源（安装速度更快）</td>
</tr>
<tr>
<td>PHP 版本</td>
<td>8.1.2</td>
<td>需与 XDebug 版本兼容</td>
</tr>
<tr>
<td>XDebug 版本</td>
<td>3.2.2</td>
<td>对应 PHP 8.1 的 PECL 包</td>
</tr>
<tr>
<td>调试框架示例</td>
<td>Hyperf 3.x</td>
<td>也适用于 Laravel、ThinkPHP 等</td>
</tr>
<tr>
<td>PhpStorm 版本</td>
<td>2023.x 及以上</td>
<td>确保支持 XDebug 3.x</td>
</tr>
</tbody></table>
<h2 id="二、前置准备"><a href="#二、前置准备" class="headerlink" title="二、前置准备"></a>二、前置准备</h2><p>在开始配置前，需完成以下基础操作：</p>
<ol>
<li><strong>启用 WSL2 并安装 Alpine</strong>：参考 <span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL3dpbmRvd3Mvd3NsL2luc3RhbGw=">微软官方文档<i class="fa fa-external-link-alt"></i></span>，确保 Alpine 能正常通过 <code>wsl</code> 命令启动。</li>
<li><strong>更换 Alpine 国内源</strong>：默认源速度较慢，需先替换为阿里云源（否则后续安装 XDebug 可能失败）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑源配置文件</span></span><br><span class="line">vi /etc/apk/repositories</span><br><span class="line"><span class="comment"># 替换为阿里云源（Alpine 3.18）</span></span><br><span class="line">https://mirrors.aliyun.com/alpine/v3.18/main</span><br><span class="line">https://mirrors.aliyun.com/alpine/v3.18/community</span><br><span class="line"><span class="comment"># 更新源缓存</span></span><br><span class="line">apk update</span><br></pre></td></tr></table></figure></li>
<li><strong>确认 PHP 已安装</strong>：在 WSL 中执行 <code>php -v</code>，确保输出 <code>PHP 8.1.2</code> 信息（若未安装，需先通过 <code>apk add php81 php81-cli php81-common</code> 安装）。</li>
</ol>
<h2 id="三、步骤-1：安装-XDebug（WSL-内操作）"><a href="#三、步骤-1：安装-XDebug（WSL-内操作）" class="headerlink" title="三、步骤 1：安装 XDebug（WSL 内操作）"></a>三、步骤 1：安装 XDebug（WSL 内操作）</h2><p>XDebug 需通过 Alpine 的 PECL 仓库安装，且必须选择与 PHP 版本匹配的包（PHP 8.1 对应 <code>php81-pecl-xdebug</code>）。</p>
<h3 id="1-1-搜索匹配的-XDebug-包"><a href="#1-1-搜索匹配的-XDebug-包" class="headerlink" title="1.1 搜索匹配的 XDebug 包"></a>1.1 搜索匹配的 XDebug 包</h3><p>先确认仓库中是否有对应 PHP 版本的 XDebug：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk search xdebug</span><br></pre></td></tr></table></figure>
<p>输出结果中需包含 <code>php81-pecl-xdebug-3.2.2-r0</code>（若显示 <code>php82-*</code> 则为 PHP 8.2 版本，请勿安装，避免版本不兼容）。</p>
<h3 id="1-2-安装-XDebug"><a href="#1-2-安装-XDebug" class="headerlink" title="1.2 安装 XDebug"></a>1.2 安装 XDebug</h3><p>执行安装命令，Alpine 会自动处理依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add php81-pecl-xdebug</span><br></pre></td></tr></table></figure>
<p>安装成功后，执行以下命令验证是否加载 XDebug 扩展：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>
<p>若输出中包含 <code>with Xdebug v3.2.2</code>，说明安装成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 8.1.2 (cli) (built: Feb  1 2023 12:05:42) (NTS)</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v4.1.2, Copyright (c) Zend Technologies</span><br><span class="line">    with Xdebug v3.2.2, Copyright (c) 2002-2023, by Derick Rethans</span><br></pre></td></tr></table></figure>


<h2 id="四、步骤-2：配置-XDebug（关键！避免调试失败）"><a href="#四、步骤-2：配置-XDebug（关键！避免调试失败）" class="headerlink" title="四、步骤 2：配置 XDebug（关键！避免调试失败）"></a>四、步骤 2：配置 XDebug（关键！避免调试失败）</h2><p>XDebug 3.x 与 2.x 配置差异较大，需编辑专属配置文件，核心是指定「调试模式」「宿主机地址」「端口」。</p>
<h3 id="2-1-找到-XDebug-配置文件"><a href="#2-1-找到-XDebug-配置文件" class="headerlink" title="2.1 找到 XDebug 配置文件"></a>2.1 找到 XDebug 配置文件</h3><p>Alpine 中 PHP 8.1 的 XDebug 配置文件路径固定为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/php81/conf.d/50_xdebug.ini</span><br></pre></td></tr></table></figure>

<h3 id="2-2-写入配置内容"><a href="#2-2-写入配置内容" class="headerlink" title="2.2 写入配置内容"></a>2.2 写入配置内容</h3><p>将以下内容复制到文件中，<strong>每个配置项都有详细注释</strong>，无需额外修改（<code>host.docker.internal</code> 是 WSL2 内置的「宿主机 IP 别名」，无需手动查宿主机 IP）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 启用 XDebug 扩展（必须放在最前面）</span></span><br><span class="line"><span class="attr">zend_extension</span>=xdebug.so</span><br><span class="line"></span><br><span class="line"><span class="comment">; 调试模式：debug（断点调试）+ develop（开发辅助，如错误提示）</span></span><br><span class="line"><span class="attr">xdebug.mode</span>=debug,develop</span><br><span class="line"></span><br><span class="line"><span class="comment">; 自动发现客户端主机（WSL 环境下建议开启，避免手动改 IP）</span></span><br><span class="line"><span class="attr">xdebug.discover_client_host</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 强制指定宿主机地址（WSL2 专用，指向 Windows 宿主机）</span></span><br><span class="line"><span class="attr">xdebug.client_host</span>=host.docker.internal</span><br><span class="line"></span><br><span class="line"><span class="comment">; 调试端口（默认 9003，需与 PhpStorm 保持一致，避免冲突）</span></span><br><span class="line"><span class="attr">xdebug.client_port</span>=<span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; IDE 标识（必须与 PhpStorm 配置的 IDE Key 一致，默认 PHPSTORM）</span></span><br><span class="line"><span class="attr">xdebug.idekey</span>=PHPSTORM</span><br><span class="line"></span><br><span class="line"><span class="comment">; 请求启动时自动触发调试（无需手动触发，开发更便捷）</span></span><br><span class="line"><span class="attr">xdebug.start_with_request</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 显示详细调试日志（调试失败时可开启，日志路径自行指定）</span></span><br><span class="line"><span class="comment">; xdebug.log=/var/log/xdebug.log</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-验证配置生效"><a href="#2-3-验证配置生效" class="headerlink" title="2.3 验证配置生效"></a>2.3 验证配置生效</h3><p>配置后需重启 PHP 服务（若用 Hyperf 等框架，重启服务即可），并执行以下命令确认配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -i | grep XDebug</span><br></pre></td></tr></table></figure>
<p>输出中需包含 <code>xdebug.mode =&gt; debug,develop</code> <code>xdebug.client_port =&gt; 9003</code> 等信息，说明配置正确。</p>
<h2 id="五、步骤-3：添加环境变量（关联-PhpStorm-服务器）"><a href="#五、步骤-3：添加环境变量（关联-PhpStorm-服务器）" class="headerlink" title="五、步骤 3：添加环境变量（关联 PhpStorm 服务器）"></a>五、步骤 3：添加环境变量（关联 PhpStorm 服务器）</h2><p>需在 WSL 中设置 <code>PHP_IDE_CONFIG</code> 环境变量，指定 PhpStorm 中配置的「服务器名称」，确保路径映射生效。</p>
<h3 id="3-1-写入环境变量"><a href="#3-1-写入环境变量" class="headerlink" title="3.1 写入环境变量"></a>3.1 写入环境变量</h3><p>执行以下命令，将环境变量添加到 <code>~/.bashrc</code>（若用 Zsh 则改为 <code>~/.zshrc</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入环境变量（SomeName 可自定义，后续 PhpStorm 需用相同名称）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PHP_IDE_CONFIG=&quot;serverName=SomeName&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效环境变量（无需重启 WSL）</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="3-2-验证环境变量"><a href="#3-2-验证环境变量" class="headerlink" title="3.2 验证环境变量"></a>3.2 验证环境变量</h3><p>执行 <code>echo $PHP_IDE_CONFIG</code>，输出 <code>serverName=SomeName</code> 即成功。</p>
<h2 id="六、步骤-4：配置-PhpStorm（宿主机操作）"><a href="#六、步骤-4：配置-PhpStorm（宿主机操作）" class="headerlink" title="六、步骤 4：配置 PhpStorm（宿主机操作）"></a>六、步骤 4：配置 PhpStorm（宿主机操作）</h2><p>PhpStorm 需配置「PHP 解释器」「服务器」「XDebug 端口」，核心是解决「WSL 路径与 Windows 路径映射」问题（断点不命中的常见原因）。</p>
<h3 id="4-1-配置-PHP-解释器（关联-WSL-中的-PHP）"><a href="#4-1-配置-PHP-解释器（关联-WSL-中的-PHP）" class="headerlink" title="4.1 配置 PHP 解释器（关联 WSL 中的 PHP）"></a>4.1 配置 PHP 解释器（关联 WSL 中的 PHP）</h3><ol>
<li>打开 PhpStorm → 进入 <code>File &gt; Settings &gt; PHP</code>（Windows&#x2F;Linux）或 <code>PhpStorm &gt; Settings &gt; PHP</code>（Mac）。</li>
<li>点击「CLI Interpreter」右侧的 <code>...</code> → 点击左上角 <code>+</code> → 选择「From Docker, Vagrant, WSL, Remote…」。</li>
<li>在弹出的窗口中选择「WSL」→ 选择已安装的「Alpine Linux」→ 自动识别 PHP 路径（通常为 <code>/usr/bin/php81</code>）→ 点击「OK」。</li>
<li>回到 PHP 配置页，确保「CLI Interpreter」已选中 WSL 中的 PHP 8.1。</li>
</ol>
<h3 id="4-2-配置服务器（路径映射关键）"><a href="#4-2-配置服务器（路径映射关键）" class="headerlink" title="4.2 配置服务器（路径映射关键）"></a>4.2 配置服务器（路径映射关键）</h3><ol>
<li>进入 <code>File &gt; Settings &gt; PHP &gt; Servers</code> → 点击左上角 <code>+</code>，配置以下信息：<ul>
<li><strong>Name</strong>：输入 <code>SomeName</code>（必须与 WSL 中 <code>serverName</code> 一致！）。</li>
<li><strong>Host</strong>：输入项目的访问地址（如 Hyperf 项目默认 <code>127.0.0.1</code>，Laravel 项目可能为 <code>localhost</code>）。</li>
<li><strong>Port</strong>：输入项目端口（如 Hyperf 默认 <code>9501</code>，Laravel 默认 <code>8000</code>）。</li>
<li><strong>Debugger</strong>：选择 <code>XDebug</code>。</li>
<li><strong>Use path mappings</strong>：必须勾选！然后配置「本地路径 ↔ WSL 路径」：<ul>
<li>左侧「Local Path」：选择 Windows 中项目的本地路径（如 <code>D:\projects\hyperf-demo</code>）。</li>
<li>右侧「Remote Path」：选择 WSL 中项目的路径（如 <code>/home/user/hyperf-demo</code>）。</li>
</ul>
</li>
</ul>
</li>
<li>点击「OK」保存。</li>
</ol>
<h3 id="4-3-配置-XDebug-端口"><a href="#4-3-配置-XDebug-端口" class="headerlink" title="4.3 配置 XDebug 端口"></a>4.3 配置 XDebug 端口</h3><ol>
<li>进入 <code>File &gt; Settings &gt; PHP &gt; Debug &gt; XDebug</code>。</li>
<li>确认「Debug port」为 <code>9003</code>（与 WSL 中 <code>xdebug.client_port</code> 一致）。</li>
<li>勾选「Allow connection to unprofiled scripts」→ 点击「OK」。</li>
</ol>
<h2 id="七、步骤-5：启动调试侦听（PhpStorm-操作）"><a href="#七、步骤-5：启动调试侦听（PhpStorm-操作）" class="headerlink" title="七、步骤 5：启动调试侦听（PhpStorm 操作）"></a>七、步骤 5：启动调试侦听（PhpStorm 操作）</h2><p>PhpStorm 需要主动「侦听」WSL 发送的调试请求，步骤如下：</p>
<ol>
<li>点击 PhpStorm 右上角的「电话」图标（Hover 显示「Start Listening for PHP Debug Connections」），图标变亮表示已启动侦听。</li>
<li>（可选）开启「断点自动触发」：点击「小虫子」图标（Hover 显示「Debug ‘当前项目名’」），或按快捷键 <code>Shift + F9</code>。</li>
</ol>
<h3 id="验证侦听是否成功"><a href="#验证侦听是否成功" class="headerlink" title="验证侦听是否成功"></a>验证侦听是否成功</h3><p>在 Windows 中打开「命令提示符（CMD）」，执行以下命令查看 9003 端口是否被 PhpStorm 占用：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano | <span class="built_in">findstr</span> <span class="number">9003</span></span><br></pre></td></tr></table></figure>
<p>若输出以下内容（<code>LISTENING</code> 状态），说明侦听正常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP    0.0.0.0:9003           0.0.0.0:0              LISTENING       31268  # 31268 是 PhpStorm 进程 ID</span><br><span class="line">TCP    [::]:9003              [::]:0                 LISTENING       31268</span><br></pre></td></tr></table></figure>


<h2 id="八、步骤-6：启动项目并验证调试连接"><a href="#八、步骤-6：启动项目并验证调试连接" class="headerlink" title="八、步骤 6：启动项目并验证调试连接"></a>八、步骤 6：启动项目并验证调试连接</h2><p>以 Hyperf 项目为例，在 WSL 中启动项目，然后验证 PhpStorm 与 WSL 的连接。</p>
<h3 id="8-1-启动-PHP-项目（WSL-内）"><a href="#8-1-启动-PHP-项目（WSL-内）" class="headerlink" title="8.1 启动 PHP 项目（WSL 内）"></a>8.1 启动 PHP 项目（WSL 内）</h3><p>进入项目根目录，执行启动命令（不同框架命令不同）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hyperf 项目启动命令</span></span><br><span class="line">php bin/hyperf.php start</span><br></pre></td></tr></table></figure>
<p>启动成功后输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INFO] Worker#0 started.</span><br><span class="line">[INFO] HTTP Server listening at 0.0.0.0:9501</span><br></pre></td></tr></table></figure>

<h3 id="8-2-验证调试连接（Windows-CMD）"><a href="#8-2-验证调试连接（Windows-CMD）" class="headerlink" title="8.2 验证调试连接（Windows CMD）"></a>8.2 验证调试连接（Windows CMD）</h3><p>再次执行端口监听命令，查看是否出现「ESTABLISHED」状态（表示 WSL 与 PhpStorm 已建立连接）：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano | <span class="built_in">findstr</span> <span class="number">9003</span></span><br></pre></td></tr></table></figure>
<p>成功连接的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP    0.0.0.0:9003           0.0.0.0:0              LISTENING       31268</span><br><span class="line">TCP    172.23.240.1:9003      172.23.252.48:43416    ESTABLISHED     31268  # 新增的连接</span><br><span class="line">TCP    [::]:9003              [::]:0                 LISTENING       31268</span><br></pre></td></tr></table></figure>


<h2 id="九、步骤-7：断点调试（核心操作）"><a href="#九、步骤-7：断点调试（核心操作）" class="headerlink" title="九、步骤 7：断点调试（核心操作）"></a>九、步骤 7：断点调试（核心操作）</h2><p>连接成功后，即可通过断点调试查看变量、调用栈等信息，以 Hyperf 控制器为例：</p>
<ol>
<li><strong>打断点</strong>：在 PhpStorm 中打开 <code>app/Controller/IndexController.php</code>，在 <code>index</code> 方法的第一行代码左侧点击，出现红色圆点（断点）。</li>
<li><strong>触发请求</strong>：在 Windows 浏览器中访问 <code>http://127.0.0.1:9501</code>（Hyperf 默认接口），或用 Postman 发送请求。</li>
<li><strong>查看调试面板</strong>：请求触发后，PhpStorm 会自动弹出调试面板，包含以下核心信息：<ul>
<li><strong>Frames</strong>：查看函数调用栈。</li>
<li><strong>Variables</strong>：查看当前作用域的变量值（如请求参数、数据库查询结果）。</li>
<li><strong>Watches</strong>：手动添加需要监控的变量。</li>
</ul>
</li>
<li><strong>调试控制</strong>：使用 PhpStorm 底部的调试工具栏控制流程：<ul>
<li><code>F8</code>：单步执行（跳过函数内部）。</li>
<li><code>F7</code>：单步进入（进入函数内部）。</li>
<li><code>Shift + F8</code>：单步跳出（从函数内部跳出）。</li>
<li><code>F9</code>：继续执行（直到下一个断点）。</li>
</ul>
</li>
</ol>
<h2 id="十、常见问题排查（避坑指南）"><a href="#十、常见问题排查（避坑指南）" class="headerlink" title="十、常见问题排查（避坑指南）"></a>十、常见问题排查（避坑指南）</h2><h3 id="1-断点不命中？"><a href="#1-断点不命中？" class="headerlink" title="1. 断点不命中？"></a>1. 断点不命中？</h3><ul>
<li>原因 1：路径映射错误 → 检查 PhpStorm 服务器配置中的「Local Path」与「Remote Path」是否完全对应（如 Windows 路径带 <code>\</code>，WSL 路径带 <code>/</code>）。</li>
<li>原因 2：XDebug 配置错误 → 执行 <code>php -i | grep XDebug</code>，确认 <code>xdebug.mode</code> 包含 <code>debug</code>，<code>xdebug.client_host</code> 为 <code>host.docker.internal</code>。</li>
<li>原因 3：端口被占用 → 用 <code>netstat -ano | findstr 9003</code> 查看是否有其他进程占用 9003 端口，若有则修改 <code>xdebug.client_port</code> 为其他端口（如 9004），并同步更新 PhpStorm 配置。</li>
</ul>
<h3 id="2-无法连接到-XDebug？"><a href="#2-无法连接到-XDebug？" class="headerlink" title="2. 无法连接到 XDebug？"></a>2. 无法连接到 XDebug？</h3><ul>
<li>原因 1：PhpStorm 未启动侦听 → 确认右上角「电话」图标已亮。</li>
<li>原因 2：WSL 网络问题 → 尝试手动指定宿主机 IP（替换 <code>xdebug.client_host</code> 为 Windows 的局域网 IP，如 <code>192.168.1.100</code>）。</li>
<li>原因 3：XDebug 日志未开启 → 开启 <code>xdebug.log=/var/log/xdebug.log</code>，查看日志中的错误信息（如 <code>Could not connect to client host</code>）。</li>
</ul>
<h3 id="3-PHP-版本与-XDebug-不兼容？"><a href="#3-PHP-版本与-XDebug-不兼容？" class="headerlink" title="3. PHP 版本与 XDebug 不兼容？"></a>3. PHP 版本与 XDebug 不兼容？</h3><ul>
<li>症状：执行 <code>php -v</code> 不显示 XDebug 信息 → 确保安装的 XDebug 包与 PHP 版本匹配（PHP 8.1 对应 <code>php81-pecl-xdebug</code>，PHP 8.2 对应 <code>php82-pecl-xdebug</code>）。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，即可在 Windows 11 + WSL2（Alpine）环境下实现 PhpStorm 与 XDebug 的无缝调试。核心是「版本匹配」「路径映射」「端口一致」三个关键点，遇到问题时优先查看 XDebug 日志和端口监听状态，大部分问题可快速定位解决。</p>
]]></content>
  </entry>
  <entry>
    <title>应用程序无法正常启动(0xc000007b)</title>
    <url>/2022/01/14/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8-0xc000007b/</url>
    <content><![CDATA[<blockquote>
<p>在使用电脑办公过程中，安装应用程序时难免会遇到无法正常安装或者无法正常启动的情况，这对我们使用电脑带来了诸多不便，那么遇到应用程序无法正常启动的问题要如何解决呢？<br>“应用程序无法正常启动”这个问题想必很多用户都遇到过吧，其实造成程序无法运行启动的原因很多，需要对出现的代码进行解读再来解决</p>
</blockquote>
<p>以下是应用程序无法正常启动(0xc000007b)的详细解决方案：</p>
<h2 id="第一种方案：SFC检查系统完整性来尝试修复丢失问题件"><a href="#第一种方案：SFC检查系统完整性来尝试修复丢失问题件" class="headerlink" title="第一种方案：SFC检查系统完整性来尝试修复丢失问题件"></a>第一种方案：SFC检查系统完整性来尝试修复丢失问题件</h2><ol>
<li>以管理员身份运行场面命令提示符</li>
<li>使用 <code>sfc /scannow</code> 命令进行系统扫描和修复</li>
<li>修复完成后，尝试应用程序是否可以正常运行</li>
</ol>
<h2 id="第二种方案：使用DirectX修复工具（推荐）"><a href="#第二种方案：使用DirectX修复工具（推荐）" class="headerlink" title="第二种方案：使用DirectX修复工具（推荐）"></a>第二种方案：使用DirectX修复工具（推荐）</h2><p>这款软件能自动完成校验、检测、修复、注册的功能，十分简便易用，修复完成之后，重启一般就可以解决这个问题。<br>下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1DTi9kb3dubG9hZC9jb25maXJtYXRpb24uYXNweD9pZD0zNQ==">https://www.microsoft.com/zh-CN/download/confirmation.aspx?id=35<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <tags>
        <tag>错误代码 0xc000007b</tag>
        <tag>DirectX</tag>
        <tag>系统文件检查器 SFC</tag>
        <tag>注册表修复</tag>
        <tag>磁盘错误检查</tag>
      </tags>
  </entry>
  <entry>
    <title>提升开发效率的神器：it-tools</title>
    <url>/2023/03/02/%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E7%A5%9E%E5%99%A8%EF%BC%9Ait-tools/</url>
    <content><![CDATA[<blockquote>
<p>在当今快节奏的开发环境中，拥有一个功能强大且易于使用的工具箱对于提升工作效率至关重要。今天，我们将介绍一个轻量级、开源的前端工具箱——<strong>it-tools</strong>。这个工具箱专为开发者设计，旨在简化日常开发任务，无论是普通用户还是资深开发者都能从中受益。</p>
</blockquote>
<p><img src="/images/pasted-72.png" alt="upload successful"></p>
<h2 id="为什么选择-it-tools？"><a href="#为什么选择-it-tools？" class="headerlink" title="为什么选择 it-tools？"></a>为什么选择 it-tools？</h2><p><strong>it-tools</strong> 以其简洁高效、一站式解决方案、跨平台支持和开源特性脱颖而出：</p>
<ul>
<li><strong>简洁高效</strong>：提供众多常用小工具，降低学习和使用成本。</li>
<li><strong>一站式解决方案</strong>：一个界面解决多种需求，简化工作流程。</li>
<li><strong>跨平台支持</strong>：通过 web 端访问，支持多种操作系统和浏览器环境。</li>
<li><strong>开源且持续更新</strong>：社区活跃，功能不断扩展和优化。</li>
</ul>
<h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p><strong>it-tools</strong> 作为一个基于 Web 的前端工具箱，提供了多种部署方式：</p>
<h3 id="在线使用"><a href="#在线使用" class="headerlink" title="在线使用"></a>在线使用</h3><p>最简单的部署方式是直接在线使用，无需本地部署。访问 <span class="exturl" data-url="aHR0cHM6Ly9pdC10b29scy50ZWNoLw==">https://it-tools.tech/<i class="fa fa-external-link-alt"></i></span> 即可立即开始使用所有功能，所有操作都在浏览器中完成。如果访问的语言不正确，可以在右上角切换。</p>
<h3 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h3><h4 id="使用-docker-命令"><a href="#使用-docker-命令" class="headerlink" title="使用 docker 命令"></a>使用 docker 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name it-tools \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">-p 8080:80 \</span><br><span class="line">corentinth/it-tools:latest</span><br></pre></td></tr></table></figure>

<h4 id="使用-docker-compose"><a href="#使用-docker-compose" class="headerlink" title="使用 docker-compose"></a>使用 docker-compose</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">it-tools:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">corentinth/it-tools:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br></pre></td></tr></table></figure>

<h3 id="本地编译部署"><a href="#本地编译部署" class="headerlink" title="本地编译部署"></a>本地编译部署</h3><p>如果你想将 <strong>it-tools</strong> 部署到线上服务器供团队使用，可以按照以下步骤进行：</p>
<ol>
<li><strong>构建项目</strong></li>
</ol>
<p>  首先生成项目的静态文件：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CorentinTh/it-tools.git</span><br><span class="line"><span class="built_in">cd</span> it-tools</span><br><span class="line">pnpm install</span><br><span class="line"><span class="comment"># 运行开发环境</span></span><br><span class="line">pnpm dev</span><br><span class="line"><span class="comment"># 编译上线环境</span></span><br><span class="line">pnpm build</span><br></pre></td></tr></table></figure>
<p>  如果你想开发自己的工具，还可以运行：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pnpm run script:create:tool my-tool-name</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>部署到服务器</strong></li>
</ol>
<p>  将生成的 dist 文件夹中的静态文件上传到你的 Web 服务器（如 Nginx、Apache 等）。</p>
<ol start="3">
<li><strong>配置服务器</strong></li>
</ol>
<p>  在你的服务器配置文件中，将根目录指向 &#x2F;opt&#x2F;dist 文件夹。以 Nginx 为例：</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">你的域名;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">root</span> <span class="string">/opt/dist;</span></span><br><span class="line">        <span class="string">index</span> <span class="string">index.html;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  保存配置并重启服务器，即可通过域名访问。</p>
<h2 id="工具详细介绍"><a href="#工具详细介绍" class="headerlink" title="工具详细介绍"></a>工具详细介绍</h2><p><strong>it-tools</strong> 涵盖了多个实用的前端工具，主要包括以下类别：</p>
<ol>
<li><strong>Crypto 加密工具类</strong>：Token生成、Hash函数、UUID生成和文本加解密等功能。</li>
<li><strong>Converter 转换工具类</strong>：日期时间、数据格式（JSON、XML等）和颜色代码转换等工具。</li>
<li><strong>Web 工具类</strong>：URL编码&#x2F;解码、HTML实体转义、HTTP状态码查询等Web开发相关工具。</li>
<li><strong>Images and videos 图片视频工具类</strong>：二维码生成、SVG占位符生成等功能。</li>
<li><strong>Development 开发工具类</strong>：代码格式化、端口生成等工具，帮助开发者简化日常任务。</li>
<li><strong>Network 网络工具类</strong>：IPv4子网计算器、MAC地址生成器等网络相关工具。</li>
<li><strong>Math 数学工具类</strong>：数学表达式计算、百分比计算等常用数学工具。</li>
<li><strong>Measurement 测量工具类</strong>：温度转换等测量单位转换工具。</li>
<li><strong>Text 文本工具类</strong>：文本统计、字符串混淆器等文本处理工具。</li>
<li><strong>Data 数据工具类</strong>：JSON转CSV、数据格式验证等数据处理工具。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>it-tools</strong> 已经提供了广泛的工具集合，帮助开发者在加密、格式转换、网络、开发辅助等领域提高工作效率。通过进一步扩展和细化每个工具的功能，可以增强其适用性和灵活性，满足更多复杂开发场景下的需求。这些扩展内容有助于让 <strong>it-tools</strong> 成为前端开发中更强大且实用的工具箱。</p>
]]></content>
      <tags>
        <tag>开发工具</tag>
        <tag>Web开发</tag>
        <tag>前端工具</tag>
        <tag>Docker部署</tag>
        <tag>软件效率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建服务器上的GIT并实现自动同步到站点目录（www）</title>
    <url>/2017/10/17/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84GIT%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E5%88%B0%E7%AB%99%E7%82%B9%E7%9B%AE%E5%BD%95%EF%BC%88www%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>前言：当我们想要实现几个小伙伴合作开发同一个项目，或者建立一个资源分享平台的时候，GIT就是一个很好的选择。当然，既然是一个共有平台，那么把这个平台放到个人计算机上明显是不合适的，因此就要在服务器上搭建GIT了。另一个需求是，我们在本地开发，然后推送到服务器上，并且自动同步到web站点目录，这样就可以直接看到网页效果了，这就要实现自动同步。下面我带领大家实现这么一个功能。</p>
</blockquote>
</blockquote>
<p>如果条件允许的话，大家可以跟着做的（注：我的服务器是centos 7，lamp环境）。</p>
<p>一、在服务器上安装git:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//yum安装</span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure>

<p>在安装完之后你可以运行git进行测试，看看是否安装成功。</p>
<p>二、在服务器上创建裸版本库：</p>
<p>ps：远程仓库通常只是一个裸仓库（bare repository） — 即一个没有当前工作目录的仓库。因为该仓库只是一个合作媒介，所以不需要从硬盘上取出最新版本的快照；仓库里存放的仅仅是 Git 的数据。简单地说，裸仓库就是你工作目录中 .git 子目录内的内容</p>
<p>我们就在 &#x2F;home&#x2F;testgit&#x2F; 下创建一个叫 sample.git的裸仓库吧：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/testgit</span><br><span class="line">cd /home/testgit</span><br><span class="line">git init --bare sample.git</span><br><span class="line">//这里 git init 是初始化空仓库的意思，而参数 --bare 是代表创建裸仓库，这个参数一定记得带上</span><br></pre></td></tr></table></figure>

<p>当运行完上面的最后一句命令时，会有提示：Initialized empty Git repository in &#x2F;home&#x2F;testgit&#x2F;sample.git&#x2F;<br>如果你得不到该结果，可能就要回头检查哪一步出问题了</p>
<p>三、创建web站点目录www</p>
<p>现在我的 web 站点目录在 &#x2F;home&#x2F;www</p>
<p>四、在本地克隆服务器上的裸仓库：</p>
<p>前提：本地已安装git </p>
<p>打开 git bash ，我打算在我的D盘下创建一个名为 lsgogit 的版本库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d</span><br><span class="line">git clone git@115.159.146.94:/home/testgit/sample.git lsgogit</span><br></pre></td></tr></table></figure>

<p>在这里如果没有配置公钥的话，会提示输入密码，但是我们可能并不知道密码，那就配置公钥咯：<br>1、查看自己计算机的公钥：</p>
<p>&#x2F;&#x2F;查看是否有了ssh密钥，如果没有密钥则不会有此文件夹<br>cd ~&#x2F;.ssh<br>ls -al<br>&#x2F;&#x2F;如果列出了authorized_keys2 id_dsa known_hosts config id_dsa.pub 则证明你拥有公钥。</p>
<p>我们需要寻找一对以 id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。 .pub 文件是你的公钥，另一个则是私钥。 如果找不到这样的文件（或者根本没有 .ssh 目录），你可以通过运行 ssh-keygen 程序来创建它们。在 Linux&#x2F;Mac 系统中，ssh-keygen 随 SSH 软件包提供；在 Windows 上，该程序包含于 MSysGit 软件包中。</p>
<p>首先 ssh-keygen 会确认密钥的存储位置（默认是 .ssh&#x2F;id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。</p>
<p>现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员（假设服务器正在使用基于公钥的 SSH 验证设置）。 他们所要做的就是复制各自的 .pub 文件内容，并将其通过邮件发送。 公钥看起来是这样的：</p>
<p>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAcnTC3A++ginnxr2dvtQa881abjGIzk99KQVg&#x2F;sPpqvtT3espFKBs&#x2F;wqrJ9naIPtCswKDMg2tBVgJzg5FimDjI44O072qAftRcjU2EEySlGDDetREOvcDxqcXzf6cAdhnKlYcPk8s46oC+SxhK0zAFZCZNc7z9GcEPOC+ESIettycDw&#x2F;Bo11WfxAWS0hky2F3rYh5CRr8j7BKRsAvEaAyKwzmM9X0XCRniC2pD0ObX0&#x2F;SjPwq9Q5&#x2F;Vjg03muiSo5Bm&#x2F;xmuHkwb4&#x2F;uQglBwnaSqEr6YkL9xLMoNsQaJ1TAvTrEaZLNhWzN8iaPyKZMJEzPLX1NgeEx9AEae39N+NsJ LSGO@zhongjin</p>
<p>现在我们回到服务器管理员的身份</p>
<p>由于前面安装git的时候，centos会默认创建一个git用户（其他系统貌似需要手动创建），我们进入&#x2F;home&#x2F;git&#x2F;.ssh，里面有一个名为 authorized_keys 的文件，我们分别将其他开发者的公钥（全选、复制、不能更改！）添加到该文件去，一个开发者的公钥分一行。</p>
<p>现在我们看看有两个开发者(个人电脑分别是zhongjin 和 jinjinzhong)的authorized_keys文件：</p>
<p>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAcnTC3A++ginnxr2dvtQa881abjGIzk99KQVg&#x2F;sPpqvtT3espFKBs&#x2F;wqrJ9naIPtCswKDMg2tBVgJzg5FimDjI44O072qAftRcjU2EEySlGDDetREOvcDxqcXzf6cAdhnKlYcPk8s46oC+SxhK0zAFZCZNc7z9GcEPOC+ESIettycDw&#x2F;Bo11WfxAWS0hky2F3rYh5CRr8j7BKRsAvEaAyKwzmM9X0XCRniC2pD0ObX0&#x2F;SjPwq9Q5&#x2F;Vjg03muiSo5Bm&#x2F;xmuHkwb4&#x2F;uQglBwnaSqEr6YkL9xLMoNsQaJ1TAvTrEaZLNhWzN8iaPyKZMJEzPLX1NgeEx9AEae39N+NsJ LSGO@zhongjin<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAcnTC3A++ginnxr2dvtQa881abjGIzk99KQVg&#x2F;sPpqvtT3espFKBs&#x2F;wqrJ9naIPtCswKDMg2tBVgJzg5FimDjI44O072qAftRcjU2EEySlGDDetREOvcDxqcXzf6cAdhnKlYcPk8s46oC+SxhK0zAFZCZNc7z9GcEPOC+ESIettycDw&#x2F;Bo11WfxAWS0hky2F3rYh5CRr8j7BKRsAvEaAyKwzmM9X0XCRniC2pD0ObX0&#x2F;SjPwq9Q5&#x2F;Vjg03muiSo5Bm&#x2F;xmuHkwb4&#x2F;uQglBwnaSqEr6YkL9xLMoNsQaJ1TAvTrEaZLNhWzN8iaPyKZMJEzPLX1NgeEx9AEae39N+NsJ LSGO@jinjinzhong</p>
<p>至此，我们就可以实现不用输密码克隆远程仓库了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d</span><br><span class="line">git clone git@115.159.146.94:/home/testgit/sample.git lsgogit</span><br></pre></td></tr></table></figure>

<p>命令运行完后，lsgogit现在就是一个空的仓库了，现在我们可以在该仓库下添加文件，然后push到远程仓库了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd lsgogit</span><br><span class="line">touch index.php</span><br><span class="line">git add index.php</span><br><span class="line">git commit -m &quot;test commit&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>如果在这里推送失败了，极有可能是因为服务器的权限问题，就比如之前我们建的 testgit 文件夹，在这里我的解决方法是：</p>
<p>chown -R git:git testgit</p>
<p>将testgit文件夹以及下面的子文件夹都赋给了git,这样就保证了推送成功。</p>
<p>第一次push可能会有一些提示，因为裸版本库还什么都没有，你可能需要 git push origin master写全命令，之后就没必要了，直接 git push 就可以了。</p>
<p>到目前为止，我们完成了第一个任务，实现了一个共享平台，既可拉取数据，又可以推送数据。</p>
<p>四、实现自动同步到站点目录（www）</p>
<p>就比如刚才我们往远程仓库推送了index.php文件，虽然提示推送成功，但是我们现在在服务器端还看不到效果，心理总是不爽。又比如我写了个html页面，我想在站点中马上看到，那自动同步就派上用场了。</p>
<p>自动同步功能用到的是 git 的钩子功能，</p>
<p>服务器端：进入裸仓库：&#x2F;home&#x2F;testgit&#x2F;sample.git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/testgit/sample.git</span><br><span class="line">cd hooks</span><br><span class="line">//这里我们创建post-receive文件</span><br><span class="line">vim post-receive</span><br><span class="line">//在该文件里输入以下内容</span><br><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/home/www checkout -f</span><br><span class="line">//保存退出后，将该文件用户及用户组都设置成git</span><br><span class="line">chown git:git post-receive</span><br><span class="line">//由于该文件其实就是一个shell文件，我们还应该为其设置可执行权限</span><br><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>

<p>现在我们可以在本地计算机中修改index.php文件，或者添加一个新文件，提交到远程仓库，然后到&#x2F;home&#x2F;www下面，看看有没有我们刚才提交的文件。</p>
<p>如果你在Git推送的工程中发现推送成功 但是在www目录下并没有自己的代码，这时候你可要注意了：这是由于文件夹的权限的原因造成的！ 假设你的www目录的所属的用户组为root，你可以将你的git用户加入这个组;并给git添加写入权限，或者其他解决方法，反正你要服务器上的git用户有权限进入www文件夹。</p>
<p>之前的项目都是”包工头“文乔学长完成这个过程，现在终于掌握了，有点小高兴。。。</p>
<p>本文章参考了</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FpZGFuRGFpL2hlbGxvLXdvcmxkL2Jsb2IvbWFzdGVyLzQtJTIwJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUU0JUI4JThBJUU3JTlBJTg0JTIwR2l0Lm1k">AiDandai 服务器上的 Git.md<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL215Lm9zY2hpbmEubmV0L2N4ejAwMS9ibG9nLzE5NDE5Nj9mcm9tZXJyPXRreHI0UXlh">git推送到服务器自动同步到站点目录<i class="fa fa-external-link-alt"></i></span></li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>SSH</tag>
        <tag>服务器配置</tag>
        <tag>自动化部署</tag>
        <tag>权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>日志完美清理总结</title>
    <url>/2016/10/25/%E6%97%A5%E5%BF%97%E5%AE%8C%E7%BE%8E%E6%B8%85%E7%90%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、事件查看器"><a href="#一、事件查看器" class="headerlink" title="一、事件查看器"></a>一、事件查看器</h2><p>开始 → 程序 → 管理工具 → 计算机管理 → 系统工具 → 事件查看器 → 清除日志。</p>
<h2 id="二、日志文件"><a href="#二、日志文件" class="headerlink" title="二、日志文件"></a>二、日志文件</h2><p>Windows2000的日志文件通常有应用<code>程序日志</code>、<code>安全日志</code>、<code>系统日志</code>、<code>DNS服务器日志</code>、<code>FTP日志</code>、<code>WWW日志</code>等等。</p>
<p>日志文件默认位置：</p>
<p>应用程序日志、安全日志、系统日志、DNS日志默认位置：<code>%systemroot%\system32\config</code>，默认文件大小512KB，管理员都会改变这个默认大小。</p>
<p>安全日志文件：<code>%systemroot%\system32\config\SecEvent.EVT</code>；</p>
<p>系统日志文件：<code>%systemroot%\system32\config\SysEvent.EVT</code>；</p>
<p>应用程序日志文件：<code>%systemroot%\system32\config\AppEvent.EVT</code>；</p>
<p>Internet信息服务FTP日志默认位置：<code>%systemroot%\system32\log\filesmsftpsvc1</code>，默认每天一个日志；</p>
<p>Internet信息服务WWW日志默认位置：<code>%systemroot%\system32\log\filesw3svc1</code>，默认每天一个日志；</p>
<p>Scheduler服务日志默认位置：<code>%systemroot%\schedlgu.txt</code>；</p>
<p>以上日志在注册表里的键：</p>
<p>应用程序日志，安全日志，系统日志，DNS服务器日志，它们这些LOG文件在注册表中的：</p>
<p>HKEY_LOCAL_MACHINE\system\Current\Control\Set\Services\Eventlog</p>
<p>有的管理员很可能将这些日志重定位。其中EVENTLOG下面有很多的子表，里面可查到以上日志的定位目录。</p>
<p>Schedluler服务日志在注册表中</p>
<p>HKEY_LOCAL_MACHINESOFTWAREMicrosoftSchedulingAgent</p>
<p>FTP和WWW日志详解：</p>
<p>FTP日志和WWW日志默认情况，每天生成一个日志文件，包含了该日的一切记录，文件名通常为ex（年份）（月份）（日期），例如ex001023，就是2000年10月23日产生的日志，用记事本就可直接打开，如下例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Software: Microsoft Internet Information Services 5.0　　（微软IIS5.0）</span><br><span class="line">#Version: 1.0 （版本1.0）</span><br><span class="line">#Date: 20001023 0315 （服务启动时间日期）</span><br><span class="line">#Fields: time cip csmethod csuristem scstatus</span><br><span class="line">0315 127.0.0.1 [1]USER administator 331　（IP地址为127.0.0.1用户名为administator试图登录）</span><br><span class="line">0318 127.0.0.1 [1]PASS –530　（登录失败）</span><br><span class="line">032:04 127.0.0.1 [1]USER nt 331　（IP地址为127.0.0.1用户名为nt的用户试图登录）</span><br><span class="line">032:06 127.0.0.1 [1]PASS –530　（登录失败）</span><br><span class="line">032:09 127.0.0.1 [1]USER cyz 331　（IP地址为127.0.0.1用户名为cyz的用户试图登录）</span><br><span class="line">0322 127.0.0.1 [1]PASS –530　（登录失败）</span><br><span class="line">0322 127.0.0.1 [1]USER administrator 331　（IP地址为127.0.0.1用户名为administrator试图登录）</span><br><span class="line">0324 127.0.0.1 [1]PASS –230　（登录成功）</span><br><span class="line">0321 127.0.0.1 [1]MKD nt 550　（新建目录失败）</span><br><span class="line">0325 127.0.0.1 [1]QUIT –550　（退出FTP程序）</span><br></pre></td></tr></table></figure>
<p>从 日志里就能看出IP地址为127.0.0.1的用户一直试图登录系统，换了四次用户名和密码才成功，管理员立即就可以得知管理员的入侵时间、IP地址以及 探测的用户名，如上例入侵者最终是用administrator用户名进入的，那么就要考虑更换此用户名的密码，或者重命名administrator 用户。</p>
<p>WWW日志：</p>
<p>WWW服务同FTP服务一样，产生的日志也是在%sys temroot%sys tem32LogFilesW3SVC1目录下，默认是每天一个日志文件，下面是一个典型的WWW日志文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Software: Microsoft Internet Information Services 5.0</span><br><span class="line">#Version: 1.0</span><br><span class="line">#Date: 20001023 03:091</span><br><span class="line">#Fields: date time cip csusername sip sport csmethod csuristem csuriquery scstatus cs(UserAgent)</span><br><span class="line">20001023 03:091 192.168.1.26 192.168.1.37 80 GET /iisstart.asp 200 Mozilla/4.0 (compatible; MSIE 5.0; Windows 98; DigExt)</span><br><span class="line">20001023 03:094 192.168.1.26 192.168.1.37 80 GET /pagerror.gif 200 Mozilla/4.0 (compatible; MSIE 5.0; Windows 98; DigExt)</span><br></pre></td></tr></table></figure>

<p>通 过分析第六行，可以看出2000年10月23日，IP地址为192.168.1.26的用户通过访问IP地址为192.168.1.37机器的80端口， 查看了一个页面iisstart.asp,这位用户的浏览器为compatible; MSIE 5.0; Windows 98 DigExt，有经验的管理员就可通过安全日志、FTP日志和WWW日志来确定入侵者的IP地址以及入侵时间。</p>
<p>既使你删掉FTP和WWW日志，但是还是会在系统日志和安全日志里记录下来，但是较好的是只显示了你的机器名，并没有你的IP。</p>
<p>属性里记录了出现警告的原因，是因为有人试图用administator用户名登录，出现一个错误，来源是FTP服务。</p>
<p>这里有两种图标：钥匙（表示成功）和锁（表示当用户在做什么时被系统停止）。接连四个锁图标，表示四次失败审核，事件类型是帐户登录和登录、注销失败，日期为2000年10月18日，时间为1002，这就需要重点观察。</p>
<p>双点第一个失败审核事件的，即得到此事件的详细描述。</p>
<p>经过分析我们可以得知有个CYZ的工作站，用administator用户名登录本机，但是因为用户名未知或密码错误（实际为密码错误）未能成功。另外还有DNS服务器日志，不太重要，就此略过（其实是我没有看过它）。</p>
<p>知道了Windows2000日志的详细情况，下面就要学会怎样删除这些日志：</p>
<p>通 过上面，得知日志文件通常有某项服务在后台保护，除了系统日志、安全日志、应用程序日志等等，它们的服务是Windos2000的关键进程，而且与注册表 文件在一块，当Windows2000启动后，启动服务来保护这些文件，所以很难删除，而FTP日志和WWW日志以及Scedlgu日志都是可以轻易地删 除的。首先要取得Admnistrator密码或Administrators组成员之一， <span class="exturl" data-url="aHR0cDovL3d3dy4yY3RvLmNvbS8=">www.2cto.com<i class="fa fa-external-link-alt"></i></span> 然后Telnet到远程主机，先来试着删除FTP日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:SERVER&gt;del schedlgu.txt</span><br><span class="line">D:SERVERSchedLgU.Txt</span><br></pre></td></tr></table></figure>
<p>进程无法访问文件，因为另一个程序正在使用此文件。说过了，后台有服务保护，先把服务停掉！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:SERVER&gt;net stop &quot;task scheduler&quot;</span><br></pre></td></tr></table></figure>
<p>下面的服务依赖于Task Scheduler 服务。停止Task Scheduler 服务也会停止这些服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remote Storage Engine</span><br><span class="line">是否继续此操作? (Y/N) [N]: y</span><br><span class="line">Remote Storage Engine 服务正在停止….</span><br><span class="line">Remote Storage Engine 服务已成功停止。</span><br><span class="line">Task Scheduler 服务正在停止.</span><br><span class="line">Task Scheduler 服务已成功停止。</span><br></pre></td></tr></table></figure>
<p>OK，它的服务停掉了，同时也停掉了与它有依赖关系的服务。再来试着删一下！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\SERVER&gt;del schedlgu.txt</span><br><span class="line">D:\SERVER&gt;</span><br></pre></td></tr></table></figure>
<p>没有反应？成功了！下一个是FTP日志和WWW日志，原理都是一样，先停掉相关服务，然后再删日志！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\SERVER\system32\LogFiles\MSFTPSVC1&gt;del ex*.log</span><br><span class="line">D:\SERVER\system32\LogFiles\MSFTPSVC1&gt;</span><br></pre></td></tr></table></figure>
<p>以上操作成功删除FTP日志！再来WWW日志！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:SERVERsystem32LogFilesW3SVC1&gt;del ex*.log</span><br><span class="line">D:SERVERsystem32LogFilesW3SVC1&gt;</span><br></pre></td></tr></table></figure>
<p>OK！恭喜，现在简单的日志都已成功删除。下面就是很难的安全日志和系统日志了，守护这些日志的服务是Event Log，试着停掉它！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:SERVERsystem32LogFilesW3SVC1&gt;net stop eventlog</span><br></pre></td></tr></table></figure>
<p>这 项服务无法接受请求的 “暂停” 或 “停止” 操作。没办法，它是关键服务。如果不用第三方工具，在命令行上根本没有删除安全日志和系统日志的可能！所以还是得用虽然简单但是速度慢得死机的办法：打开 “控制面板”的“管理工具”中的“事件查看器”（98没有，知道用Win2k的好处了吧），在菜单的“操作”项有一个名为“连接到另一台计算机”的菜单， 点击它，输入远程计算机的IP，然后等上数十分钟，接着选择远程计算机的安全性日志，右键选择它的属性：点击属性里的“清除日志”按钮，OK！安全日志清 除完毕！同样的忍受痛苦去清除系统日志！ 目前在不借助第三工具的情况下，能很快，很顺利地清除FTP、WWW还有Schedlgu日志，就是系统日志和安全日志属于Windows2000的严密守护，只能用本地的事件查看器来打开它，因为在图形界面下，加 之网速又慢，如果你银子多，时间闲，还是可以清除它的。综上所述，介绍了Windows2000的日志文件以及删除方法，但是你必须是Administrator，注意必须作为管理员或管理组的成员登录才能打开安全日志记录。该过程适用于Windows 2000 Professional 计算机，也适用于作为独立服务器或成员服务器运行的Windows 2000 Server 计算机。</p>
<p>至 此，Windows2000安全知识基础讲座完毕，还有几句话要讲，大家也看出来了，虽然FTP等等日志可以很快清除，但是系统日志和安全日志却不是那么 快、那么顺利地能删除，如果遇到聪明的管理员，将日志文件转移到另一个地方，那更是难上加难，所以奉劝大家，千万不要拿国内的主机做试验，国内的法律很严 呀！今天吃饭时，听说有两个人开玩笑，一个人把另外一个人的东西藏起来了，结果那个人一急，报案了，于是藏东西那个人被判四年刑！！法官说法律是不开玩笑 的！！！所以大家一定要牢记这点！</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>Windows系统</tag>
        <tag>权限管理</tag>
        <tag>日志管理</tag>
        <tag>网络伦理</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2018/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则表达式(Regular Expression)是一种文本模式，包含普通字符（列如，a 到 z 之间的字母）和特殊字符（元字符）。</p>
<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
<h2 id="正则表达式-语法"><a href="#正则表达式-语法" class="headerlink" title="正则表达式 - 语法"></a>正则表达式 - 语法</h2><h3 id="普通字符串"><a href="#普通字符串" class="headerlink" title="普通字符串"></a>普通字符串</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>[ABC]</td>
<td>匹配 <code>[...]</code> 中的所有字符。例如用 <code>/[lny]/g</code> 来匹配字符串 “l1n6yun”,可以匹配到 <code>l,n,y,n</code> 。</td>
</tr>
<tr>
<td>[!ABC]</td>
<td>匹配除了 <code>[!...]</code> 中的所有字符。例如 <code>/[^lny]/g</code> 来匹配字符串 “l1n6yun”,可以匹配到 <code>1,6,u</code> 。</td>
</tr>
<tr>
<td>[A-Z] [a-z]</td>
<td><code>[A-Z]</code> 表示一个区间，匹配所有大写字母。<code>[a-z]</code> 表示匹配所有小写字母。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 ( <code>\r</code>、<code>\n</code>) 之外的任何单字符，相当于 <code>[^\r\n]</code></td>
</tr>
<tr>
<td>[\s\S]</td>
<td>匹配所有。<code>\s</code> 是匹配所有空白符，包含换行，<code>\S</code> 非空白符，不包含换行</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线。等价于 <code>[A-Za-z0-9_]</code></td>
</tr>
</tbody></table>
<h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\cx</td>
<td>匹配由x指明的控制字符。例如， <code>\cM</code> 匹配一个 Control-M 或回车符。<code>x</code> 的值必须为 <code>A-Z</code> 或 <code>a-z</code> 之一。否则，将 <code>c</code> 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 <code>\x0c</code> 和 <code>\cL</code>。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 <code>\x0a</code> 和 <code>\cJ</code>。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 <code>\x0d</code> 和 <code>\cM</code>。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[\f\n\r\t\v]</code>。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 <code>[^ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 <code>\x09</code> 和 <code>\cI</code>。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 <code>\x0b</code> 和 <code>\cK</code>。</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td>\nml</td>
<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody></table>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td>
</tr>
</tbody></table>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。***** 等价于 <strong>{0,}</strong>。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。<strong>+</strong> 等价于 <strong>{1,}</strong>。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。<strong>?</strong> 等价于 <strong>{0,1}</strong>。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中 n &lt;&#x3D; m。</td>
</tr>
</tbody></table>
<p><code>*</code>  和 <code>+</code> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 <code>?</code> 就可以实现非贪婪或最小的匹配。</p>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。他们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，即字与空格间的位置。例如”Hello World”，结果”\dHello\d \dWorld\d”</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非单词边界匹配。例如”Hello World”，结果”H\Be\Bl\Bl\Bo W\Bo\Br\Bl\Bd”</td>
</tr>
</tbody></table>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>用圆括号 <code>()</code> 将所有选择项括起来，相邻的选择项之间用 <code>|</code> 分割。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/([1-9])([a-z]+)/g</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>exp1(?&#x3D;exp2)</td>
<td>查找 exp2 前面的 exp1</td>
</tr>
<tr>
<td>(?&lt;&#x3D;exp2)exp1</td>
<td>查找 exp2 后面的 exp1</td>
</tr>
<tr>
<td>exp1(?!exp2)</td>
<td>查找后面不是 exp2 的 exp1</td>
</tr>
<tr>
<td>(?&lt;!exp2)exp1</td>
<td>查找前面不是 exp2 的 exp1</td>
</tr>
</tbody></table>
<h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <strong>\n</strong> 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p>
<p>可以使用非捕获元字符 <strong>?:</strong>、<strong>?&#x3D;</strong> 或 <strong>?!</strong> 来重写捕获，忽略对相关匹配的保存。</p>
<p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Is is the cost of of gasoline going up up?</span><br></pre></td></tr></table></figure>

<p>上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Is is the cost of of gasoline going up up&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\b([a-z]+) \1\b/igm</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure>

<p>捕获的表达式，正如 <strong>[a-z]+</strong> 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。<strong>\1</strong> 指定第一个子匹配项。</p>
<p>单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p>
<p>正则表达式后面的全局标记 <strong>g</strong> 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。</p>
<p>表达式的结尾处的不区分大小写 <strong>i</strong> 标记指定不区分大小写。</p>
<p>多行标记 <strong>m</strong> 指定换行符的两边可能出现潜在的匹配。</p>
<h2 id="正则表达式-修饰符"><a href="#正则表达式-修饰符" class="headerlink" title="正则表达式 - 修饰符"></a>正则表达式 - 修饰符</h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/pattern/flags</span><br></pre></td></tr></table></figure>

<p>下表列出了正则表达式常用的修饰符</p>
<table>
<thead>
<tr>
<th align="left">修饰符</th>
<th align="left">含义</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">i</td>
<td align="left">ignore - 不区分大小写</td>
<td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td>
</tr>
<tr>
<td align="left">g</td>
<td align="left">global - 全局匹配</td>
<td align="left">查找所有的匹配项。</td>
</tr>
<tr>
<td align="left">m</td>
<td align="left">multi line - 多行匹配</td>
<td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td>
<td align="left">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>软件开发</tag>
        <tag>正则表达式</tag>
        <tag>文本处理</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动的方法有哪些</title>
    <url>/2019/08/04/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B/</url>
    <content><![CDATA[<p>在我们写代码的时候，有时因为使用了float浮动元素而导致页面中某些元素不能正确的显示，接下来在文章中将为大家详细介绍几种清除浮动的方法，具有一定的参考价值，希望对大家有所帮助。</p>
<h2 id="浮动导致的后果"><a href="#浮动导致的后果" class="headerlink" title="浮动导致的后果"></a>浮动导致的后果</h2><ol>
<li>由于浮动元素脱离了文档流，所以父元素的高度无法被撑开，影响了与父元素同级的元素</li>
<li>与浮动元素同级的非浮动元素会跟随其后，因为浮动元素脱离文档流不占据原来的位置</li>
<li>如果该浮动元素不是第一个浮动元素，则该元素之前的元素也需要浮动，否则容易影响页面的结构显示</li>
</ol>
<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><ol>
<li>使用 <code>clear:both</code> 清除浮动</li>
</ol>
<p>在代码中在放一个空的div标签，然后给这个标签设置 <code>clear:both</code> 来清除浮动对页面的影响。它的优点是简单，方便兼容性好，但是一般情况下不建议使用该方法，因为会造成结构混乱，不利于后期维护</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用伪元素 <code>clearfix</code> 来清除浮动</li>
</ol>
<p>给父级元素添加了一个 <code>:after</code> 伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>overflow</code> 方法的使用</li>
</ol>
<p>当给父元素设置了 <code>overflow</code> 样式，不管是 <code>overflow:hidden</code> 或 <code>overflow:auto</code> 都可以清除浮动只要它的值不为 <code>visible</code> 就可以了，它的本质就是建构了一个BFC，这样使得达到撑起父元素高度的效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>双伪元素方法的使用</li>
</ol>
<p>通过给父元素设置双伪元素来达到清除浮动的效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：以上就是本篇文章的全部内容了，希望通过这篇文章能够让大家对清除浮动的方法有所了解</p>
]]></content>
      <tags>
        <tag>清除浮动</tag>
        <tag>CSS布局</tag>
        <tag>伪元素</tag>
        <tag>前端开发技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>用 PHP 进行 HTTP 认证的几种认证方式</title>
    <url>/2020/10/14/%E7%94%A8-PHP-%E8%BF%9B%E8%A1%8C-HTTP-%E8%AE%A4%E8%AF%81%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F-1/</url>
    <content><![CDATA[<p>Example #1 Basic HTTP 认证范例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;WWW-Authenticate: Basic realm=&quot;My Realm&quot;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Text to send if user hits Cancel button&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Hello <span class="subst">&#123;$_SERVER[&#x27;PHP_AUTH_USER&#x27;]&#125;</span>.&lt;/p&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;You entered <span class="subst">&#123;$_SERVER[&#x27;PHP_AUTH_PW&#x27;]&#125;</span> as your password.&lt;/p&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Example #2 Digest HTTP 认证范例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$realm</span> = <span class="string">&#x27;Restricted area&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user =&gt; password</span></span><br><span class="line"><span class="variable">$users</span> = <span class="keyword">array</span>(<span class="string">&#x27;admin&#x27;</span> =&gt; <span class="string">&#x27;mypass&#x27;</span>, <span class="string">&#x27;guest&#x27;</span> =&gt; <span class="string">&#x27;guest&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_DIGEST&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 401 Unauthorized&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;WWW-Authenticate: Digest realm=&quot;&#x27;</span>.<span class="variable">$realm</span>.</span><br><span class="line">           <span class="string">&#x27;&quot;,qop=&quot;auth&quot;,nonce=&quot;&#x27;</span>.<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;&quot;,opaque=&quot;&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$realm</span>).<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Text to send if user hits Cancel button&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// analyze the PHP_AUTH_DIGEST variable</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$data</span> = <span class="title function_ invoke__">http_digest_parse</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_DIGEST&#x27;</span>])) ||</span><br><span class="line">    !<span class="keyword">isset</span>(<span class="variable">$users</span>[<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>]]))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Wrong Credentials!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate the valid response</span></span><br><span class="line"><span class="variable">$A1</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$realm</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$users</span>[<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>]]);</span><br><span class="line"><span class="variable">$A2</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="string">&#x27;:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;uri&#x27;</span>]);</span><br><span class="line"><span class="variable">$valid_response</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$A1</span>.<span class="string">&#x27;:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;nonce&#x27;</span>].<span class="string">&#x27;:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;nc&#x27;</span>].<span class="string">&#x27;:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;cnonce&#x27;</span>].<span class="string">&#x27;:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;qop&#x27;</span>].<span class="string">&#x27;:&#x27;</span>.<span class="variable">$A2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;response&#x27;</span>] != <span class="variable">$valid_response</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Wrong Credentials!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok, valid username &amp; password</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You are logged in as: &#x27;</span> . <span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// function to parse the http auth header</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http_digest_parse</span>(<span class="params"><span class="variable">$txt</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// protect against missing data</span></span><br><span class="line">    <span class="variable">$needed_parts</span> = <span class="keyword">array</span>(<span class="string">&#x27;nonce&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;nc&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;cnonce&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;qop&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;uri&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;response&#x27;</span>=&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$keys</span> = <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$needed_parts</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;@(&#x27;</span> . <span class="variable">$keys</span> . <span class="string">&#x27;)=(?:([\&#x27;&quot;])([^\2]+?)\2|([^\s,]+))@&#x27;</span>, <span class="variable">$txt</span>, <span class="variable">$matches</span>, PREG_SET_ORDER);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$matches</span> <span class="keyword">as</span> <span class="variable">$m</span>) &#123;</span><br><span class="line">        <span class="variable">$data</span>[<span class="variable">$m</span>[<span class="number">1</span>]] = <span class="variable">$m</span>[<span class="number">3</span>] ? <span class="variable">$m</span>[<span class="number">3</span>] : <span class="variable">$m</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$needed_parts</span>[<span class="variable">$m</span>[<span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$needed_parts</span> ? <span class="literal">false</span> : <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>Example #3 强迫重新输入用户名和密码的 HTTP 认证的范例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;WWW-Authenticate: Basic realm=&quot;Test Authentication System&quot;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You must enter a valid login ID and password to access this resource\n&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>]) ||</span><br><span class="line">      (<span class="variable">$_POST</span>[<span class="string">&#x27;SeenBefore&#x27;</span>] == <span class="number">1</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;OldAuth&#x27;</span>] == <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>])) &#123;</span><br><span class="line">   <span class="title function_ invoke__">authenticate</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome: <span class="subst">&#123;$_SERVER[&#x27;PHP_AUTH_USER&#x27;]&#125;</span>&lt;br /&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Old: <span class="subst">&#123;$_REQUEST[&#x27;OldAuth&#x27;]&#125;</span>&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;<span class="subst">&#123;$_SERVER[&#x27;PHP_SELF&#x27;]&#125;</span>&#x27; METHOD=&#x27;post&#x27;&gt;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;SeenBefore&#x27; value=&#x27;1&#x27; /&gt;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;OldAuth&#x27; value=&#x27;<span class="subst">&#123;$_SERVER[&#x27;PHP_AUTH_USER&#x27;]&#125;</span>&#x27; /&gt;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Re Authenticate&#x27; /&gt;\n&quot;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PHP</tag>
        <tag>Web开发</tag>
        <tag>HTTP认证</tag>
        <tag>Basic认证</tag>
        <tag>Digest认证</tag>
      </tags>
  </entry>
  <entry>
    <title>火狐浏览器书签设置：单击书签在新标签页打开的实用教程</title>
    <url>/2023/10/14/%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%A6%E7%AD%BE%E8%AE%BE%E7%BD%AE%EF%BC%9A%E5%8D%95%E5%87%BB%E4%B9%A6%E7%AD%BE%E5%9C%A8%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%89%93%E5%BC%80%E7%9A%84%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>在日常使用浏览器的过程中，书签功能是许多用户不可或缺的工具之一。它可以帮助我们快速访问常用的网站，节省时间并提高上网效率。然而，有些用户可能希望单击书签时能够直接在新标签页中打开，而不是在当前标签页中替换内容。今天，我们就来分享一下如何在火狐浏览器中设置书签单击后在新标签页打开的方法。</p>
<h2 id="一、火狐浏览器的书签功能简介"><a href="#一、火狐浏览器的书签功能简介" class="headerlink" title="一、火狐浏览器的书签功能简介"></a>一、火狐浏览器的书签功能简介</h2><p>火狐浏览器（Mozilla Firefox）是一款广受欢迎的开源浏览器，以其强大的功能、灵活的自定义选项和出色的隐私保护而受到用户的喜爱。书签功能是火狐浏览器的一个重要特性，用户可以通过它将喜欢的网站添加到收藏夹中，方便随时访问。默认情况下，单击书签会在当前标签页中打开链接，但有时我们可能需要在新标签页中打开书签，以便同时查看多个网页。</p>
<h2 id="二、设置书签单击后在新标签页打开的步骤"><a href="#二、设置书签单击后在新标签页打开的步骤" class="headerlink" title="二、设置书签单击后在新标签页打开的步骤"></a>二、设置书签单击后在新标签页打开的步骤</h2><h3 id="1-打开火狐浏览器的高级首选项窗口"><a href="#1-打开火狐浏览器的高级首选项窗口" class="headerlink" title="1. 打开火狐浏览器的高级首选项窗口"></a>1. 打开火狐浏览器的高级首选项窗口</h3><p>首先，启动火狐浏览器，在浏览器顶部的地址栏中输入 about:config，然后按下回车键。这个地址会带你进入火狐浏览器的高级配置页面，这里包含了大量可以自定义的选项。</p>
<p><img src="/images/pasted-74.png" alt="upload successful"></p>
<h3 id="2-接受风险并继续"><a href="#2-接受风险并继续" class="headerlink" title="2. 接受风险并继续"></a>2. 接受风险并继续</h3><p>当页面切换后，你会看到一个提示文字，警告你更改配置可能会导致浏览器不稳定或出现其他问题。不用担心，这只是浏览器的常规提示。点击“接受风险并继续”按钮，进入高级首选项窗口。</p>
<h3 id="3-搜索并修改相关设置"><a href="#3-搜索并修改相关设置" class="headerlink" title="3. 搜索并修改相关设置"></a>3. 搜索并修改相关设置</h3><p>在高级首选项窗口的搜索框中输入 browser.tabs.loadBookmarksinTabs，然后按下回车键。搜索结果中会出现一个名为 browser.tabs.loadBookmarksinTabs 的选项，它的默认值通常是 false。</p>
<p><img src="/images/pasted-75.png" alt="upload successful"></p>
<h3 id="4-修改选项值"><a href="#4-修改选项值" class="headerlink" title="4. 修改选项值"></a>4. 修改选项值</h3><p>找到这个选项后，点击其右侧的双向箭头，将其值切换为 true。这样，当你再次单击书签时，链接就会在新标签页中打开。</p>
]]></content>
      <tags>
        <tag>火狐浏览器</tag>
        <tag>关于：配置</tag>
        <tag>新标签页</tag>
        <tag>书签优化</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念碑谷2：现象级神作背后有着怎样的故事？</title>
    <url>/2017/06/12/%E7%BA%AA%E5%BF%B5%E7%A2%91%E8%B0%B72%EF%BC%9A%E7%8E%B0%E8%B1%A1%E7%BA%A7%E7%A5%9E%E4%BD%9C%E8%83%8C%E5%90%8E%E6%9C%89%E7%9D%80%E6%80%8E%E6%A0%B7%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%9F/</url>
    <content><![CDATA[<p>纪念碑谷 2 上线 App Store 过去一天了，有不少朋友也已经迫不及待地下载并通关了。当然，其中也包括了 AppSo。</p>
<p>前天，AppSo（微信号 AppSo）简单地介绍了纪念碑谷 2，那么今天我们就为大家带来背后团队的采访和详细的评测吧。</p>
<h3 id="它仍是我们喜欢的纪念碑谷"><a href="#它仍是我们喜欢的纪念碑谷" class="headerlink" title="它仍是我们喜欢的纪念碑谷"></a>它仍是我们喜欢的纪念碑谷</h3><p>纪念碑谷原来的设计师 Ken Wong 已经离开了团队，回到了澳洲，所以这次的设计团队也是一个完全不一样的团队，有不少人担心它的游戏内核会不会发生变化。</p>
<p>纪念碑谷 2 延续了纪念碑谷 1 的玩法，你需要利用视错觉让主角走出迷宫。设计依旧以艺术家埃舍尔的创作为基础，利用了「潘洛斯三角」、「凹凸错觉」「二维三维的扭转变换」……画风延续之余，但剧情发生了较大的变化。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/monument-valley-2.jpg"></p>
<p>相信大家都记得第一代的纪念碑谷有着相对阴郁的剧情，它的主题是「宽恕」。而纪念碑谷 2 的基调就变得轻快起来——它探讨的是一个「亲子关系」的故事。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/jinianbeigu.gif"></p>
<p>继前作的「艾达公主」之后，此次带领我们踏上旅程的是「罗尔」和她的孩子。在旅途中，你将帮助主角罗尔教导她的小孩。</p>
<p>极富想象力的场景，和无论色调、元素单一或复杂都至臻完美的画面，带来视听享受的同时，令我们倍感熟悉。</p>
<p>不同的是，这趟旅途少了孤单，多了陪伴。目的也不再是寻觅，而是互相扶持着携手并进。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/Monument-Valley-24.jpg"></p>
<p>孩子奔跑、跌倒，无力遥望坠落的母亲时，我们不免揪心。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/jinianbeigu-02.gif"></p>
<p>当两人终于跨过险阻冲向终点时，我们深深感动。</p>
<p>剧情已经足够丰富，「纪念碑谷 2」却未就此停下。</p>
<p>关卡不断推进，冷静质朴的文字揭示了更为残忍的事实——孩子终将长大成人，伴随他们度过人生旅程的父母也将回归孤独，再度独自踏上旅程。</p>
<blockquote>
<p>顺逆相随，让她羽翼自丰。<br>面对生命进程，我们不乏勇气，而是放手的决心。<br>你，终将继续完成属于自己的旅程。</p>
</blockquote>
<p>这种安排无疑会令玩家怅然若失，却也成就了纪念碑谷 2 的超高人气。</p>
<h3 id="然而，为什么会选择这样的故事？"><a href="#然而，为什么会选择这样的故事？" class="headerlink" title="然而，为什么会选择这样的故事？"></a>然而，为什么会选择这样的故事？</h3><p>见纪念碑谷团队的时候，是在一个布置温馨的小房间，游戏总监 Dan Gray 脸上带着轻松的笑容——纪念碑谷 2 如期成功上线，在 WWDC 上进行了一次短暂的亮相。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/cover.jpg"></p>
<p>在采访前，我已经到达了第五章，而游戏总监 Dan Gray 看到则说：</p>
<blockquote>
<p>Aha, you go far.</p>
</blockquote>
<p>纪念碑谷 2 一共有 14 个关卡，耗费 15 个月完成，比起纪念碑谷少了 4 个关卡。而不少通关的朋友也表示，相对于纪念碑谷，纪念碑谷 2 的难度有所降低，但依旧精美。</p>
<blockquote>
<p>纪念碑谷艾达的故事已经完结了，它是一个完整的故事。</p>
</blockquote>
<p>纪念碑谷游戏制作人 Adrienne Law 告诉 AppSo（微信号 AppSo），团队不想为了续作而去专门设计情节去承接实际上已经完整的故事，而且有大约 1&#x2F;3 的新人加入团队，对故事充满了激情，有很多新想法，需要一个全新剧本去承载。</p>
<p>而 Dan Gray 也补充，希望通过开启一个新故事，让没有玩过纪念碑谷 1 的朋友，直接上手纪念碑谷 2 的时候，不会觉得错过了剧情。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/Monument-Valley-23.jpg"></p>
<p>但其实纪念碑谷 1 和 2 之间有很微妙的连通，只是藏得比较深，需要玩家仔细留意。</p>
<p>至于为什么选择了「亲子关系」这个主题，他们是这样看的：</p>
<blockquote>
<p>很少有游戏触及母子关系的主题，纪念碑谷的玩家也会长大，我们自己也为人子女，在长大的过程中对母亲的想法会有所改变，所以会尝试探索这个话题。随着孩子不断成长，母亲和孩子的关系会不断地变化。</p>
</blockquote>
<p>而我们在评测时也发现，这样的「探索」也反映在「双人关卡」的设计上。在部分关卡里，女儿会以母亲为「榜样」——我们控制罗尔移动，女儿也会进行相应的走位。需要两个人互相配合才能通关。</p>
<blockquote>
<p>纪念碑谷的成功能复制吗？</p>
</blockquote>
<p>像纪念碑谷这样现象级的独立游戏屈指可数，而能真正做到「叫好又叫座」的更是凤毛麟角。纪念碑谷的盈利模式很简单，就是单纯地买游戏，和国内靠卖装备卖金币真正赚钱的「氪金手游」不同。</p>
<p>这种单纯卖游戏的商业模式，同样适用于别的独立应用&#x2F;游戏吗？</p>
<p>Dan Gray 给出了这样的回答：</p>
<blockquote>
<p>看目标是什么。有很多小公司其实能一直以这样的方式做下去。如果保持公司现有的规模，则能维持经营。不过，一旦公司做大了，就不得不选择其他商业模式保持运营。</p>
</blockquote>
<p>当然，纪念碑谷团队也会希望更多中国玩家接触这款游戏，同时让纪念碑谷这个 IP 有更多可能性的发展，他们选择了腾讯作为代理。</p>
<p>腾讯游戏是国内最大的移动游戏平台，而且有庞大的社区和用户群体。因此无论是用户量还是游戏 IP 的包装，我们可以期待纪念碑谷能有更多新的可能：</p>
<blockquote>
<p>我们是个付费游戏，让更多的人知道我们，需要腾讯这样的公司来代理，扩大影响力。</p>
</blockquote>
<p>无论选择什么代理公司，也不会影响它作为独立游戏的本质。初次开启时你可选择微信或 QQ 登录，这能让你分享图片到朋友圈等平台。当然你也可以选择游客模式，这不会对后续的关卡造成任何影响。</p>
<p>除此之外，纪念碑谷也会出自己的周边产品，让大家更立体地体验游戏世界。</p>
<p><img src="http://ifanr-cdn.b0.upaiyun.com/wp-content/uploads/2017/06/01-1.jpg"></p>
<p>目前，纪念碑谷 2 已上线各区 App Store，售价 30 元，而 Android 平台暂时未有上线计划。</p>
<p>因为大部分独立开发者都是开发付费游戏，而 iTunes 上付费 app 的推广效果最好。为了保持营收，所以大部分独立游戏都会先上 iOS 版本，或者干脆只有 iOS 版本。</p>
<p>不同人的选择不同，而 iOS 用户更倾向为高质量的游戏付费。除此之外，苹果也会提供更好的支持（纪念碑谷 2 已经横扫 App Store 推广位了），所以也是纪念碑谷团队选择 iOS 平台原因。</p>
<p>AppSo 当然知道，有很多愿意为优质 app 付费的 Android 用户，也有很多不愿意花钱的 iOS 用户，但平台给创作者的回馈不同，创作者自然会予以相应的选择。</p>
<p>这也是为什么 AppSo 一直倡导正版的原因：</p>
<blockquote>
<p>你花的每一分钱，都在为你想要的世界买单。</p>
</blockquote>
]]></content>
      <tags>
        <tag>游戏设计</tag>
        <tag>独立游戏</tag>
        <tag>商业模式</tag>
      </tags>
  </entry>
  <entry>
    <title>用js判断是否是微信浏览器</title>
    <url>/2017/04/24/%E7%94%A8js%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否是微信浏览器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isWeiXin</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//window.navigator.userAgent属性包含了浏览器类型、版本、操作系统类型、浏览器引擎类型等信息，这个属性可以用来判断浏览器类型</span></span><br><span class="line">    <span class="keyword">var</span> ua = <span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="comment">//通过正则表达式匹配ua中是否含有MicroMessenger字符串</span></span><br><span class="line">    <span class="keyword">if</span>(ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>客户端</tag>
        <tag>浏览器检测</tag>
      </tags>
  </entry>
  <entry>
    <title>编写模块化CSS：BEM</title>
    <url>/2019/08/29/%E7%BC%96%E5%86%99%E6%A8%A1%E5%9D%97%E5%8C%96CSS%EF%BC%9ABEM/</url>
    <content><![CDATA[<blockquote>
<p>你是否做过多页面的大型网站或者其中一部分？如果你做过，你可能会意识到 CSS 架构不够强大所带来的恐惧。你可能还会研究如何编写可维护的 CSS。</p>
</blockquote>
<p>由于我们的行业很棒，我们有很多推荐的解决方案。因为专家们的纷纷加入，于是我们有 BEM，OOCSS，SMACSS，Atomic Design 等许多选择。</p>
<p>现在，问题不是痛苦 <strong>“我不知道该怎么办”</strong>，而是： <strong>“有这么多的方法，我应该尝试哪个？”我是不是应该把所有的都用一遍，是不是只有一种方法才适合我，或者我是不是应该参考它们做一个自己的架构？</strong>。</p>
<p>我开始只用一种方法。然后，当我尝试不同的方法时，我开始把我认为有意义的东西包含在我的探索过程中。 在这篇文章中，我想和大家分享一下我如何构建 CSS 以及为什么我这样做。 希望它可以帮助你找到你喜欢的方法。</p>
<h2 id="当我在寻找一个出色的-CSS-架构时我究竟在找什么"><a href="#当我在寻找一个出色的-CSS-架构时我究竟在找什么" class="headerlink" title="当我在寻找一个出色的 CSS 架构时我究竟在找什么"></a>当我在寻找一个出色的 CSS 架构时我究竟在找什么</h2><p>当我将不同的方法拼凑在一起以形成我自己的习惯时，我会寻找以下四个特点：</p>
<ul>
<li>我必须 <strong>立即知道编辑一个 class 是否安全</strong>，会不会干扰其他 CSS。这是最重要的，特别是当我需要在短时间内进行修改时。我不想因为改变一处而破坏别的东西。</li>
<li>我必须<strong>立即知道一个 class 放在这个伟大工程中的什么地方</strong>，以防止大脑过载。这样我就可以快速修改 <code>style</code>，而不必在整个工程里前后引用。</li>
<li><code>class</code> 必须 <strong>尽可能少</strong>，因为看到一长串的 <code>class</code> 时我头很晕。</li>
<li>我必须 <strong>立即知道一个组件是否使用了 JavaScript</strong>，所以如果我改变了它的 CSS，我不会意外地破坏任何组件。</li>
</ul>
<p>在我的探索中，我发现 <strong>BEM</strong> 和 <strong>命名空间</strong> 符合我寻找的标准。</p>
<h2 id="从-BEM-开始"><a href="#从-BEM-开始" class="headerlink" title="从 BEM 开始"></a>从 BEM 开始</h2><p>BEM 是我的方法的基础。如果你以前从未听说过 BEM，它代表 <code>block</code> ， <code>element</code> 和 <code>modifier</code>。当你第一次接触它时，它看起来是那么的难看。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123; <span class="comment">/* styles */</span> &#125; </span><br><span class="line"><span class="selector-class">.block__element</span> &#123; <span class="comment">/* styles */</span> &#125; </span><br><span class="line"><span class="selector-class">.block--modifier</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>当我第一次看见 BEM 的时候，我就很讨厌它，甚至没有给它一个机会。我不记得是什么驱使我尝试 BEM 的，但我现在深深的知道它有多么的强大。让我来完整地解释一下 BEM 是什么（当然，加入了我自己的理解）。</p>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><p>一个块就是一个组件。这有点抽象，所以让我们用示例来学习。</p>
<p>假设您正在建立一个联系表单。在这种情况下，这个表单可以是一个块。在 BEM 中，块被写为像 <code>class</code> 的名字一样，如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>BEM 使用 <code>.form</code> 而不是 <code>&lt;form&gt;</code> 元素的原因是因为 <strong>类允许无限的可重用性</strong>，而即使是最基本的元素也可能改变样式。</p>
<p>按钮很好地阐释了可以包含不同样式的块。如果将 <code>&lt;button&gt;</code> 元素的背景颜色设置为红色，则所有 <code>&lt;buttons&gt;</code> 都将被强制继承红色背景。接下来，你必须通过覆盖你的 <code>&lt;button&gt;</code> 元素来修复代码（并且可能会在修复中“伤及无辜” 🤕）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123; </span><br><span class="line">    <span class="attribute">background-color</span>: red; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.something</span> <span class="selector-tag">button</span> &#123; </span><br><span class="line">    <span class="attribute">background-color</span>: blue; <span class="comment">/* 😱 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果设置了一个 <code>.button</code> 类的按钮，则可以在任何 <code>&lt;button&gt;</code> 元素上选择是否使用 <code>.button</code> 类。那么，如果你需要一个不同的背景颜色，你所做的就是改成一个新的 <code>class</code>，比如说 <code>.button--secondary</code>，很舒服吧！</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123; </span><br><span class="line">    <span class="attribute">background-color</span>: red; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button--secondary</span> &#123; </span><br><span class="line">    <span class="attribute">background-color</span>: blue; <span class="comment">/* 😄 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这给我们引入了 BEM 的下一部分 —— 修饰符。</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符是改变某个块的外观的标志。要使用修饰符，可以将 <code>--modifier</code> 添加到块中。</p>
<p>从上面的按钮示例继续，修改的按钮将被命名为 <code>.button--secondary</code>。</p>
<p>在传统的 BEM 中，当你使用修饰符时，你应该 <strong>将块和修饰符添加</strong> 到 HTML 中，以便在新的 <code>.button--secondary</code> 中不重写 <code>.button</code> 样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Primary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button--secondary&quot;</span>&gt;</span>Secondary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.button &#123; </span><br><span class="line">    padding: 0.5em 0.75em; </span><br><span class="line">    background-color: red; </span><br><span class="line">&#125; </span><br><span class="line">.button--secondary &#123; </span><br><span class="line">    background-color: green; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意为什么没有必要在 <code>.button--secondary</code> 中重新声明 <code>padding</code>，因为它已经在 <code>.button</code> 中声明了。这很棒，因为 BEM 确保你编写简洁的 CSS，而不需要付出大量的工作。</p>
<p>但是，我并不喜欢在HTML中再加一个 <code>.button</code>，因为 <code>.button--modifier</code> 已经告诉我，它是一个带有 <code>--secondary</code> 标志的 <code>.button</code> 。理想情况下，我的 HTML 应该是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Primary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button--secondary&quot;</span>&gt;</span>Secondary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这更简洁，不是吗？</p>
<p>不幸的是，如果 HTML 中没有 <code>.button</code>，我们必须回到非简洁的 CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>; </span><br><span class="line">    <span class="attribute">background-color</span>: red; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.button--secondary</span> &#123; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>;  <span class="comment">/* 😱 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: green; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>呃，这么繁琐的东西好恶心 😢。 但是有两种方法可以编写简洁的 CSS，而不需要额外的 <code>class</code>！</p>
<h3 id="方法-1：使用-mixin"><a href="#方法-1：使用-mixin" class="headerlink" title="方法 1：使用 mixin"></a>方法 1：使用 mixin</h3><p>第一种方式，如果使用 Sass 或任何其他预处理器，则 <strong>使用mixin来封装</strong> 需要重用的 <strong>所有代码</strong>。在我们的按钮示例中，我们只需要将 <code>padding</code> 写入 mixin。 在这里，我在块中调用这个 mixin：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> button &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.button</span> &#123; </span><br><span class="line">    <span class="keyword">@include</span> button;</span><br><span class="line">    <span class="attribute">background-color</span>: red; <span class="comment">// 😄</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.button--secondary</span> &#123; </span><br><span class="line">    <span class="keyword">@include</span> button;</span><br><span class="line">    <span class="attribute">background-color</span>: green; <span class="comment">// 😄</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>万岁！现在世界静好!🎉🎉🎉</p>
<p><strong>但是…如果我不使用 Sass 怎么办？</strong></p>
<p>放轻松！😄即将分享的第二种方法是使用普通的 CSS，所以你也可以使用它！</p>
<h3 id="方法-2：使用-CSS-属性选择器"><a href="#方法-2：使用-CSS-属性选择器" class="headerlink" title="方法 2：使用 CSS 属性选择器"></a>方法 2：使用 CSS 属性选择器</h3><p>第二种方法 <strong>使用CSS属性选择</strong> 器执行稍微更复杂的选择。我会告诉你它是什么，然后解释为什么这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 😄 */</span><br><span class="line">[class*=&#x27;button&#x27;]:not([class*=&#x27;button__&#x27;]) &#123; </span><br><span class="line">    padding: 0.5em 0.75em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，这不是你通常看到的选择器，所以我来解释一下。</p>
<p>第一部分（ <code>[class*=&#39;button&#39;]</code> ）告诉解析器查找包含文本 <code>button</code> 的所有 <code>class</code>。（ <code>*=</code> 搜索与确切字符串匹配的任何内容）。当然，这意味着 CSS 的目标是 <code>.button</code> 和 <code>.button--modifier</code>。不幸的是，这也意味着选择器也是针对 BEM 元素，这就是为什么引入第二部分的原因。</p>
<p>第二部分（ <code>:not([class*=&#39;button__&#39;])</code> ）告诉解析器将包含<code>.button__</code>任何东西排除在外，于是排除了 BEM 元素。 （BEM 元素具有 <code>.block__element</code> 语法）。</p>
<p>在这一点上，你仍然可能不喜欢 BEM 丑陋的 <code>--modifier</code> 语法。我知道为什么，但我爱上这个语法是因为<strong>我很讨厌命名</strong>。有时，我发现需要使用很多单词来命名一个 BEM 块或元素。举个例子 <code>inner-section</code> 。</p>
<p>因此如果我使用 <code>-modifier</code> （如某些方法建议的），我将无法一眼看出 <code>-section</code> 是否是修饰符。所以这是一个馊主意。同样，我也不能立即知道<code>.button-secondary</code>是否也是修饰符！</p>
<p>很具有讽刺意味，但是这个丑陋的语法让我的代码更简洁，更易于维护。所以强烈推荐你尝试它:)</p>
<p>我们来看看 BEM 的第三个重要部分 —— 元素。</p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>元素是块的子节点。为了表明某个东西是一个元素，你需要在块名后添加 <code>__element</code>。所以，如果你看到一个像那样的名字，比如 <code>form__row</code> ，你将立即知道 <code>.form</code> 块中有一个 <code>row</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span> </span><br><span class="line">        <span class="comment"><!-- ... --></span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.form__row &#123; </span><br><span class="line">    /* styles */ </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BEM 元素有两个优点</strong> ：</p>
<ul>
<li>你可以让 CSS 的优先级保持相对扁平。</li>
<li>你能立即知道哪些东西是一个子元素。</li>
</ul>
<p>为了解释以上两点，考虑使用两个单独的 <code>class</code> 的替代方法（许多框架这么做的）。你可能会用这样的东西：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span> </span><br><span class="line">        <span class="comment"><!-- ... --></span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form</span> <span class="selector-class">.row</span> &#123; </span><br><span class="line">    <span class="comment">/* styles */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你使用 BEM 元素，则可以使用优先级为 <code>10</code> 而不是 <code>20</code> 的的选择器来为 <code>.form__row</code> 提供样式。此外，你可以立即分辨出（不论是在 HTML 还是 CSS 中）<code>.form__row</code> 是 <code>.form</code>的子节点。</p>
<p>（顺便说一句，如果你还没有克服 <code>__element</code> 语法的丑陋，等到你使用第三方插件看到像蛇一样的 <code>class</code> 名的时候， 你就懂了😛）</p>
<p>继续，有一件事你需要了解。<strong>永远不应该链式命名 BEM 元素</strong>。 如果你的 <code>class</code> 最终像这样 <code>.form__row__input</code>，你做的事情是非常错误的。（我开始时这样做过，所以你也不要对自己感到太糟糕！🤗）。</p>
<p>有两种方法可以绕过长长的 BEM 链式命名。 他们是：</p>
<ol>
<li>只把子子元素链接到有意义的块</li>
<li>创建新的块来保存元素</li>
</ol>
<h3 id="链接孙元素到块"><a href="#链接孙元素到块" class="headerlink" title="链接孙元素到块"></a>链接孙元素到块</h3><p>虽然 BEM 建议你将 BEM 元素写作 <code>.block__element</code> ，但它不会规定你的 HTML 应如何。所以，只要有意义的话，你可以把你的孙元素连在一起。</p>
<p>接下来是一个例子。在下面的代码中，你将看到 <code>.article__header</code> 是 <code>.article</code> 的子元素。<code>.article__title</code> 是 <code>article</code> 的孙元素（或者说是 <code>.article__header</code> 的子元素，如果你将它们同时表示为 <code>.article</code> 的子元素，就没有冲突，因为这个表单同时只有他们存在。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;article__header&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;article__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然这样有效，你也会遇到无意义的链接孙元素的情况。举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;comments__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;comments__comment&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;comments__comment-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;comments__comment&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;comments__comment-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span> </span><br><span class="line">    <span class="comment"><!-- ... --></span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>呃？</p>
<p>此时你需要创建新块来保存孙元素。</p>
<h3 id="创建新的块来保存孙元素"><a href="#创建新的块来保存孙元素" class="headerlink" title="创建新的块来保存孙元素"></a>创建新的块来保存孙元素</h3><p>在上述情况下，你可以轻松地将 <code>.comments__comment</code> 拆为 <code>.comments</code> 和 <code>.comment</code> ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;comments__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;comment-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;comment-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span> </span><br><span class="line">    <span class="comment"><!-- ... --></span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这更有意义，不是吗？如果你这样做，请确保将 <code>.comments</code> 和 <code>.comment</code>块放在同一个文件中，以方便参考。</p>
<p>不幸的是，有时候它不像 <code>.comments__comment</code> 那么简单。例如，假设在块中有一个列表元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;block__list&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;block__item&quot;</span>&gt;</span> </span><br><span class="line">            <span class="comment"><!-- how would you name this class? --></span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;???????&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="comment"><!-- ... --></span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你注意到，我已经链接了<code>.block__item</code> ，这是一个 <code>.block</code> 的孙元素。 将 <code>.block__item</code> 中的元素链接到 <code>.block</code> 没有意义，或可能最终会遇到一些糟糕的局面。</p>
<p>然而，同时由于它们被一起使用，所以为 <code>.block__list</code> 或 <code>.block__item</code> 创建一个新的块是没有意义的 。你会命名什么来保持在上下文中有意义？</p>
<p>在这种情况下，我一般会为 <code>block__item</code> 创建一个名为 <code>.item</code> 的伪块。看下面的HTML。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;block__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;block__list&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;block__item&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;item__title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="comment"><!-- ... --></span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>伪块，正如名字所示，是伪的。上面的 HTML 中没有 <code>.item</code> 的实际声明。但是，在<code>.block__item</code>中有连接到 <code>.item</code> 的元素中。</p>
<p>在我的 CSS（Sass）中，我在 <code>.block__item</code> 中嵌套 <code>.item</code> 元素，赋予了它所需的上下文。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.block__item &#123;</span><br><span class="line">    .item__title &#123;</span><br><span class="line">        /* styles... */ </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能会说，**“但这是违反 BEM 惯例的！”**是的，但请阅读<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2Nzcy1hcmNoaXRlY3R1cmUtMi5odG1s">下一篇文章<i class="fa fa-external-link-alt"></i></span> 。你会知道为什么我这样做😉。</p>
<p>接下来，还有一件事，在我的用例中添加为 BEM 添加的 —— 容器。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>有时（实际上经常），我会遇到这样的情况，我必须在确定其它元素都对齐的同时扩散一个区域的背景色，就像这样：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/css-architecture-1.png" alt="Image of a block that contains a background that bleeds out of it"></p>
<p>浅灰色的背景扩散到了对齐的区域的外面</p>
<p>如果你熟悉构建布局，会使用以下方式构建 HTML ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;l-wrap&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span> </span><br><span class="line">            <span class="comment"><!-- ... --></span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>问题是，你应该怎么命名块容器？ 或者在这种情况下，怎么命名 <code>&lt;section&gt;</code> 元素。我习惯的方法是命名为 <code>block-container</code> 。我只在这种情况下使用<code>-container</code>，所以我觉得它仍然可以接受。你有更好的主意吗？</p>
<p>（顺便说一下，看见<code>.l-wrap</code> 中的 <code>.l-</code>了没，这是命名空间，我将<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2Nzcy1hcmNoaXRlY3R1cmUtMi5odG1s">在下一篇文章中<i class="fa fa-external-link-alt"></i></span>分享更多的内容。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以，这就是我简单地使用 BEM 的方法。如果你注意到我上面设置的标准，你会注意到我只考虑了两个方面：</p>
<ul>
<li><code>class</code> 的数量必须<em>尽可能少</em> 。</li>
<li>我必须<strong>立即知道一个 class 放在这个伟大工程中的什么地方</strong>，以防止大脑过载。</li>
</ul>
<p>其他两个方面尚未考虑：</p>
<ul>
<li>我必须 <strong>立即知道组件是否使用 JavaScript</strong> 。</li>
<li>我必须 <strong>立即知道编辑一个 class 是否安全</strong>,会不会干扰其他 CSS。</li>
</ul>
<p>我将<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2Nzcy1hcmNoaXRlY3R1cmUtMi5odG1s">在下一篇文章中<i class="fa fa-external-link-alt"></i></span>讨论<strong>命名空间</strong> 时考虑这两个方面 。</p>
<p>你怎么看？你有没有学到新的东西？我分享了我的学习过程有用吗？我很想在下面的评论中看到你的想法。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>Web开发</tag>
        <tag>BEM</tag>
        <tag>界面设计</tag>
      </tags>
  </entry>
  <entry>
    <title>编写模块化的CSS:命名空间</title>
    <url>/2019/08/29/%E7%BC%96%E5%86%99%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84CSS-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<blockquote>
<p>上周，我分享了如何使用BEM创建一个合理的CSS架构。 虽然BEM很棒，但它只是解决方案的一部分。 还有另一部分我还没有提到 —— <strong>命名空间</strong>。</p>
</blockquote>
<p>在今天的这篇文章中，我想与大家分享一下为什么只用BEM还是不够的，以及如何使用命名空间来弥补一些不足。</p>
<h2 id="为什么BEM不能满足我们"><a href="#为什么BEM不能满足我们" class="headerlink" title="为什么BEM不能满足我们"></a>为什么BEM不能满足我们</h2><p>我<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2Nzcy1hcmNoaXRlY3R1cmUtMS5odG1s">上周<i class="fa fa-external-link-alt"></i></span>给大家展示的例子很简单。 我只向大家展示了如何处理单个块中不同的修饰符和子代（或孙子代）元素。 但是如果有多个区块咱怎么办呐？</p>
<p>事情有点复杂。 我们使用一个网站范围的导航来说明两个块之间的关系。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;main-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>好啦。 现在有两个区块。 一个叫<code>.main-nav</code>，另一个叫<code>.button</code>。 <code>.button</code>存在于<code>.main-nav</code>内。</p>
<p>然后现在你想把这个<code>button</code>的颜色从<code>blue</code>变成<code>green</code>。同时你也想给<code>.button</code>加些左边距来和<code>home</code>链接分开。</p>
<p>那么问题来了，你应该怎样书写CSS代码呢？这下面有几种可能的答案：</p>
<ul>
<li>给<code>.main-nav .button</code>添加<code>margin</code>和<code>background-color</code></li>
<li>给<code>button--modifier</code>添加<code>margin</code>和<code>background-color</code></li>
<li>给<code>.main-nav .button</code>添加<code>margin</code>，给<code>button--modifier</code>添加<code>background-color</code></li>
<li>给<code>.main-nav a</code>添加<code>margin</code>，给<code>.main-nav .button</code>添加<code>background-color</code></li>
<li>给<code>.main-nav a</code>添加<code>margin</code>，给<code>button--modifier</code>添加<code>background-color</code></li>
</ul>
<p>哪一种方式最能引起你的情感共鸣呢？ 你又如何能确保您的项目中的每个开发人员都以同样的方式来接受呢？</p>
<p>即使您的所有开发人员都拷贝了这个方案（因此也是以同样的方式），您如何知道您是否没有引入副作用（破坏了网站的另一部分）？</p>
<p>老实说，很难保证！如果我们只有BEM，有太多可能的因素导致。</p>
<p>这就是之所以引入命名空间。它可以帮助你创建一个结构来控制CSS属性的写入。 如果您遵循惯例，您将能够无惧副作用地编写CSS。</p>
<p>这里是一个示例。</p>
<p>假设我把上面的代码转换成一个带有命名空间的代码。HTML将完全相同（只加了少数的class前缀）。 在这个例子中要特别注意<code>.o</code>和<code>.c</code>前缀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;c-main-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;o-button&quot;</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>.o-</code>和<code>.c-</code>是什么意思呢？从这个代码来看，我知道如果我想，我可以改变<code>.o-button</code>的颜色，但我不应该添加任何边距到<code>.o-button</code>。</p>
<p>啥！？ 那么我必须来解释这些命名空间，gogogo~ :)</p>
<h2 id="我使用的命名空间"><a href="#我使用的命名空间" class="headerlink" title="我使用的命名空间"></a>我使用的命名空间</h2><p>以下是我使用的命名空间列表：</p>
<ul>
<li><code>.l-</code>: 布局(layouts)</li>
<li><code>.o-</code>: 对象(objects)</li>
<li><code>.c-</code>: 组件(components)</li>
<li><code>.js</code>: js的钩子(JavaScript hooks)</li>
<li><code>.is-</code>|<code>.has-</code>: 状态类(state classes)</li>
<li><code>.t1</code>|<code>.s1</code>: 排版大小(typography sizes)</li>
<li><code>.u-</code>: 实用类(utility classes)</li>
</ul>
<p>我们来看看具体每个命名空间是什么，以及咱应该怎么用。</p>
<p>在继续之前，如果您对命名空间不了解，我强烈建议您查看Harry Robert的<span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20vMjAxNS8wMy9tb3JlLXRyYW5zcGFyZW50LXVpLWNvZGUtd2l0aC1uYW1lc3BhY2VzLw==">具有命名空间的更透明的ui代码<i class="fa fa-external-link-alt"></i></span>。（有趣的事实：Harry启发我使用命名空间）。</p>
<p>如果你阅读Harry的文章，要注意一下我的命名空间不同于他的。（待会儿我会分享有哪些不同的内容）。</p>
<p>以上，让我们先进入第一个命名空间 —— 布局（layouts）</p>
<h2 id="“-l-”-——-布局-layouts"><a href="#“-l-”-——-布局-layouts" class="headerlink" title="“.l-” —— 布局(layouts)"></a>“.l-” —— 布局(layouts)</h2><p>我很确定你听说过<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9zdHViYm9ybmVsbGE=">@Nicole Sullivan<i class="fa fa-external-link-alt"></i></span>的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0dWJib3JuZWxsYS9vb2Nzcy93aWtp">Object Oriented CSS(面向对象的CSS)<i class="fa fa-external-link-alt"></i></span>(OOCSS)。 如果您还没有深入了解，那得知道OOCSS背后的主要思想是表层和结构的分离。 换句话说，影响块或其元素的位置的<strong>属性应该被抽象为一个单独的类用于重复利用</strong>。</p>
<p>在CSS中，定位块的行为也称为布局块。 在一般意义上，定位是<strong>布局</strong>。</p>
<p>也许这只是一个快乐的巧合（也许），但<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9zbm9va2Nh">@Jonathan Snook<i class="fa fa-external-link-alt"></i></span>在<span class="exturl" data-url="aHR0cHM6Ly9zbWFjc3MuY29tLw==">SMACSS<i class="fa fa-external-link-alt"></i></span>中为布局规则建议一个<code>.l-</code>前缀。这两个范例在布局方面有着相同的原则。 因此，我很高兴地从SMACSS中窃取<code>.l-</code>作为布局命名空间。</p>
<p>既然你已经了解了命名空间的起源了，它可能会帮助你了解它的使用方式。 当涉及到布局时，我将布局分为两个不同的类别 —— <strong>全局布局</strong>和<strong>块级布局</strong>。</p>
<h3 id="全局布局"><a href="#全局布局" class="headerlink" title="全局布局"></a>全局布局</h3><p>全局布局是应用于所有页面的布局。在我的用例中，它们通常是在任何地方都使用的大型网格容器。 一个例子是<code>.l-wrap</code> 类：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-tag">I</span> like <span class="selector-tag">to</span> write in Sass :)</span><br><span class="line">.l-wrap &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: auto;</span><br><span class="line">        <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我将在每个地方都使用<code>.l-wrap</code>类，比如在<code>header</code>和<code>footer</code>里来对齐内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;l-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment"><!-- stuff --></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;l-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment"><!-- stuff --></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于这些<code>class</code>在全局使用，所以我更喜欢把它们写在<code>_layouts.scss</code>部分。</p>
<h3 id="块级布局"><a href="#块级布局" class="headerlink" title="块级布局"></a>块级布局</h3><p>每个块（对象或组件，我们将在后面讨论）可能有自己的布局。 通过个人经验，我发现这些布局通常独立于全局布局。</p>
<p>让我来举个栗子。</p>
<p>当我为<span class="exturl" data-url="aHR0cHM6Ly9tYXN0ZXJpbmctcmVzcG9uc2l2ZS10eXBvZ3JhcGh5LmNvbS8=">Mastering Responsive Typography<i class="fa fa-external-link-alt"></i></span>建站后，我添加了一个如下所示的付款表单：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/css-architecture-2.png" alt="Payment form on Mastering Responsive Typography"></p>
<p>响应式排版的付款表单</p>
<p>在上面的设计中，您可以看到该表单包含两行输入元素。 第一行中有两个相等大小的输入框，第二行中有两个不同大小的输入框。</p>
<p>为了区分这三个不同大小的输入框，我选择了布局前缀：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form l-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item--large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item--small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... --></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你注意到了我是怎样同时保持BEM的实现还有布局的？ 这种实现对我来说使我更加清楚了。 你瞄一眼就可以看到我的CSS将写些啥。 清晰明了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.l-form</span> &#123;</span><br><span class="line">    <span class="comment">/* container styles */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-form__item</span> &#123;</span><br><span class="line">    <span class="comment">/* half-width styles */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-form__item--large</span> &#123;</span><br><span class="line">    <span class="comment">/* larger-width styles */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-form__item--small</span> &#123;</span><br><span class="line">    <span class="comment">/* smaller-width styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为<code>.l-form</code>，<code>.l-form__item</code>，<code>.l-form__item - small</code>和<code>.l-form__item - large</code>与其他块无关，我在<code>_form.scss</code>中写这些<code>class</code>来保持上下文。</p>
<p>顺便说一句，有些人不同意我在<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2Nzcy1hcmNoaXRlY3R1cmUtMS5odG1s">前一篇文章<i class="fa fa-external-link-alt"></i></span>里讲到当出现<code>.block - modifier</code>时删除<code>.block</code>这一观点。 那么，看看在这种情况下插入所有“必需”BEM class的情况下会发生什么，你会注意到“HTML开始膨胀”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form l-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment"><!-- 这段HTML开始变得太太太太长了 --></span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item l-form__item--large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item l-form__item--small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... --></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后一点：Harry使用对象命名空间（<code>.o-</code>）来表示这样的结构布局。 我只是将它们分组成<code>.l-</code>，并使用<code>.o-</code>来代替别的东西。</p>
<p>以上，让我们转移到对象（objects）上(我的版本)。</p>
<h2 id="“-o-”——对象-Objects"><a href="#“-o-”——对象-Objects" class="headerlink" title="“.o-”——对象(Objects)"></a>“.o-”——对象(Objects)</h2><p><strong>Objects</strong>(<code>.o-</code>)<strong>是Website</strong>的最小构建块。可以把它们想成是可以在网站各个地方拼凑的【乐高】块（译者注：‘乐高’玩具，没玩过的可以淘宝搜看看）。 如果您曾听过<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9icmFkX2Zyb3N0">@Brad Frost<i class="fa fa-external-link-alt"></i></span>的<span class="exturl" data-url="aHR0cHM6Ly9hdG9taWNkZXNpZ24uYnJhZGZyb3N0LmNvbS8=">Atomic Design<i class="fa fa-external-link-alt"></i></span>，也可以将对象视为元素和分子的混合物。</p>
<p>对象物们都有着以下的属性：</p>
<ul>
<li>对象使用<code>.o-</code>前缀</li>
<li>它们的里面不能包含其他对象或组件</li>
<li>它们之于上下文是独立的</li>
<li>某些对象可以在有意义的情况下忽略<code>.o-</code>前缀。</li>
</ul>
<h3 id="对象不能包含其他对象或组件"><a href="#对象不能包含其他对象或组件" class="headerlink" title="对象不能包含其他对象或组件"></a>对象不能包含其他对象或组件</h3><p>对象可大可小。对象中的HTML元素的数量是不相关的。 解释以下。</p>
<p>举个例子,<code>buttons</code>就是对象。它们是很小的而且可以放到任何地方。这是不言而喻的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;o-button&quot;</span>&gt;</span>A button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个较大的对象的例子是我为Mastering Responsive Typography构建的倒计时器：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/css-architecture-3.png" alt="Example of a large object"></p>
<p>一个大对象的例子。仍然被认为是一个对象，因为它不包含对象和组件。</p>
<p>倒计时器的HTML结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown jsCountdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;days&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>day<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;hours&quot;</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hours<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;minutes&quot;</span>&gt;</span>41<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>minutes<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>seconds<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意<code>.o-countdown</code>包含三层HTML元素。虽然它很大了，但它仍然是一个对象，因为它不包含任何其他对象或组件。<code>.o-countdown</code>中的元素的实际数量是无关紧要的，因为所有内部元素只能在<code>.o-countdown</code>里存在。</p>
<h3 id="对象独立于上下文"><a href="#对象独立于上下文" class="headerlink" title="对象独立于上下文"></a>对象独立于上下文</h3><p>当我说对象是上下文独立的时候，我的意思是他们不知道在哪里会被使用。 你可以选择任何的对象，并把它放在你喜欢的地方，而且并不会破坏你的网站的结构。</p>
<p>这也意味着对象不应该更改外部任何结构。 因此，对象块不能包含任何这些属性&#x2F;值：</p>
<ul>
<li><code>absolute</code> 和 <code>fixed</code> 定位。</li>
<li><code>margin</code></li>
<li><code>padding</code> (除非你用了<code>background-color</code>。 在这种情况下，它不会中断对象外部的对齐)。</li>
<li><code>float</code>.</li>
<li>等等…</li>
</ul>
<p>既然你知道对象需要与上下文无关，你马上知道我们站点范围的导航示例中的<code>.button</code>不能包含任何边距。</p>
<p>以下是我的样式表中典型的<code>.o-button</code>对象的示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果您不明白这个棘手的选择器，请返回上一篇文章理解 */</span></span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&#x27;o-button&#x27;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[class*=<span class="string">&#x27;o-button__&#x27;</span>]</span>) &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.75em</span> <span class="number">1.25em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.15s</span> ease-in-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然对象不能影响外部结构，但它改变其内部结构是很合理的。 例如，我提到的<code>.o-countdown</code>计时器可以具有以下HTML和CSS：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown l-countdown jsCountdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner l-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;days&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>days<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner l-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;hours&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hours<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner l-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;minutes&quot;</span>&gt;</span>57<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>minutes<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown__inner l-countdown__inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-token</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>33<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>seconds<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.l-countdown</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.l-countdown__inner</span> &#123;</span><br><span class="line">    <span class="comment">/* 大概你想咋整就咋整? */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以自由地设计一个对象，底线是只要它不影响任何外面的东西。（另外，请确保您不要意外添加’padding’使其看起来不规整）。</p>
<h3 id="合理情况下，某些对象可以忽略-o-前缀"><a href="#合理情况下，某些对象可以忽略-o-前缀" class="headerlink" title="合理情况下，某些对象可以忽略 .o- 前缀"></a>合理情况下，某些对象可以忽略 .o- 前缀</h3><p>哇，我们是否已经违反了规定？ 哎是呀！。</p>
<p>一些对象包含<code>.o-</code>前缀（甚至是一个类）本身就没有意义，因为它们被使用得太多了。 举一个这样的例子——输入元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，如果你喜欢的话，你可以将一个<code>class</code>标记给<code>input</code>，但是如果你不能访问</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> input &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">0.75em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit;</span><br><span class="line">    <span class="selector-tag">line</span>-<span class="attribute">height</span>: inherit;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;email&quot;</span>]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;textarea&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>我觉得另一个对象不应该使用<code>.o-</code>前缀的例子是字体。 他们得到特别待遇（我稍后会解释）。 在这一点上，你可以自由地反对。</p>
<h3 id="对象使用总结"><a href="#对象使用总结" class="headerlink" title="对象使用总结"></a>对象使用总结</h3><p>对象（<code>.o-</code>）是一个网站的最小的构建块。</p>
<p>对象物们都有着以下的属性：</p>
<ul>
<li>对象使用<code>.o-</code>前缀</li>
<li>它们的里面不能包含其他对象或组件</li>
<li>它们之于上下文是独立的</li>
<li>某些对象可以在有意义的情况下忽略<code>.o-</code>前缀。</li>
</ul>
<p>接下来我们转移到组件上</p>
<h2 id="“-c-”——组件-Components"><a href="#“-c-”——组件-Components" class="headerlink" title="“.c-”——组件(Components)"></a>“.c-”——组件(Components)</h2><p>如果对象是最小的构建块，则组件是您可以在整个站点中使用的更大的构建块。 如果您已阅读《原子设计》，请将组件视为有机体。 （除了这种生物体可以含有其他生物体 )。</p>
<p>组件有着以下属性：</p>
<ul>
<li>组件使用’.c-‘前缀</li>
<li>组件可以包含其他对象和组件。</li>
<li>组件是<strong>上下文感知</strong>的</li>
</ul>
<p>让我们来看看这些属性，我会补充你所需要的例子。</p>
<h3 id="组件可以包含其他对象和组件"><a href="#组件可以包含其他对象和组件" class="headerlink" title="组件可以包含其他对象和组件"></a>组件可以包含其他对象和组件</h3><p>让我们回到我所说的关于布局的形式。 下是组件的完美示例。</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/css-architecture-4.png" alt="Payment form on Mastering Responsive Typography"></p>
<p>响应式排版的付款表单之前我提到过这段HTML:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form l-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item--large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form__item l-form__item--small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... --></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我实际上省略了很多代码，使其在布局部分中看起来合理。 如果我们深入挖掘，你会看到有<code>input</code>和<code>.o-button</code>对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;c-form l-form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__item l-form__item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment"><!-- ... the email input item --></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... other form_rows --></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;o-button c-form__button&quot;</span>&gt;</span>Buy Mastering Responsive Typography!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看看<code>.c-form</code>现在是否包含其他对象？ :)</p>
<h3 id="组件是上下文感知的（一般而言）"><a href="#组件是上下文感知的（一般而言）" class="headerlink" title="组件是上下文感知的（一般而言）"></a>组件是上下文感知的（一般而言）</h3><p>组件是相当大的，所以您需要特别注意将它们放置在不同的地方。 例如，这个<code>.c-form</code>组件可以放在<strong>整个宽度栏中</strong>或<strong>侧边栏</strong>中。</p>
<p>以下是放在侧栏上下文中的表单：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1708/css-architecture-5.png" alt="Form component in a sidebar context"></p>
<p>表单组件放在侧边栏上</p>
<p>马上就可以看到三件事情改变了：</p>
<ul>
<li>标签被隐藏</li>
<li><code>input</code>和<code>o-button</code>对象的布局变为百分百宽度</li>
<li>文本的<code>Font-size</code>和<code>line-height</code>在按钮对象上变小。</li>
</ul>
<p>此更改表单的HTML可能是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;c-form--sidebar l-form--sidebar&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__item l-form__item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... the email input row --></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-form__row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;o-button c-form__button&quot;</span>&gt;</span>Buy Mastering Responsive Typography!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且各自的（S）CSS更改是：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.l-from--sidebar</span> &#123;</span><br><span class="line">    <span class="selector-class">.l-form__item</span> &#123; </span><br><span class="line">        <span class="comment">/* change to full width style */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c-form--sidebar</span> &#123;</span><br><span class="line">    <span class="selector-tag">label</span> &#123;</span><br><span class="line">        <span class="comment">// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility</span></span><br><span class="line">        <span class="keyword">@include</span> is-invisible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.c__button</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="selector-tag">line</span>-<span class="attribute">height</span>: <span class="number">1.25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一件事。 注意到了我混合了一个对象和组件类在<code>.c-form__button</code>里么？ 这被称为<span class="exturl" data-url="aHR0cHM6Ly9lbi5iZW0uaW5mby9tZXRob2RvbG9neS9rZXktY29uY2VwdHMvI21peA==">BEM混合<i class="fa fa-external-link-alt"></i></span>，它允许我使用组件的类来创建一个对象，而不影响原始按钮。</p>
<h3 id="组件的总结"><a href="#组件的总结" class="headerlink" title="组件的总结"></a>组件的总结</h3><p>组件（<code>.c-</code>）是您可以在整个站点中使用的<strong>更大的构建块</strong>。</p>
<p>组件有着以下属性：</p>
<ul>
<li>组件使用’.c-‘前缀</li>
<li>组件可以包含其他对象和组件。</li>
<li>组件是<strong>上下文感知</strong>的</li>
</ul>
<p>接下来我们来说下一个命名空间。</p>
<h2 id="“-js”——JavaScript的钩子"><a href="#“-js”——JavaScript的钩子" class="headerlink" title="“.js”——JavaScript的钩子"></a>“.js”——JavaScript的钩子</h2><p><strong>Javascript 钩子</strong>（<code>.js</code>）<strong>表示对象&#x2F;组件是否需要JavaScript</strong>。 举个栗子，我之前提到的倒计时器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;o-countdown jsCountdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment"><!-- ... --></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用JavaScript命名空间的好处是可以将JS功能与样式分开，这使得它们更易于维护。</p>
<p>例如，您刚刚看到<code>.jsCountdown</code>类就可以立即知道，<code>.o-countdown</code>需要JavaScript才能正常工作。 如果将来有需要将<code>o-countdown</code>更改为<code>c-countdown</code>，我也不必担心破坏任何JS功能。</p>
<p>JavaScript钩子很简单，所以让我们继续吧。</p>
<h2 id="“-is-has-”-——状态类"><a href="#“-is-has-”-——状态类" class="headerlink" title="“.is-&#x2F;.has-” ——状态类"></a>“.is-&#x2F;.has-” ——状态类</h2><p><strong>状态类表示对象&#x2F;组件的当前状态</strong>。当应用状态类时，您可以立即知道对象&#x2F;组件是否具有下拉（<code>.has-dropdown</code>）或当前处于打开状态（<code>.is-open</code>）。 这些可爱的课程来自SMACSS（如果你想知道的话）。</p>
<p>当您在CSS中设计状态类时，建议您尽可能保持样式接近所讨论的对象&#x2F;组件。 例如：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sass</span></span><br><span class="line"><span class="selector-class">.object</span> &#123;</span><br><span class="line">    &amp;<span class="selector-class">.is-animating</span> &#123; <span class="comment">/* styles */</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您不用Sass,你可以用这种方式来书写CSS：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.object</span><span class="selector-class">.is-animating</span> &#123; </span><br><span class="line">    <span class="comment">/* styles */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于@Jonathan早已介绍了这点，所以你可能会了解状态类。 所以我不再多说:)</p>
<p>让我们继续。</p>
<h2 id="“-t”或“-s”——排版类-Typography"><a href="#“-t”或“-s”——排版类-Typography" class="headerlink" title="“.t”或“.s”——排版类(Typography)"></a>“.t”或“.s”——排版类(Typography)</h2><p>在排版中最好的做法是在网页上只使用少数样式（大小，字体等）。 现在，你可能会在标题<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>中写出这样的排版风格：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br><span class="line"><span class="selector-tag">h4</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br><span class="line"><span class="selector-tag">h5</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br><span class="line"><span class="selector-tag">h6</span> &#123; <span class="comment">/* styles */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>如果您的网站很简单，那么这是一个很好的开始，并且不需要为多个对象&#x2F;组件使用相同的标题样式。</p>
<p>但是举个栗子哈，如果你有一个带链接的导航样式和你的h5样式一致怎么办？</p>
<p>你会这样做吗？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- 哎呀，千万别这么做！--></span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;c-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显然咱不能这么干。那么更好的方式就是改变我们的CSS样式。所以或许这么改？</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.25</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然改动CSS的版本稍微好一点，但是在排版风格方面，解决问题方式定不会只有一种。你能找出30种不同的组合也只是一个时间的问题。</p>
<p>下面是一个潜在的解决方案。</p>
<p>你可以分别创建<code>.h1</code>到<code>.h6</code>的样式来应用到你的HTML，而不是利用<code>-</code>样式，像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;c-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;h5&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我喜欢这种解决方案的简单性，其中有一个排版真理的来源。 您只需访问一个<code>_typography.scss</code>文件即可在网站上显示不同排版大小的数量。</p>
<p>现在，虽然<code>.h1</code> - <code>.h6</code>类的解决方案很棒，但我强烈建议不要用<code>.h1</code> - <code>.h6</code>为你的类，只是因为它们被隐含地绑在<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>对象上。</p>
<p>如果你有一个<code>&lt;h2&gt;</code>元素，但决定用<code>.h3</code>来写样式它会发生什么？ 接管你的代码库的另一个开发人员可能会遇到一个最初的不和他们去“为什么是<code>.h3</code> 和<code>&lt;h2&gt;</code>写在一起了？</p>
<p>所以，不是写<code>.h1</code>到<code>.h6</code>的样式，我给排版类<strong>不同的前缀</strong>，这取决于它们是比我的基本<code>font-size</code>大或更小。 以下是一个例子：</p>
<ul>
<li><code>.t1</code> - 最大的字体大小。</li>
<li><code>.t2</code> - 第二大字体大小。</li>
<li><code>.t3</code> - 第三大字体大小。</li>
<li><code>.s1</code> - 第一字体大小较小的基本字体大小。</li>
<li><code>.s2</code> - 第二字体大小较小的基本字体大小。</li>
<li>…</li>
</ul>
<p>这五个<code>class</code>通常是我每个项目所需的一切（到目前为止）。 这样一个惯例的好处就是能够一目了然地告诉元素的大小。 在下面的例子中，我确定这个链接的尺寸小于我的基本字体大小。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，如果您无法控制HTML，但想要控制排版类的大小呢？</p>
<p>对于这种情况，我建议您创建和使用mixins，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> s1 &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="selector-tag">line</span>-<span class="attribute">height</span>: <span class="number">1.25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在我们进入下个话题的最后一件事。 要特别注意这一点。</p>
<p>排版类是对象的<strong>子集</strong>。您应该<strong>像排列对象那样将相同的一套规则应用于排版类</strong>。 这意味着你不应该在排版类中添加<code>margin</code>或<code>padding</code>。而这些<code>margin</code>或<code>padding</code>应该直接添加到组件。（阅读Harry的<span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20vMjAxNi8wMi9tYW5hZ2luZy10eXBvZ3JhcGh5LW9uLWxhcmdlLWFwcHMv">在大型应用上管理排版<i class="fa fa-external-link-alt"></i></span>了解为什么我推荐这个）。</p>
<p>让我们继续。</p>
<h2 id="“-u-”-——实用类-Utility"><a href="#“-u-”-——实用类-Utility" class="headerlink" title="“.u-” ——实用类(Utility)"></a>“.u-” ——实用类(Utility)</h2><p><strong>实用类是用来表现样式的一个非常好的辅助类</strong>。它们做得很好，并且其优先级高超过了其他样式。 因此，它们通常只包含一个属性，并且包含<code>!important</code>声明。</p>
<p>例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.u-text-left</span> &#123; </span><br><span class="line">    <span class="attribute">text-align</span>: left <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.u-text-center</span> &#123; </span><br><span class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.u-text-right</span> &#123; </span><br><span class="line">    <span class="attribute">text-align</span>: right <span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.u-hide-st-med</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">man-width</span>: <span class="number">599px</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.u-hide-bp-med</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我刚才在这里说的几乎是我用于实用类的一切。 我从来没有发现有了这些类还有做不好的事。</p>
<p>唷。闲话不说，咱回到工作&#x2F;玩耍&#x2F;学习或任何你正在做的事情，所以让我们来回顾一下。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在本文中，我向您展示了如何使用命名空间填补BEM的遗憾。通过包含命名空间，我终于实现了一个好的架构中寻找的所有四个标准：</p>
<ul>
<li>类必须<strong>尽量少地添加避免HTML膨胀</strong>。</li>
<li>我必须<strong>立即知道组件是否使用JavaScript</strong>。</li>
<li>我必须<strong>立即知道是否可以安全地编辑一个类而不会影响其他任何其他CSS</strong>。</li>
<li>我必须<strong>立即知道每个class是适合于什么</strong>，以防止大脑过载。</li>
</ul>
<p>总之，我总共使用了七个不同的命名空间。 他们是：</p>
<ul>
<li><code>.l-</code>: 布局(layouts)</li>
<li><code>.o-</code>: 对象(objects)</li>
<li><code>.c-</code>: 组件(components)</li>
<li><code>.js</code>: js的钩子(JavaScript hooks)</li>
<li><code>.is-</code>|<code>.has-</code>: 状态类(state classes)</li>
<li><code>.t1</code>|<code>.s1</code>: 排版大小(typography sizes)</li>
<li><code>.u-</code>: 实用类(utility classes)</li>
</ul>
<p>每个命名空间都有一个功能，可以在整个事物的宏伟计划中进行，进一步加强了样式表中的层次结构。</p>
<p>接下来，我将与大家分享一下如何打破这些我刚才设置的规则（<strong>“嗯，再次?!你真的喜欢打破规则吗？”</strong>）以及我如何组织我的CSS文件。</p>
<p>现在，我好奇的听到你的想法。你觉得我使用的命名空间如何？我的“违背专家命名空间”的使用<code>.o-</code>和<code>.c-</code>对你有帮助&#x2F;有用吗？还是更让你迷糊呢？我很想听到你在下面的评论中的想法:)</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>CSS</tag>
        <tag>BEM</tag>
        <tag>软件架构</tag>
        <tag>命名空间</tag>
      </tags>
  </entry>
  <entry>
    <title>编码规范 by @mdo</title>
    <url>/2016/11/04/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%20by%20@mdo/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>HTML<ul>
<li>语法</li>
<li>HTML5 doctype</li>
<li>语言属性（Language attribute）</li>
<li>字符编码</li>
<li>IE 兼容模式</li>
<li>引入 CSS 和 JavaScript 文件</li>
<li>实用为王</li>
<li>属性顺序</li>
<li>布尔（boolean）型属性</li>
<li>减少标签的数量</li>
<li>JavaScript 生成的标签</li>
</ul>
</li>
<li>CSS<ul>
<li>语法</li>
<li>声明顺序</li>
<li>媒体查询（Media query）的位置</li>
<li>带前缀的属性</li>
<li>单行规则声明</li>
<li>简写形式的属性声明</li>
<li>Less 和 Sass 中的嵌套</li>
<li>注释</li>
<li>class 命名</li>
<li>选择器</li>
<li>代码组织</li>
</ul>
</li>
</ul>
<h1 id="黄金定律"><a href="#黄金定律" class="headerlink" title="黄金定律"></a>黄金定律</h1><p>永远遵循同一套编码规范 – 可以是这里列出的，也可以是你自己总结的。如果你发现本规范中有任何错误，敬请指正。通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21kby9jb2RlLWd1aWRlL2lzc3Vlcy9uZXc=">open an issue on GitHub<i class="fa fa-external-link-alt"></i></span>为本规范添加或贡献内容。</p>
<p>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>嵌套元素应当缩进一次（即两个空格）。</li>
<li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li>
<li>不要在自闭合（self-closing）元素的尾部添加斜线 – <span class="exturl" data-url="aHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy1hdXRob3Itdmlldy9zeW50YXguaHRtbCNzeW50YXgtc3RhcnQtdGFn">HTML5 规范<i class="fa fa-external-link-alt"></i></span>中明确说明这是可选的。</li>
<li>不要省略可选的结束标签（closing tag）（例如，<code>&lt;/li&gt;</code> 或 <code>&lt;/body&gt;</code>）。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company-logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hello-world&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML5-doctype"><a href="#HTML5-doctype" class="headerlink" title="HTML5 doctype"></a>HTML5 doctype</h2><p>为每个 HTML 页面的第一行添加标准模式（standard mode）的声明，这样能够确保在每个浏览器中拥有一致的展现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="语言属性"><a href="#语言属性" class="headerlink" title="语言属性"></a>语言属性</h2><h3 id="根据-HTML5-规范："><a href="#根据-HTML5-规范：" class="headerlink" title="根据 HTML5 规范："></a>根据 HTML5 规范：</h3><p>强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。<br>更多关于 <code>lang</code> 属性的知识可以从 <span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudA==">此规范<i class="fa fa-external-link-alt"></i></span> 中了解。</p>
<p>这里列出了<span class="exturl" data-url="aHR0cDovL3JlZmVyZW5jZS5zaXRlcG9pbnQuY29tL2h0bWwvbGFuZy1jb2Rlcw==">语言代码表<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment"><!-- ... --></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h2><p>IE 支持通过特定的 <code>&lt;meta&gt;</code> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 <strong>edge mode</strong>，从而通知 IE 采用其所支持的最新的模式。</p>
<p><span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NzcxMjU4L3doYXRzLXRoZS1kaWZmZXJlbmNlLWlmLW1ldGEtaHR0cC1lcXVpdi14LXVhLWNvbXBhdGlibGUtY29udGVudC1pZS1lZGdlLWU=">阅读这篇 stack overflow<i class="fa fa-external-link-alt"></i></span> 上的文章可以获得更多有用的信息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="引入-CSS-和-JavaScript-文件"><a href="#引入-CSS-和-JavaScript-文件" class="headerlink" title="引入 CSS 和 JavaScript 文件"></a>引入 CSS 和 JavaScript 文件</h2><p>根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 type 属性，因为 text&#x2F;css 和 text&#x2F;javascript 分别是它们的默认值。</p>
<h3 id="HTML5-spec-links"><a href="#HTML5-spec-links" class="headerlink" title="HTML5 spec links"></a>HTML5 spec links</h3><ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zZW1hbnRpY3MuaHRtbCN0aGUtbGluay1lbGVtZW50">Using link<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zZW1hbnRpY3MuaHRtbCN0aGUtc3R5bGUtZWxlbWVudA==">Using style<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1odG1sNS0yMDExMDUyNS9zY3JpcHRpbmctMS5odG1sI3RoZS1zY3JpcHQtZWxlbWVudA==">Using script<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- External CSS --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;code-guide.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- In-document CSS --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- JavaScript --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;code-guide.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实用为王"><a href="#实用为王" class="headerlink" title="实用为王"></a>实用为王</h3><p>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p>
<h3 id="属性顺序"><a href="#属性顺序" class="headerlink" title="属性顺序"></a>属性顺序</h3><p>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。</p>
<ul>
<li><code>class</code></li>
<li><code>id</code>, <code>name</code></li>
<li><code>data-*</code></li>
<li><code>src</code>, <code>for</code>, <code>type</code>, <code>href</code></li>
<li><code>title</code>, <code>alt</code></li>
<li><code>aria-*</code>, <code>role</code></li>
</ul>
<p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">data-modal</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  Example link</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="布尔（boolean）型属性"><a href="#布尔（boolean）型属性" class="headerlink" title="布尔（boolean）型属性"></a>布尔（boolean）型属性</h2><p>布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。</p>
<p>更多信息请参考 <span class="exturl" data-url="aHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbW9uLW1pY3Jvc3ludGF4ZXMuaHRtbCNib29sZWFuLWF0dHJpYnV0ZXM=">WhatWG section on boolean attributes<i class="fa fa-external-link-alt"></i></span>：</p>
<blockquote>
<p>元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。</p>
</blockquote>
<p>如果<em>一定</em>要为其赋值的话，请参考 WhatWG 规范：</p>
<blockquote>
<p>如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要再收尾添加空白符。</p>
</blockquote>
<p><strong>简单来说，就是不用赋值。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="减少标签的数量"><a href="#减少标签的数量" class="headerlink" title="减少标签的数量"></a>减少标签的数量</h2><p>编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。请看下面的案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- Not so great --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- Better --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JavaScript-生成的标签"><a href="#JavaScript-生成的标签" class="headerlink" title="JavaScript 生成的标签"></a>JavaScript 生成的标签</h2><p>通过 JavaScript 生成的标签让内容变得不易查找、编辑，并且降低性能。能避免时尽量避免。</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><ul>
<li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li>
<li>为选择器分组时，将单独的选择器单独放在一行。</li>
<li>为了代码的易读性，在每个声明块的左花括号前添加一个空格。</li>
<li>声明块的右花括号应当单独成行。</li>
<li>每条声明语句的 <code>:</code> 后应该插入一个空格。</li>
<li>为了获得更准确的错误报告，每条声明都应该独占一行。</li>
<li>所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。</li>
<li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，<code>box-shadow</code>）。</li>
<li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的<em>内部</em>的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li>
<li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，<code>.5</code> 代替 <code>0.5</code>；<code>-.5px</code> 代替 <code>-0.5px</code>）。</li>
<li>十六进制值应该全部小写，例如，<code>#fff</code>。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。</li>
<li>尽量使用简写形式的十六进制值，例如，用 <code>#fff</code> 代替 <code>#ffffff</code>。</li>
<li>为选择器中的属性添加双引号，例如，<code>input[type=&quot;text&quot;]</code>。<span class="exturl" data-url="aHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvdW5xdW90ZWQtYXR0cmlidXRlLXZhbHVlcyNjc3M=">只有在某些情况下是可选的<i class="fa fa-external-link-alt"></i></span>，但是，为了代码的一致性，建议都加上双引号。</li>
<li>避免为 0 值指定单位，例如，用 <code>margin: 0;</code> 代替 <code>margin: 0px;</code>。</li>
</ul>
<p>对于这里用到的术语有疑问吗？请参考 Wikipedia 上的 <span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYXNjYWRpbmdfU3R5bGVfU2hlZXRzI1N5bnRheA==">syntax section of the Cascading Style Sheets article<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h2><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p>
<ul>
<li>Positioning</li>
<li>Box model</li>
<li>Typographic</li>
<li>Visual</li>
</ul>
<p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。</p>
<p>其他属性只是影响组件的*内部（inside）*或者是不影响前两组属性，因此排在后面。</p>
<p>完整的属性列表及其排列顺序请参考 <span class="exturl" data-url="aHR0cDovL3R3aXR0ZXIuZ2l0aHViLmNvbS9yZWNlc3M=">Recess<i class="fa fa-external-link-alt"></i></span>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Misc */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用 @import"></a>不要使用 <code>@import</code></h2><p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p>
<ul>
<li>使用多个 <code>&lt;link&gt;</code> 元素</li>
<li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li>
<li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li>
</ul>
<p>请参考 <span class="exturl" data-url="aHR0cDovL3d3dy5zdGV2ZXNvdWRlcnMuY29tL2Jsb2cvMjAwOS8wNC8wOS9kb250LXVzZS1pbXBvcnQv">Steve Souders 的文章<i class="fa fa-external-link-alt"></i></span>了解更多知识。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment"><!-- Use link elements --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;core.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><!-- Avoid @imports --></span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@import</span> url(<span class="string">&quot;more.css&quot;</span>);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="媒体查询（Media-query）的位置"><a href="#媒体查询（Media-query）的位置" class="headerlink" title="媒体查询（Media query）的位置"></a>媒体查询（Media query）的位置</h2><p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。下面给出一个典型的实例。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123; ...&#125;</span><br><span class="line">  <span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>带前缀的属性</p>
<p>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</p>
<p>在 Textmate 中，使用 <strong>Text → Edit Each Line in Selection</strong> (⌃⌘A)。在 Sublime Text 2 中，使用 <strong>Selection → Add Previous Line</strong> (⌃⇧↑) 和 <strong>Selection → Add Next Line</strong> (⌃⇧↓)。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Prefixed properties */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单行规则声明"><a href="#单行规则声明" class="headerlink" title="单行规则声明"></a>单行规则声明</h2><p>对于<strong>只包含一条声明</strong>的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p>
<p>这样做的关键因素是为了错误检测 – 例如，CSS 校验器指出在 183 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Single declarations on one line */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple declarations, one per line */</span></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../img/sprite.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="简写形式的属性声明"><a href="#简写形式的属性声明" class="headerlink" title="简写形式的属性声明"></a>简写形式的属性声明</h2><p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下：</p>
<ul>
<li><code>padding</code></li>
<li><code>margin</code></li>
<li><code>font</code></li>
<li><code>background</code></li>
<li><code>border</code></li>
<li><code>border-radius</code></li>
</ul>
<p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的 heading 元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。</p>
<p>MDN（Mozilla Developer Network）上一片非常好的关于 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL1Nob3J0aGFuZF9wcm9wZXJ0aWVz">shorthand properties<i class="fa fa-external-link-alt"></i></span> 的文章，对于不太熟悉简写属性声明及其行为的用户很有用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Less-和-Sass-中的嵌套"><a href="#Less-和-Sass-中的嵌套" class="headerlink" title="Less 和 Sass 中的嵌套"></a>Less 和 Sass 中的嵌套</h2><p>避免非必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Without nesting</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line">// With nesting</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &#123;</span><br><span class="line">  &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line">  &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>代码是由人编写并维护的。请确保你的代码能够自描述、注释良好并且易于他人理解。好的代码注释能够传达上下文关系和代码目的。不要简单地重申组件或 class 名称。</p>
<p>对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="comment">/* Modal header */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="comment">/* Wrapping element for .modal-title and .modal-close */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="class-命名"><a href="#class-命名" class="headerlink" title="class 命名"></a>class 命名</h2><ul>
<li>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，<code>.btn</code> 和 <code>.btn-danger</code>）。</li>
<li>避免过度任意的简写。<code>.btn</code> 代表 <em>button</em>，但是 <code>.s</code> 不能表达任何意思。</li>
<li>class 名称应当尽可能短，并且意义明确。</li>
<li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。</li>
<li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li>
<li>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li>
</ul>
<p>在为 Sass 和 Less 变量命名是也可以参考上面列出的各项规范。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.t</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.tweet</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.important</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> &#123; ... &#125;</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line">## 选择器</span><br><span class="line">* 对于通用元素使用 class ，这样利于渲染性能的优化。</span><br><span class="line">* 对于经常出现的组件，避免使用属性选择器（例如，<span class="selector-attr">[class^=<span class="string">&quot;...&quot;</span>]</span>）。浏览器的性能会受到这些因素的影响。</span><br><span class="line">* 选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 <span class="number">3</span> 。</span><br><span class="line">* **只有**在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）（例如，不使用带前缀的 class 时 -- 前缀类似于命名空间）。</span><br><span class="line"></span><br><span class="line">扩展阅读：</span><br><span class="line"></span><br><span class="line">* <span class="selector-attr">[Scope CSS classes with prefixes]</span>(http://markdotto.com/<span class="number">2012</span>/<span class="number">02</span>/<span class="number">16</span>/scope-css-classes-with-prefixes/)</span><br><span class="line">* [Stop the cascade](http://markdotto.com/<span class="number">2012</span>/<span class="number">03</span>/<span class="number">02</span>/stop-the-cascade/)</span><br><span class="line"></span><br><span class="line">```CSS</span><br><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line">span &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.page-container</span> <span class="selector-id">#stream</span> <span class="selector-class">.stream-item</span> <span class="selector-class">.tweet</span> <span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet</span> <span class="selector-class">.avatar</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><ul>
<li>以组件为单位组织代码段。</li>
<li>制定一致的注释规范。</li>
<li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。</li>
<li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Component section heading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Component section heading</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Sometimes you need to include optional context for the entire component. Do that up here if it&#x27;s important enough.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Contextual sub-component or modifer */</span></span><br><span class="line"><span class="selector-class">.element-heading</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h2><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p>
<ul>
<li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li>
<li>保存文件时，删除尾部的空白符。</li>
<li>设置文件编码为 UTF-8。</li>
<li>在文件结尾添加一个空白行。</li>
</ul>
<p>参照文档并将这些配置信息添加到项目的 <code>editorconfig</code> 文件中。例如：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyLy5lZGl0b3Jjb25maWc=">Bootstrap 中的 .editorconfig 实例<i class="fa fa-external-link-alt"></i></span>。更多信息请参考 <span class="exturl" data-url="aHR0cDovL2VkaXRvcmNvbmZpZy5vcmcv">about EditorConfig<i class="fa fa-external-link-alt"></i></span>。</p>
<h1 id=""><a href="#" class="headerlink" title="&lt;3"></a>&lt;3</h1><p>Heavily inspired by <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25lY29sYXMvaWRpb21hdGljLWNzcw==">Idiomatic CSS<i class="fa fa-external-link-alt"></i></span> and the <span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vc3R5bGVndWlkZQ==">GitHub Styleguide<i class="fa fa-external-link-alt"></i></span>. Made with all the love in the world by <span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9tZG8=">@mdo<i class="fa fa-external-link-alt"></i></span>.</p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>界面优化</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>能把你从坠落中拽起来的45部励志电影</title>
    <url>/2022/01/01/%E8%83%BD%E6%8A%8A%E4%BD%A0%E4%BB%8E%E5%9D%A0%E8%90%BD%E4%B8%AD%E6%8B%BD%E8%B5%B7%E6%9D%A5%E7%9A%8445%E9%83%A8%E5%8A%B1%E5%BF%97%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<blockquote>
<p> 励志片的作用，就是在你顾虑、担心、犹豫的时候，踹你一脚，让你朝助力最大的方向狂奔。<br>这 45 部电影里藏着许多希望、激励和方向。相信总有一部能触碰到你的内心。</p>
</blockquote>
<ol>
<li><p><strong>《肖生克的救赎》</strong>	希望总是在最无望的场地迸发着最美丽奇迹的火焰。</p>
</li>
<li><p><strong>《当幸福来敲门》</strong>	幸福必须靠自己争取。</p>
</li>
<li><p><strong>《阿甘正传》</strong>	每一个人的生命轨迹都是存在的，而且是独一无二的。</p>
</li>
<li><p><strong>《三傻大闹宝莱坞》</strong>	追求卓越，成功就离你不远了</p>
</li>
<li><p><strong>《风雨哈弗路》</strong>	努力中的你永远比你想象中的要幸运</p>
</li>
<li><p><strong>《美丽心灵》</strong>	这是上帝对两位美丽心灵的赏赐</p>
</li>
<li><p><strong>《叫我第一名》</strong>	影响自己最大的永远是自己</p>
</li>
<li><p><strong>《奔腾年代》</strong>	一个人毕生想要追求的东西甚至比他的生命还重要</p>
</li>
<li><p><strong>《放牛班的春天》</strong>	没有一个孩子是不可救药的</p>
</li>
<li><p><strong>《勇敢的心》</strong>	看清人间，仍有勇气追求自由</p>
</li>
<li><p><strong>《喜剧之王》</strong>	小人物也能有大梦想</p>
</li>
<li><p><strong>《贫民窟的百万富翁》</strong>	一场对自我坚守的肯定报答</p>
</li>
<li><p><strong>《死亡诗社》</strong>	我希望生活得有意义</p>
</li>
<li><p><strong>《弱点》</strong>	人性存在弱点，我们才可能去期盼明天会更好</p>
</li>
<li><p><strong>《美丽人生》</strong>	就算在最艰难最黑暗的日子也要保持阳光</p>
</li>
<li><p><strong>《国王的演讲》</strong>	你相信一个结巴的人能登上大舞台演讲吗</p>
</li>
<li><p><strong>《爆裂鼓手》</strong>	英语中，再没有哪两个词比“good job”更害人的</p>
</li>
<li><p><strong>《洛奇》</strong>	要是你知道自己的价值，就去争取你的价值</p>
</li>
<li><p><strong>《百万美元宝贝》</strong>	因为热情，我想我可以</p>
</li>
<li><p><strong>《摔跤吧，爸爸》</strong>	正面应战吧，这是你生来的目的</p>
</li>
<li><p><strong>《猜火车》</strong>	你不会愈来愈年轻，世界在变，你不能整天在这儿</p>
</li>
<li><p><strong>《百元之恋》</strong>	跟生活死磕吧别放弃，怎么也要赢一次</p>
</li>
<li><p><strong>《生活多美好》</strong>	不寄希望于他人，就是要靠自己的力量去改变</p>
</li>
<li><p><strong>《千与千寻》</strong>	一直向前走。千万别向后看</p>
</li>
<li><p><strong>《入殓师》</strong>	生如夏花般灿烂，死如秋叶般静美</p>
</li>
<li><p><strong>《永不妥协》</strong>	自己选择的路就该一步一步的走完</p>
</li>
<li><p><strong>《一球成名》</strong>	人因梦想而伟大</p>
</li>
<li><p><strong>《中国合伙人》</strong>	成功者总是不约而同的配合着时代的需要</p>
</li>
<li><p><strong>《跳出我天地》</strong>	你选择了一条路并不意味着放弃另外一条</p>
</li>
<li><p><strong>《千钧一发》</strong>	我有书，我在脑海中旅行</p>
</li>
<li><p><strong>《127小时》</strong>	那是对生命的热爱</p>
</li>
<li><p><strong>《追梦赤子心》</strong>	继续跑，带着赤子的骄傲</p>
</li>
<li><p><strong>《永无止境》</strong>	对于任何事情都不尽力去做就是在浪费才能</p>
</li>
<li><p><strong>《华尔街之狼》</strong>	能取胜的人，总是在说“必须”如何“未来”如何</p>
</li>
<li><p><strong>《钢琴家》</strong>	唯有用力反抗，才能战胜黑暗</p>
</li>
<li><p><strong>《光荣之路》</strong>	如果你现在停下来，后面的生活就会一起停下来</p>
</li>
<li><p><strong>《沙漠之花》</strong>	在你想要放弃是，想想为什么当初坚持走到了这里。</p>
</li>
<li><p><strong>《寿司之神》</strong>	人需要竞争才能进步</p>
</li>
<li><p><strong>《朝圣之路》</strong>	时刻带着自己的阳光</p>
</li>
<li><p><strong>《白日梦想家》</strong>	没有冒险没有变动的生活总是很平庸</p>
</li>
<li><p><strong>《麦克法兰》</strong>	最励志的跑步电影，适合所有年龄段跑者</p>
</li>
<li><p><strong>《卡特教练》</strong>	最怕的不是别人看不起我们，最怕的是我们前途无量</p>
</li>
<li><p><strong>《早间主播》</strong>	有梦想是好事儿</p>
</li>
<li><p><strong>《闪光少女》</strong>	我喜欢萤火虫，因为它虽然弱小却能发光</p>
</li>
<li><p><strong>《成为简奥斯丁》</strong>	精神之力不可摧</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>电影</tag>
        <tag>励志片</tag>
      </tags>
  </entry>
  <entry>
    <title>自签名ssl证书</title>
    <url>/2024/07/13/%E8%87%AA%E7%AD%BE%E5%90%8Dssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p><strong>使用 OpenSSL 工具生成自签名 SSL 证书，为内网环境中的网站安全保驾护航</strong></p>
<p>在内网环境中，使用 OpenSSL 工具进行自签名 SSL 证书的创建，能够为您的网站提供有效的安全保障。</p>
<p><strong>自签证书流程</strong>：</p>
<ol>
<li>创建 ca 私钥。</li>
<li>基于 ca 私钥生成 ca 根证书。</li>
<li>构建 ssl 私钥。</li>
<li>生成 ssl 证书 csr。</li>
<li>运用 ca 根证书签署以获得 ssl 证书。</li>
</ol>
<p><strong>操作方法</strong></p>
<ol>
<li>创建 ca 私钥（强烈建议设置密码以增强安全性）：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl genrsa -des3 -out root.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..............................................................+++</span><br><span class="line">................+++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">Enter pass phrase for root.key:</span><br><span class="line"></span><br><span class="line">Verifying - Enter pass phrase for root.key:</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>生成 ca 证书，自签 20 年有效期，并将此 ca 证书导入需要访问的 PC 的“受信任的根证书颁发机构”中，后续用此 ca 签署的证书均可正常使用：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl req -x509 -new -nodes -key root.key -sha256 -days 7300 -out root.crt</span></span><br><span class="line">Enter pass phrase for root.key:</span><br><span class="line"></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN    # 国家</span><br><span class="line">State or Province Name (full name) [Some-State]:SiChuan   # 省份</span><br><span class="line">Locality Name (eg, city) []:ChengDu   # 城市</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Sichuan Lingyun Technology Co., LTD  # 组织</span><br><span class="line">Organizational Unit Name (eg, section) []: # 部门</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:Sichuan Lingyun Technology Co., LTD # 公司</span><br><span class="line">Email Address []: # 邮箱</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>完成上述步骤后，创建 ssl 证书私钥：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl genrsa -out server.key 2048</span></span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...................................................................................+++</span><br><span class="line">..........+++</span><br><span class="line">e is 65537 (0x010001)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>随后创建 ssl 证书 csr：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl req -new -key server.key -out server.csr</span></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:SiChuan</span><br><span class="line">Locality Name (eg, city) []:ChengDu</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Sichuan Lingyun Technology Co., LTD</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:Sichuan Lingyun Technology Co., LTD</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following &#x27;extra&#x27; attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建域名附加配置信息，新建一个文件，通过 vim cert.ext ，将以下代码粘贴后保存：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = localhost</span><br><span class="line">IP.2 = 192.168.0.10</span><br><span class="line">IP.3 = 192.168.1.200</span><br><span class="line">DNS.4 = xa.it.com</span><br><span class="line">DNS.5 = xiykj.com</span><br><span class="line">DNS.6 = *.xa.com</span><br></pre></td></tr></table></figure>

<p>需要注意的是，IP.2 &#x3D; 192.168.11.100 表示 https 要访问的 IP 地址，IP.3 同理也是 IP 地址，ssl 证书允许自签多个 IP 地址，这便是自签 IP 的证书。而 DNS.4 &#x3D; <span class="exturl" data-url="aHR0cHM6Ly94YS5pdC5jb20v">https://xa.it.com/<i class="fa fa-external-link-alt"></i></span> 则表示 https 要访问的域名，DNS.5、DNS.6 同理均为域名，ssl 证书也支持自签多个域名，此为自签域名的证书。</p>
<ol start="6">
<li>使用CA根证书签署ssl证书，自签ssl证书有效期20年：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl x509 -req -<span class="keyword">in</span> server.csr -out server.crt -days 7300 -CAcreateserial -CA root.crt -CAkey root.key -CAserial serial -extfile cert.ext</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=C = CN, ST = SiChuan, L = ChengDu, O = &quot;Sichuan Lingyun Technology Co., LTD&quot;</span><br><span class="line">Getting CA Private Key</span><br><span class="line">Enter pass phrase for root.key:</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>查看文件，通过执行“ls -al”命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -al</span></span><br><span class="line">cert.ext          #ssl证书附加配置信息</span><br><span class="line">serial            #证书序列号</span><br><span class="line">server.crt        #ssl证书文件，包含公钥信息</span><br><span class="line">server.csr        #ssl证书签名文件</span><br><span class="line">server.key        #ssl证书私钥</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>查看签署的证书信息：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl x509 -<span class="keyword">in</span> server.crt -noout -text</span></span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number:</span><br><span class="line">            cd:ae:a9:3e:b7:bb:93:e1</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: C = CN, ST = SiChuan, L = ChengDu, O = &quot;Sichuan Lingyun Technology Co., LTD&quot;</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Jul 18 06:26:05 2024 GMT</span><br><span class="line">            Not After : Jul 13 06:26:05 2044 GMT</span><br><span class="line">        Subject: C = CN, ST = SiChuan, L = ChengDu, O = &quot;Sichuan Lingyun Technology Co., LTD&quot;</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:aa:4e:ca:f5:0d:51:e7:b4:ba:3c:0b:6e:a5:4a:</span><br><span class="line">                    d8:b4:0d:ad:19:54:3d:11:02:14:29:41:45:76:fc:</span><br><span class="line">                    4a:b0:6c:5c:76:46:91:ff:8d:89:7a:f2:a8:62:73:</span><br><span class="line">                    1d:c4:3a:96:8c:74:82:0a:e9:58:55:73:4a:4e:ec:</span><br><span class="line">                    17:23:43:90:39:69:0e:aa:ac:ec:71:3e:60:e5:6b:</span><br><span class="line">                    0c:e7:7b:f9:8f:93:db:a8:45:ae:d9:43:6f:f1:a1:</span><br><span class="line">                    1c:01:0a:14:33:ce:4f:8c:81:f0:34:b5:cc:7c:81:</span><br><span class="line">                    f6:91:1a:69:31:dc:8a:d1:c1:cc:34:6f:96:71:e0:</span><br><span class="line">                    c2:86:79:37:47:a7:e4:c8:71:3f:44:82:38:7e:11:</span><br><span class="line">                    4d:05:96:fd:01:d8:8c:8b:75:0b:bc:6e:ad:37:1d:</span><br><span class="line">                    77:94:0b:2a:15:1a:43:3c:f6:59:61:eb:ea:8a:73:</span><br><span class="line">                    54:06:b0:ed:70:11:77:42:57:59:e1:80:df:eb:0b:</span><br><span class="line">                    36:d7:7b:d6:c8:53:20:e7:3a:cb:7c:95:67:ea:ff:</span><br><span class="line">                    25:06:80:e9:93:b2:1d:a0:58:9f:ec:60:65:76:e8:</span><br><span class="line">                    24:2c:14:9d:86:47:83:3b:b9:66:59:7d:69:b5:bd:</span><br><span class="line">                    46:af:4f:15:a7:21:45:d1:8c:a1:9b:8b:73:20:94:</span><br><span class="line">                    17:0e:1b:da:d2:e3:93:fb:98:d8:db:13:2b:ed:ff:</span><br><span class="line">                    f5:95</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Authority Key Identifier:</span><br><span class="line">                keyid:8D:FB:23:BD:1D:AA:3B:C0:12:62:2A:15:8F:27:BF:81:EB:94:15:42</span><br><span class="line"></span><br><span class="line">            X509v3 Basic Constraints:</span><br><span class="line">                CA:FALSE</span><br><span class="line">            X509v3 Key Usage:</span><br><span class="line">                Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment</span><br><span class="line">            X509v3 Subject Alternative Name:</span><br><span class="line">                DNS:localhost, IP Address:192.168.11.100, IP Address:192.168.10.200, DNS:xa.it.com, DNS:xiykj.com, DNS:*.xa.com</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         74:0f:a7:56:97:66:e1:8d:7a:5e:4e:7b:6f:b0:da:26:31:5c:</span><br><span class="line">         a3:77:9d:7f:25:19:1c:e2:cd:6a:ee:b3:9e:1f:55:3e:ea:8c:</span><br><span class="line">         05:5b:0f:9e:ac:f7:0f:72:8b:4c:6e:eb:20:4c:c3:d4:7b:d1:</span><br><span class="line">         63:79:54:dc:8d:46:f5:2e:73:fe:4f:5e:8f:d2:3c:54:47:90:</span><br><span class="line">         ae:cd:20:28:31:19:88:26:ec:46:86:1c:1e:ab:8b:67:77:d6:</span><br><span class="line">         81:1d:62:1b:59:7c:d6:4d:52:fe:44:b7:18:ce:6d:47:d3:34:</span><br><span class="line">         48:c8:59:c9:f9:3a:2a:41:9a:7c:50:c0:43:b0:6a:f4:3c:b1:</span><br><span class="line">         d5:49:f1:be:21:ae:b9:d8:72:48:19:f8:20:8c:3b:03:c5:c7:</span><br><span class="line">         26:0d:27:08:4d:0b:9e:27:ea:3c:bf:c3:09:07:fe:b0:68:9c:</span><br><span class="line">         76:1a:3f:49:44:af:67:9f:47:af:88:9f:50:25:1c:f4:a3:05:</span><br><span class="line">         b6:fb:1c:04:16:3d:6d:d3:ac:99:92:73:05:2f:c8:08:9a:e4:</span><br><span class="line">         88:e4:12:4d:f3:d0:aa:47:3c:eb:cf:9b:20:3a:88:e5:33:1b:</span><br><span class="line">         32:65:14:78:1d:c4:24:e8:63:e7:8e:18:b3:2b:bb:e2:94:38:</span><br><span class="line">         1d:dd:1f:f5:13:a2:db:ef:65:bc:12:a9:66:4f:48:15:57:e8:</span><br><span class="line">         82:79:24:a0</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>使用 CA 验证 ssl 证书状态，若显示“OK”则表示通过验证：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl verify -CAfile root.crt server.crt</span></span><br><span class="line">server.crt: OK</span><br></pre></td></tr></table></figure>

<p>最后，将 root.crt 导入到需要访问的客户端 PC 的“受信任的根证书颁发机构”中，同时将 server.crt、server.key 文件部署在服务器上即可。</p>
]]></content>
      <tags>
        <tag>OpenSSL</tag>
        <tag>SSL/TLS</tag>
        <tag>证书管理</tag>
        <tag>公钥基础设施 (PKI)</tag>
      </tags>
  </entry>
  <entry>
    <title>获取阿里云盘Token</title>
    <url>/2023/12/15/%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98Token/</url>
    <content><![CDATA[<p>自动获取: Chrome登录 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL2RyaXZlLw==">阿里云盘<i class="fa fa-external-link-alt"></i></span> 后，控制台粘贴</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="property">token</span>).<span class="property">refresh_token</span></span><br></pre></td></tr></table></figure>


<p><img src="/images/pasted-68.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>阿里云盘</tag>
        <tag>网络请求</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁 MySQL 树形查询新姿势：递归 CTE 实战指南</title>
    <url>/2025/05/10/%E8%A7%A3%E9%94%81-MySQL-%E6%A0%91%E5%BD%A2%E6%9F%A5%E8%AF%A2%E6%96%B0%E5%A7%BF%E5%8A%BF%EF%BC%9A%E9%80%92%E5%BD%92-CTE-%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="一、MySQL-递归-CTE-基础概念"><a href="#一、MySQL-递归-CTE-基础概念" class="headerlink" title="一、MySQL 递归 CTE 基础概念"></a>一、MySQL 递归 CTE 基础概念</h2><h3 id="1-1-什么是递归-CTE？"><a href="#1-1-什么是递归-CTE？" class="headerlink" title="1.1 什么是递归 CTE？"></a>1.1 什么是递归 CTE？</h3><p>递归公用表表达式（Recursive CTE）是 MySQL 8.0 引入的高级特性，通过<code>WITH RECURSIVE</code>语法定义，允许在 CTE 内部递归引用自身，专门用于处理具有层级关系的树形数据，如组织架构、分类目录、文件系统等。其核心思想是通过锚成员（初始查询）和递归成员（迭代查询）的结合，逐层扩展结果集，直至满足终止条件（递归成员返回空集）。</p>
<h3 id="1-2-适用场景"><a href="#1-2-适用场景" class="headerlink" title="1.2 适用场景"></a>1.2 适用场景</h3><p><strong>组织架构管理</strong>：查询某个部门的所有上下级节点。</p>
<p><strong>分类目录遍历</strong>：获取商品分类的全层级路径。</p>
<p><strong>树状结构分析</strong>：查找节点的所有祖先或后代，替代传统自连接或存储过程的复杂逻辑。</p>
<h2 id="二、递归-CTE-语法解析与执行逻辑"><a href="#二、递归-CTE-语法解析与执行逻辑" class="headerlink" title="二、递归 CTE 语法解析与执行逻辑"></a>二、递归 CTE 语法解析与执行逻辑</h2><h3 id="2-1-核心语法结构"><a href="#2-1-核心语法结构" class="headerlink" title="2.1 核心语法结构"></a>2.1 核心语法结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> cte_name (column_list) <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 锚成员：定义递归初始条件，返回基础结果集</span></span><br><span class="line">    initial_query    </span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span>  <span class="comment">-- 必须使用UNION ALL，确保递归过程高效合并结果</span></span><br><span class="line">    <span class="comment">-- 递归成员：引用CTE名称，定义迭代规则</span></span><br><span class="line">    recursive_query   </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最终查询：基于CTE结果集进行筛选或关联</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> cte_name;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-执行流程详解"><a href="#2-2-执行流程详解" class="headerlink" title="2.2 执行流程详解"></a>2.2 执行流程详解</h3><p><strong>锚成员执行</strong>：生成初始结果集（R0），如指定节点的基础信息。</p>
<p><strong>递归迭代</strong>：将上一次结果集（Ri）作为输入，通过<code>UNION ALL</code>合并新生成的结果集（Ri+1），直到递归成员返回空集。</p>
<p><strong>终止条件</strong>：隐式终止于递归成员无数据返回，或显式通过条件（如<code>WHERE n &lt; 100</code>）限制递归深度。</p>
<h3 id="2-3-递归成员限制"><a href="#2-3-递归成员限制" class="headerlink" title="2.3 递归成员限制"></a>2.3 递归成员限制</h3><p>禁止使用聚合函数（如<code>SUM</code>&#x2F;<code>COUNT</code>）、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>LIMIT</code>、<code>DISTINCT</code>（<code>UNION DISTINCT</code>除外）。</p>
<p>仅能引用 CTE 名称，不能嵌套子查询。</p>
<h2 id="三、典型场景与实战案例"><a href="#三、典型场景与实战案例" class="headerlink" title="三、典型场景与实战案例"></a>三、典型场景与实战案例</h2><h3 id="3-1-查询节点所有父节点（向上递归）"><a href="#3-1-查询节点所有父节点（向上递归）" class="headerlink" title="3.1 查询节点所有父节点（向上递归）"></a>3.1 查询节点所有父节点（向上递归）</h3><p><strong>场景</strong>：从子节点出发，逐层查找所有上级节点（如员工查询其所有管理层级）。<strong>表结构</strong>：<code>club(id, name, pid)</code>，<code>pid</code>为父节点 ID，根节点<code>pid</code>为<code>NULL</code>。<strong>SQL 示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> parent_path <span class="keyword">AS</span> (</span><br><span class="line">    <span class="comment">-- 锚成员：初始节点（如id=5的子节点）</span></span><br><span class="line">    <span class="keyword">SELECT</span> id, name, pid <span class="keyword">FROM</span> club <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span>    </span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span>    </span><br><span class="line">    <span class="comment">-- 递归成员：通过pid关联，获取父节点</span></span><br><span class="line">    <span class="keyword">SELECT</span> p.id, p.name, p.pid <span class="keyword">FROM</span> club p <span class="keyword">JOIN</span> parent_path pp <span class="keyword">ON</span> p.id <span class="operator">=</span> pp.pid    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> parent_path;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong>：从 id&#x3D;5 开始，每次递归通过<code>pid</code>找到父节点，直至无更高层级节点。</p>
<h3 id="3-2-查询节点所有子节点（向下递归）"><a href="#3-2-查询节点所有子节点（向下递归）" class="headerlink" title="3.2 查询节点所有子节点（向下递归）"></a>3.2 查询节点所有子节点（向下递归）</h3><p><strong>场景</strong>：从父节点出发，获取其所有直接及间接子节点（如部门主管查询下属团队）。<strong>SQL 示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> child_path <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> id, name, pid <span class="keyword">FROM</span> club <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>  <span class="comment">-- 锚成员：初始父节点</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span>    </span><br><span class="line">    <span class="comment">-- 递归成员：通过子节点pid关联父节点id</span></span><br><span class="line">    <span class="keyword">SELECT</span> c.id, c.name, c.pid <span class="keyword">FROM</span> club c <span class="keyword">JOIN</span> child_path cp <span class="keyword">ON</span> c.pid <span class="operator">=</span> cp.id    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> child_path;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong>：以 id&#x3D;3 为起点，逐层匹配<code>pid=当前id</code>的子节点，实现无限层级遍历。</p>
<h3 id="3-3-添加层级标识（Level-字段）"><a href="#3-3-添加层级标识（Level-字段）" class="headerlink" title="3.3 添加层级标识（Level 字段）"></a>3.3 添加层级标识（Level 字段）</h3><p><strong>场景</strong>：在查询结果中显式节点层级，方便分页或排序（如目录树展示）。<strong>SQL 示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> level_tree <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> id, name, pid, <span class="number">1</span> <span class="keyword">AS</span> level <span class="keyword">FROM</span> club <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>  <span class="comment">-- 根节点层级为1</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span>    </span><br><span class="line">    <span class="keyword">SELECT</span> c.id, c.name, c.pid, ct.level <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> level  <span class="comment">-- 子节点层级=父层级+1</span></span><br><span class="line">    <span class="keyword">FROM</span> club c <span class="keyword">JOIN</span> level_tree ct <span class="keyword">ON</span> c.pid <span class="operator">=</span> ct.id    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 筛选层级&gt;3的深层子节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> id, name, pid, level <span class="keyword">FROM</span> level_tree <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong>：通过<code>level</code>字段量化层级深度，避免表设计时预存层级的冗余问题。</p>
<h3 id="3-4-实战优化：业务层与-SQL-层解耦"><a href="#3-4-实战优化：业务层与-SQL-层解耦" class="headerlink" title="3.4 实战优化：业务层与 SQL 层解耦"></a>3.4 实战优化：业务层与 SQL 层解耦</h3><p><strong>场景</strong>：传统 Java&#x2F;Python 代码中，递归遍历组织架构易导致性能瓶颈，改用递归 CTE 后可在数据库层高效完成。<strong>MyBatis 映射示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> DeptTree <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> id_ <span class="keyword">FROM</span> org_group <span class="keyword">WHERE</span> id_ <span class="operator">=</span> #&#123;deptId&#125;  <span class="comment">-- 锚成员：目标部门</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span>    </span><br><span class="line">  <span class="keyword">SELECT</span> og.id_ <span class="keyword">FROM</span> org_group og <span class="keyword">JOIN</span> DeptTree dt <span class="keyword">ON</span> og.parent_id_ <span class="operator">=</span> dt.id_  <span class="comment">-- 递归获取子部门</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> su.<span class="operator">*</span> <span class="keyword">FROM</span> sys_user su <span class="keyword">JOIN</span> DeptTree dt <span class="keyword">ON</span> su.dept_id <span class="operator">=</span> dt.id_</span><br></pre></td></tr></table></figure>

<p><strong>优势</strong>：避免多次往返数据库，单条 SQL 完成层级查询，提升系统响应速度。</p>
<h2 id="四、注意事项与最佳实践"><a href="#四、注意事项与最佳实践" class="headerlink" title="四、注意事项与最佳实践"></a>四、注意事项与最佳实践</h2><h3 id="4-1-MySQL-版本要求"><a href="#4-1-MySQL-版本要求" class="headerlink" title="4.1 MySQL 版本要求"></a>4.1 MySQL 版本要求</h3><p>仅支持 MySQL 8.0 及以上版本，低版本需使用存储过程或应用层递归实现。</p>
<h3 id="4-2-避免死循环"><a href="#4-2-避免死循环" class="headerlink" title="4.2 避免死循环"></a>4.2 避免死循环</h3><p><strong>数据校验</strong>：确保层级数据无环（如 A→B→A），否则递归会因无法终止报错（默认最大递归深度 1000，可通过<code>SET @@cte_max_recursion_depth = N</code>调整）。</p>
<p><strong>条件限制</strong>：在递归成员中添加合理过滤条件（如<code>WHERE level &lt; 50</code>），防止无限递归。</p>
<h3 id="4-3-索引优化"><a href="#4-3-索引优化" class="headerlink" title="4.3 索引优化"></a>4.3 索引优化</h3><p>为<code>id</code>和<code>pid</code>字段添加索引，提升递归过程中 JOIN 操作的效率，尤其对大规模层级数据至关重要。</p>
<h3 id="4-4-结果去重"><a href="#4-4-结果去重" class="headerlink" title="4.4 结果去重"></a>4.4 结果去重</h3><p>若数据存在重复关联，可在最终查询中使用<code>DISTINCT</code>去重，但需注意递归成员中禁止直接使用<code>DISTINCT</code>。</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>递归 CTE 是 MySQL 处理树形数据的 “瑞士军刀”，通过简洁的语法将复杂的层级查询转化为结构化的递归过程，显著提升开发效率与查询性能。无论是组织架构、分类目录还是其他层级场景，掌握递归 CTE 的锚成员定义、递归规则设计及终止条件把控，都能让你在数据处理中游刃有余。建议在实际项目中结合索引优化与数据校验，充分发挥其在层级查询中的优势。</p>
<p><strong>动手实践</strong>：尝试在示例表<code>club</code>中插入多级数据，分别编写查询根节点、叶节点及全路径的递归 CTE 语句，观察结果差异与执行效率。</p>
]]></content>
  </entry>
  <entry>
    <title>解除windows隐藏受保护的操作系统文件</title>
    <url>/2016/12/03/%E8%A7%A3%E9%99%A4windows%E9%9A%90%E8%97%8F%E5%8F%97%E4%BF%9D%E6%8A%A4%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>对于文件夹：</p>
<p>1、解除对某磁盘某个文件夹的强行隐藏(示例)：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">attrib</span> d:\&quot;Program Files&quot; -s -h /s /d</span><br></pre></td></tr></table></figure>

<p>2、解除对某磁盘全部文件夹的强行隐藏(示例)：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">attrib</span> d:\&quot;*&quot; -s -h /s /d</span><br></pre></td></tr></table></figure>

<p>——友情提示：以上示例中，d:为磁盘盘符；引号内为文件夹名称；相关命令参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>+r</td>
<td>设置只读文件属性。</td>
</tr>
<tr>
<td>-r</td>
<td>清除只读文件属性。</td>
</tr>
<tr>
<td>+a</td>
<td>设置存档属性。</td>
</tr>
<tr>
<td>-a</td>
<td>清除存档属性。</td>
</tr>
<tr>
<td>+s</td>
<td>设置系统文件属性。</td>
</tr>
<tr>
<td>-s</td>
<td>清除系统文件属性。</td>
</tr>
<tr>
<td>+h</td>
<td>设置隐藏文件属性。</td>
</tr>
<tr>
<td>-h</td>
<td>清除隐藏文件属性。</td>
</tr>
<tr>
<td>&#x2F;s</td>
<td>将attrib和任意命令行选项应用到当前目录及其所有子目录中的匹配文件。</td>
</tr>
<tr>
<td>&#x2F;d</td>
<td>将attrib和任意命令行选项应用到目录。</td>
</tr>
<tr>
<td>&#x2F;?</td>
<td>在命令提示符下显示帮助。</td>
</tr>
</tbody></table>
<p>对于文件：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ATTRIB</span> [+R | -R] [+A | -A ] [+S | -S] [+H | -H] [[drive:] [<span class="built_in">path</span>] filename] [/S [ /D]]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>设置属性。</td>
</tr>
<tr>
<td>-</td>
<td>清除属性。</td>
</tr>
<tr>
<td>R</td>
<td>只读文件属性。</td>
</tr>
<tr>
<td>A</td>
<td>存档文件属性。</td>
</tr>
<tr>
<td>S</td>
<td>系统文件属性。</td>
</tr>
<tr>
<td>H</td>
<td>隐藏文件属性。</td>
</tr>
<tr>
<td>[drive:][path][filename]</td>
<td>指定要处理的文件属性。</td>
</tr>
<tr>
<td>&#x2F;S</td>
<td>处理当前文件夹及其子文件夹中的匹配文件。</td>
</tr>
<tr>
<td>&#x2F;D</td>
<td>也处理文件夹。</td>
</tr>
</tbody></table>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attrib -s -h -r c:\*.*</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>命令行工具</tag>
        <tag>Windows</tag>
        <tag>操作系统</tag>
        <tag>系统文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>设置获取cookie，setCookie，getCookie</title>
    <url>/2018/03/15/%E8%AE%BE%E7%BD%AE%E8%8E%B7%E5%8F%96cookie%EF%BC%8CsetCookie%EF%BC%8CgetCookie/</url>
    <content><![CDATA[<h2 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name,value</span>) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Days</span> = <span class="number">30</span>; </span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() + <span class="title class_">Days</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>); </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span>+ <span class="built_in">escape</span> (value) + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读取cookie"><a href="#读取cookie" class="headerlink" title="读取cookie"></a>读取cookie</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">var</span> arr,reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^| )&quot;</span>+name+<span class="string">&quot;=([^;]*)(;|$)&quot;</span>); </span><br><span class="line">　　 <span class="keyword">return</span> (arr=<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">match</span>(reg))?<span class="built_in">unescape</span>(arr[<span class="number">2</span>]):<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除cookie（将cookie设置过期即可）"><a href="#删除cookie（将cookie设置过期即可）" class="headerlink" title="删除cookie（将cookie设置过期即可）"></a>删除cookie（将cookie设置过期即可）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delCookie</span>(<span class="params">name</span>) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line">    exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() - <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">var</span> cval=<span class="title function_">getCookie</span>(name); </span><br><span class="line">    <span class="keyword">if</span>(cval!=<span class="literal">null</span>) </span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span>= name + <span class="string">&quot;=&quot;</span>+cval+<span class="string">&quot;;expires=&quot;</span>+exp.<span class="title function_">toGMTString</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>escape(string) 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。<br>unescape(string) 函数可对通过 escape() 编码的字符串进行解码。</p>
</blockquote>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>JavaScript</tag>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>调整Kali linux时区</title>
    <url>/2019/11/17/%E8%B0%83%E6%95%B4Kali-linux%E6%97%B6%E5%8C%BA/</url>
    <content><![CDATA[<p>目的：渗透测试和安全审计中需要kali linux的系统时间与实际时间同步。</p>
<p>命令：<code>sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</code></p>
<p>使用命令 <code>timedatectl</code> 查看当前时区等信息</p>
]]></content>
      <tags>
        <tag>kali-linux</tag>
        <tag>时区设置</tag>
        <tag>timedatectl</tag>
      </tags>
  </entry>
</search>
